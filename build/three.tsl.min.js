/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{TSL as e}from"three/webgpu";const r=e.BRDF_GGX,t=e.BRDF_Lambert,a=e.BasicShadowFilter,o=e.Break,i=e.Continue,n=e.DFGApprox,s=e.D_GGX,l=e.Discard,c=e.EPSILON,m=e.F_Schlick,p=e.Fn,d=e.INFINITY,u=e.If,g=e.Loop,h=e.NodeShaderStage,f=e.NodeType,x=e.NodeUpdateType,b=e.NodeAccess,w=e.PCFShadowFilter,v=e.PCFSoftShadowFilter,S=e.PI,T=e.PI2,_=e.Return,V=e.Schlick_to_F0,y=e.ScriptableNodeResources,D=e.ShaderNode,M=e.TBNViewMatrix,F=e.VSMShadowFilter,C=e.V_GGX_SmithCorrelated,I=e.abs,P=e.acesFilmicToneMapping,R=e.acos,N=e.add,B=e.addNodeElement,L=e.agxToneMapping,k=e.all,A=e.alphaT,G=e.and,O=e.anisotropy,W=e.anisotropyB,j=e.anisotropyT,U=e.any,z=e.append,q=e.array,E=e.arrayBuffer,Z=e.asin,X=e.assign,Y=e.atan,H=e.atan2,J=e.atomicAdd,K=e.atomicAnd,Q=e.atomicFunc,$=e.atomicMax,ee=e.atomicMin,re=e.atomicOr,te=e.atomicStore,ae=e.atomicSub,oe=e.atomicXor,ie=e.atomicLoad,ne=e.attenuationColor,se=e.attenuationDistance,le=e.attribute,ce=e.attributeArray,me=e.backgroundBlurriness,pe=e.backgroundIntensity,de=e.backgroundRotation,ue=e.batch,ge=e.billboarding,he=e.bitAnd,fe=e.bitNot,xe=e.bitOr,be=e.bitXor,we=e.bitangentGeometry,ve=e.bitangentLocal,Se=e.bitangentView,Te=e.bitangentWorld,_e=e.bitcast,Ve=e.blendBurn,ye=e.blendColor,De=e.blendDodge,Me=e.blendOverlay,Fe=e.blendScreen,Ce=e.blur,Ie=e.bool,Pe=e.buffer,Re=e.bufferAttribute,Ne=e.bumpMap,Be=e.burn,Le=e.bvec2,ke=e.bvec3,Ae=e.bvec4,Ge=e.bypass,Oe=e.cache,We=e.call,je=e.cameraFar,Ue=e.cameraIndex,ze=e.cameraNear,qe=e.cameraNormalMatrix,Ee=e.cameraPosition,Ze=e.cameraProjectionMatrix,Xe=e.cameraProjectionMatrixInverse,Ye=e.cameraViewMatrix,He=e.cameraWorldMatrix,Je=e.cbrt,Ke=e.cdl,Qe=e.ceil,$e=e.checker,er=e.cineonToneMapping,rr=e.clamp,tr=e.clearcoat,ar=e.clearcoatRoughness,or=e.code,ir=e.color,nr=e.colorSpaceToWorking,sr=e.colorToDirection,lr=e.compute,cr=e.cond,mr=e.Const,pr=e.context,dr=e.convert,ur=e.convertColorSpace,gr=e.convertToTexture,hr=e.cos,fr=e.cross,xr=e.cubeTexture,br=e.dFdx,wr=e.dFdy,vr=e.dashSize,Sr=e.defaultBuildStages,Tr=e.defaultShaderStages,_r=e.defined,Vr=e.degrees,yr=e.deltaTime,Dr=e.densityFog,Mr=e.densityFogFactor,Fr=e.depth,Cr=e.depthPass,Ir=e.difference,Pr=e.diffuseColor,Rr=e.directPointLight,Nr=e.directionToColor,Br=e.dispersion,Lr=e.distance,kr=e.div,Ar=e.dodge,Gr=e.dot,Or=e.drawIndex,Wr=e.dynamicBufferAttribute,jr=e.element,Ur=e.emissive,zr=e.equal,qr=e.equals,Er=e.equirectUV,Zr=e.exp,Xr=e.exp2,Yr=e.expression,Hr=e.faceDirection,Jr=e.faceForward,Kr=e.faceforward,Qr=e.float,$r=e.floor,et=e.fog,rt=e.fract,tt=e.frameGroup,at=e.frameId,ot=e.frontFacing,it=e.fwidth,nt=e.gain,st=e.gapSize,lt=e.getConstNodeType,ct=e.getCurrentStack,mt=e.getDirection,pt=e.getDistanceAttenuation,dt=e.getGeometryRoughness,ut=e.getNormalFromDepth,gt=e.getParallaxCorrectNormal,ht=e.getRoughness,ft=e.getScreenPosition,xt=e.getShIrradianceAt,bt=e.getTextureIndex,wt=e.getViewPosition,vt=e.glsl,St=e.glslFn,Tt=e.grayscale,_t=e.greaterThan,Vt=e.greaterThanEqual,yt=e.hash,Dt=e.highpModelNormalViewMatrix,Mt=e.highpModelViewMatrix,Ft=e.hue,Ct=e.instance,It=e.instanceIndex,Pt=e.instancedArray,Rt=e.instancedBufferAttribute,Nt=e.instancedDynamicBufferAttribute,Bt=e.instancedMesh,Lt=e.int,kt=e.inverseSqrt,At=e.inversesqrt,Gt=e.invocationLocalIndex,Ot=e.invocationSubgroupIndex,Wt=e.ior,jt=e.iridescence,Ut=e.iridescenceIOR,zt=e.iridescenceThickness,qt=e.ivec2,Et=e.ivec3,Zt=e.ivec4,Xt=e.js,Yt=e.label,Ht=e.length,Jt=e.lengthSq,Kt=e.lessThan,Qt=e.lessThanEqual,$t=e.lightPosition,ea=e.lightTargetDirection,ra=e.lightTargetPosition,ta=e.lightViewPosition,aa=e.lightingContext,oa=e.lights,ia=e.linearDepth,na=e.linearToneMapping,sa=e.localId,la=e.globalId,ca=e.log,ma=e.log2,pa=e.logarithmicDepthToViewZ,da=e.loop,ua=e.luminance,ga=e.mediumpModelViewMatrix,ha=e.mat2,fa=e.mat3,xa=e.mat4,ba=e.matcapUV,wa=e.materialAO,va=e.materialAlphaTest,Sa=e.materialAnisotropy,Ta=e.materialAnisotropyVector,_a=e.materialAttenuationColor,Va=e.materialAttenuationDistance,ya=e.materialClearcoat,Da=e.materialClearcoatNormal,Ma=e.materialClearcoatRoughness,Fa=e.materialColor,Ca=e.materialDispersion,Ia=e.materialEmissive,Pa=e.materialIOR,Ra=e.materialIridescence,Na=e.materialIridescenceIOR,Ba=e.materialIridescenceThickness,La=e.materialLightMap,ka=e.materialLineDashOffset,Aa=e.materialLineDashSize,Ga=e.materialLineGapSize,Oa=e.materialLineScale,Wa=e.materialLineWidth,ja=e.materialMetalness,Ua=e.materialNormal,za=e.materialOpacity,qa=e.materialPointSize,Ea=e.materialReference,Za=e.materialReflectivity,Xa=e.materialRefractionRatio,Ya=e.materialRotation,Ha=e.materialRoughness,Ja=e.materialSheen,Ka=e.materialSheenRoughness,Qa=e.materialShininess,$a=e.materialSpecular,eo=e.materialSpecularColor,ro=e.materialSpecularIntensity,to=e.materialSpecularStrength,ao=e.materialThickness,oo=e.materialTransmission,io=e.max,no=e.maxMipLevel,so=e.metalness,lo=e.min,co=e.mix,mo=e.mixElement,po=e.mod,uo=e.modInt,go=e.modelDirection,ho=e.modelNormalMatrix,fo=e.modelPosition,xo=e.modelRadius,bo=e.modelScale,wo=e.modelViewMatrix,vo=e.modelViewPosition,So=e.modelViewProjection,To=e.modelWorldMatrix,_o=e.modelWorldMatrixInverse,Vo=e.morphReference,yo=e.mrt,Do=e.mul,Mo=e.mx_aastep,Fo=e.mx_cell_noise_float,Co=e.mx_contrast,Io=e.mx_fractal_noise_float,Po=e.mx_fractal_noise_vec2,Ro=e.mx_fractal_noise_vec3,No=e.mx_fractal_noise_vec4,Bo=e.mx_hsvtorgb,Lo=e.mx_noise_float,ko=e.mx_noise_vec3,Ao=e.mx_noise_vec4,Go=e.mx_ramplr,Oo=e.mx_ramptb,Wo=e.mx_rgbtohsv,jo=e.mx_safepower,Uo=e.mx_splitlr,zo=e.mx_splittb,qo=e.mx_srgb_texture_to_lin_rec709,Eo=e.mx_transform_uv,Zo=e.mx_worley_noise_float,Xo=e.mx_worley_noise_vec2,Yo=e.mx_worley_noise_vec3,Ho=e.negate,Jo=e.neutralToneMapping,Ko=e.nodeArray,Qo=e.nodeImmutable,$o=e.nodeObject,ei=e.nodeObjects,ri=e.nodeProxy,ti=e.normalFlat,ai=e.normalGeometry,oi=e.normalLocal,ii=e.normalMap,ni=e.normalView,si=e.normalWorld,li=e.normalize,ci=e.not,mi=e.notEqual,pi=e.numWorkgroups,di=e.objectDirection,ui=e.objectGroup,gi=e.objectPosition,hi=e.objectRadius,fi=e.objectScale,xi=e.objectViewPosition,bi=e.objectWorldMatrix,wi=e.oneMinus,vi=e.or,Si=e.orthographicDepthToViewZ,Ti=e.oscSawtooth,_i=e.oscSine,Vi=e.oscSquare,yi=e.oscTriangle,Di=e.output,Mi=e.outputStruct,Fi=e.overlay,Ci=e.overloadingFn,Ii=e.parabola,Pi=e.parallaxDirection,Ri=e.parallaxUV,Ni=e.parameter,Bi=e.pass,Li=e.passTexture,ki=e.pcurve,Ai=e.perspectiveDepthToViewZ,Gi=e.pmremTexture,Oi=e.pointUV,Wi=e.pointWidth,ji=e.positionGeometry,Ui=e.positionLocal,zi=e.positionPrevious,qi=e.positionView,Ei=e.positionViewDirection,Zi=e.positionWorld,Xi=e.positionWorldDirection,Yi=e.posterize,Hi=e.pow,Ji=e.pow2,Ki=e.pow3,Qi=e.pow4,$i=e.property,en=e.radians,rn=e.rand,tn=e.range,an=e.rangeFog,on=e.rangeFogFactor,nn=e.reciprocal,sn=e.lightProjectionUV,ln=e.reference,cn=e.referenceBuffer,mn=e.reflect,pn=e.reflectVector,dn=e.reflectView,un=e.reflector,gn=e.refract,hn=e.refractVector,fn=e.refractView,xn=e.reinhardToneMapping,bn=e.remainder,wn=e.remap,vn=e.remapClamp,Sn=e.renderGroup,Tn=e.renderOutput,_n=e.rendererReference,Vn=e.rotate,yn=e.rotateUV,Dn=e.roughness,Mn=e.round,Fn=e.rtt,Cn=e.sRGBTransferEOTF,In=e.sRGBTransferOETF,Pn=e.sampler,Rn=e.samplerComparison,Nn=e.saturate,Bn=e.saturation,Ln=e.screen,kn=e.screenCoordinate,An=e.screenSize,Gn=e.screenUV,On=e.scriptable,Wn=e.scriptableValue,jn=e.select,Un=e.setCurrentStack,zn=e.shaderStages,qn=e.shadow,En=e.pointShadow,Zn=e.shadowPositionWorld,Xn=e.sharedUniformGroup,Yn=e.shapeCircle,Hn=e.sheen,Jn=e.sheenRoughness,Kn=e.shiftLeft,Qn=e.shiftRight,$n=e.shininess,es=e.sign,rs=e.sin,ts=e.sinc,as=e.skinning,os=e.skinningReference,is=e.smoothstep,ns=e.smoothstepElement,ss=e.specularColor,ls=e.specularF90,cs=e.spherizeUV,ms=e.split,ps=e.spritesheetUV,ds=e.sqrt,us=e.stack,gs=e.step,hs=e.storage,fs=e.storageBarrier,xs=e.storageObject,bs=e.storageTexture,ws=e.string,vs=e.struct,Ss=e.sub,Ts=e.subgroupIndex,_s=e.subgroupSize,Vs=e.tan,ys=e.tangentGeometry,Ds=e.tangentLocal,Ms=e.tangentView,Fs=e.tangentWorld,Cs=e.temp,Is=e.texture,Ps=e.texture3D,Rs=e.textureBarrier,Ns=e.textureBicubic,Bs=e.textureCubeUV,Ls=e.textureLoad,ks=e.textureSize,As=e.textureStore,Gs=e.thickness,Os=e.threshold,Ws=e.time,js=e.timerDelta,Us=e.timerGlobal,zs=e.timerLocal,qs=e.toOutputColorSpace,Es=e.toWorkingColorSpace,Zs=e.toneMapping,Xs=e.toneMappingExposure,Ys=e.toonOutlinePass,Hs=e.transformDirection,Js=e.transformNormal,Ks=e.transformNormalToView,Qs=e.transformedBentNormalView,$s=e.transformedBitangentView,el=e.transformedBitangentWorld,rl=e.transformedClearcoatNormalView,tl=e.transformedNormalView,al=e.transformedNormalWorld,ol=e.transformedTangentView,il=e.transformedTangentWorld,nl=e.transmission,sl=e.transpose,ll=e.tri,cl=e.tri3,ml=e.triNoise3D,pl=e.triplanarTexture,dl=e.triplanarTextures,ul=e.trunc,gl=e.tslFn,hl=e.uint,fl=e.uniform,xl=e.uniformArray,bl=e.uniformGroup,wl=e.uniforms,vl=e.userData,Sl=e.uv,Tl=e.uvec2,_l=e.uvec3,Vl=e.uvec4,yl=e.Var,Dl=e.varying,Ml=e.varyingProperty,Fl=e.vec2,Cl=e.vec3,Il=e.vec4,Pl=e.vectorComponents,Rl=e.velocity,Nl=e.vertexColor,Bl=e.vertexIndex,Ll=e.vibrance,kl=e.viewZToLogarithmicDepth,Al=e.viewZToOrthographicDepth,Gl=e.viewZToPerspectiveDepth,Ol=e.viewport,Wl=e.viewportBottomLeft,jl=e.viewportCoordinate,Ul=e.viewportDepthTexture,zl=e.viewportLinearDepth,ql=e.viewportMipTexture,El=e.viewportResolution,Zl=e.viewportSafeUV,Xl=e.viewportSharedTexture,Yl=e.viewportSize,Hl=e.viewportTexture,Jl=e.viewportTopLeft,Kl=e.viewportUV,Ql=e.wgsl,$l=e.wgslFn,ec=e.workgroupArray,rc=e.workgroupBarrier,tc=e.workgroupId,ac=e.workingToColorSpace,oc=e.xor;export{r as BRDF_GGX,t as BRDF_Lambert,a as BasicShadowFilter,o as Break,mr as Const,i as Continue,n as DFGApprox,s as D_GGX,l as Discard,c as EPSILON,m as F_Schlick,p as Fn,d as INFINITY,u as If,g as Loop,b as NodeAccess,h as NodeShaderStage,f as NodeType,x as NodeUpdateType,w as PCFShadowFilter,v as PCFSoftShadowFilter,S as PI,T as PI2,_ as Return,V as Schlick_to_F0,y as ScriptableNodeResources,D as ShaderNode,M as TBNViewMatrix,F as VSMShadowFilter,C as V_GGX_SmithCorrelated,yl as Var,I as abs,P as acesFilmicToneMapping,R as acos,N as add,B as addNodeElement,L as agxToneMapping,k as all,A as alphaT,G as and,O as anisotropy,W as anisotropyB,j as anisotropyT,U as any,z as append,q as array,E as arrayBuffer,Z as asin,X as assign,Y as atan,H as atan2,J as atomicAdd,K as atomicAnd,Q as atomicFunc,ie as atomicLoad,$ as atomicMax,ee as atomicMin,re as atomicOr,te as atomicStore,ae as atomicSub,oe as atomicXor,ne as attenuationColor,se as attenuationDistance,le as attribute,ce as attributeArray,me as backgroundBlurriness,pe as backgroundIntensity,de as backgroundRotation,ue as batch,ge as billboarding,he as bitAnd,fe as bitNot,xe as bitOr,be as bitXor,we as bitangentGeometry,ve as bitangentLocal,Se as bitangentView,Te as bitangentWorld,_e as bitcast,Ve as blendBurn,ye as blendColor,De as blendDodge,Me as blendOverlay,Fe as blendScreen,Ce as blur,Ie as bool,Pe as buffer,Re as bufferAttribute,Ne as bumpMap,Be as burn,Le as bvec2,ke as bvec3,Ae as bvec4,Ge as bypass,Oe as cache,We as call,je as cameraFar,Ue as cameraIndex,ze as cameraNear,qe as cameraNormalMatrix,Ee as cameraPosition,Ze as cameraProjectionMatrix,Xe as cameraProjectionMatrixInverse,Ye as cameraViewMatrix,He as cameraWorldMatrix,Je as cbrt,Ke as cdl,Qe as ceil,$e as checker,er as cineonToneMapping,rr as clamp,tr as clearcoat,ar as clearcoatRoughness,or as code,ir as color,nr as colorSpaceToWorking,sr as colorToDirection,lr as compute,cr as cond,pr as context,dr as convert,ur as convertColorSpace,gr as convertToTexture,hr as cos,fr as cross,xr as cubeTexture,br as dFdx,wr as dFdy,vr as dashSize,Sr as defaultBuildStages,Tr as defaultShaderStages,_r as defined,Vr as degrees,yr as deltaTime,Dr as densityFog,Mr as densityFogFactor,Fr as depth,Cr as depthPass,Ir as difference,Pr as diffuseColor,Rr as directPointLight,Nr as directionToColor,Br as dispersion,Lr as distance,kr as div,Ar as dodge,Gr as dot,Or as drawIndex,Wr as dynamicBufferAttribute,jr as element,Ur as emissive,zr as equal,qr as equals,Er as equirectUV,Zr as exp,Xr as exp2,Yr as expression,Hr as faceDirection,Jr as faceForward,Kr as faceforward,Qr as float,$r as floor,et as fog,rt as fract,tt as frameGroup,at as frameId,ot as frontFacing,it as fwidth,nt as gain,st as gapSize,lt as getConstNodeType,ct as getCurrentStack,mt as getDirection,pt as getDistanceAttenuation,dt as getGeometryRoughness,ut as getNormalFromDepth,gt as getParallaxCorrectNormal,ht as getRoughness,ft as getScreenPosition,xt as getShIrradianceAt,bt as getTextureIndex,wt as getViewPosition,la as globalId,vt as glsl,St as glslFn,Tt as grayscale,_t as greaterThan,Vt as greaterThanEqual,yt as hash,Dt as highpModelNormalViewMatrix,Mt as highpModelViewMatrix,Ft as hue,Ct as instance,It as instanceIndex,Pt as instancedArray,Rt as instancedBufferAttribute,Nt as instancedDynamicBufferAttribute,Bt as instancedMesh,Lt as int,kt as inverseSqrt,At as inversesqrt,Gt as invocationLocalIndex,Ot as invocationSubgroupIndex,Wt as ior,jt as iridescence,Ut as iridescenceIOR,zt as iridescenceThickness,qt as ivec2,Et as ivec3,Zt as ivec4,Xt as js,Yt as label,Ht as length,Jt as lengthSq,Kt as lessThan,Qt as lessThanEqual,$t as lightPosition,sn as lightProjectionUV,ea as lightTargetDirection,ra as lightTargetPosition,ta as lightViewPosition,aa as lightingContext,oa as lights,ia as linearDepth,na as linearToneMapping,sa as localId,ca as log,ma as log2,pa as logarithmicDepthToViewZ,da as loop,ua as luminance,ha as mat2,fa as mat3,xa as mat4,ba as matcapUV,wa as materialAO,va as materialAlphaTest,Sa as materialAnisotropy,Ta as materialAnisotropyVector,_a as materialAttenuationColor,Va as materialAttenuationDistance,ya as materialClearcoat,Da as materialClearcoatNormal,Ma as materialClearcoatRoughness,Fa as materialColor,Ca as materialDispersion,Ia as materialEmissive,Pa as materialIOR,Ra as materialIridescence,Na as materialIridescenceIOR,Ba as materialIridescenceThickness,La as materialLightMap,ka as materialLineDashOffset,Aa as materialLineDashSize,Ga as materialLineGapSize,Oa as materialLineScale,Wa as materialLineWidth,ja as materialMetalness,Ua as materialNormal,za as materialOpacity,qa as materialPointSize,Ea as materialReference,Za as materialReflectivity,Xa as materialRefractionRatio,Ya as materialRotation,Ha as materialRoughness,Ja as materialSheen,Ka as materialSheenRoughness,Qa as materialShininess,$a as materialSpecular,eo as materialSpecularColor,ro as materialSpecularIntensity,to as materialSpecularStrength,ao as materialThickness,oo as materialTransmission,io as max,no as maxMipLevel,ga as mediumpModelViewMatrix,so as metalness,lo as min,co as mix,mo as mixElement,po as mod,uo as modInt,go as modelDirection,ho as modelNormalMatrix,fo as modelPosition,xo as modelRadius,bo as modelScale,wo as modelViewMatrix,vo as modelViewPosition,So as modelViewProjection,To as modelWorldMatrix,_o as modelWorldMatrixInverse,Vo as morphReference,yo as mrt,Do as mul,Mo as mx_aastep,Fo as mx_cell_noise_float,Co as mx_contrast,Io as mx_fractal_noise_float,Po as mx_fractal_noise_vec2,Ro as mx_fractal_noise_vec3,No as mx_fractal_noise_vec4,Bo as mx_hsvtorgb,Lo as mx_noise_float,ko as mx_noise_vec3,Ao as mx_noise_vec4,Go as mx_ramplr,Oo as mx_ramptb,Wo as mx_rgbtohsv,jo as mx_safepower,Uo as mx_splitlr,zo as mx_splittb,qo as mx_srgb_texture_to_lin_rec709,Eo as mx_transform_uv,Zo as mx_worley_noise_float,Xo as mx_worley_noise_vec2,Yo as mx_worley_noise_vec3,Ho as negate,Jo as neutralToneMapping,Ko as nodeArray,Qo as nodeImmutable,$o as nodeObject,ei as nodeObjects,ri as nodeProxy,ti as normalFlat,ai as normalGeometry,oi as normalLocal,ii as normalMap,ni as normalView,si as normalWorld,li as normalize,ci as not,mi as notEqual,pi as numWorkgroups,di as objectDirection,ui as objectGroup,gi as objectPosition,hi as objectRadius,fi as objectScale,xi as objectViewPosition,bi as objectWorldMatrix,wi as oneMinus,vi as or,Si as orthographicDepthToViewZ,Ti as oscSawtooth,_i as oscSine,Vi as oscSquare,yi as oscTriangle,Di as output,Mi as outputStruct,Fi as overlay,Ci as overloadingFn,Ii as parabola,Pi as parallaxDirection,Ri as parallaxUV,Ni as parameter,Bi as pass,Li as passTexture,ki as pcurve,Ai as perspectiveDepthToViewZ,Gi as pmremTexture,En as pointShadow,Oi as pointUV,Wi as pointWidth,ji as positionGeometry,Ui as positionLocal,zi as positionPrevious,qi as positionView,Ei as positionViewDirection,Zi as positionWorld,Xi as positionWorldDirection,Yi as posterize,Hi as pow,Ji as pow2,Ki as pow3,Qi as pow4,$i as property,en as radians,rn as rand,tn as range,an as rangeFog,on as rangeFogFactor,nn as reciprocal,ln as reference,cn as referenceBuffer,mn as reflect,pn as reflectVector,dn as reflectView,un as reflector,gn as refract,hn as refractVector,fn as refractView,xn as reinhardToneMapping,bn as remainder,wn as remap,vn as remapClamp,Sn as renderGroup,Tn as renderOutput,_n as rendererReference,Vn as rotate,yn as rotateUV,Dn as roughness,Mn as round,Fn as rtt,Cn as sRGBTransferEOTF,In as sRGBTransferOETF,Pn as sampler,Rn as samplerComparison,Nn as saturate,Bn as saturation,Ln as screen,kn as screenCoordinate,An as screenSize,Gn as screenUV,On as scriptable,Wn as scriptableValue,jn as select,Un as setCurrentStack,zn as shaderStages,qn as shadow,Zn as shadowPositionWorld,Yn as shapeCircle,Xn as sharedUniformGroup,Hn as sheen,Jn as sheenRoughness,Kn as shiftLeft,Qn as shiftRight,$n as shininess,es as sign,rs as sin,ts as sinc,as as skinning,os as skinningReference,is as smoothstep,ns as smoothstepElement,ss as specularColor,ls as specularF90,cs as spherizeUV,ms as split,ps as spritesheetUV,ds as sqrt,us as stack,gs as step,hs as storage,fs as storageBarrier,xs as storageObject,bs as storageTexture,ws as string,vs as struct,Ss as sub,Ts as subgroupIndex,_s as subgroupSize,Vs as tan,ys as tangentGeometry,Ds as tangentLocal,Ms as tangentView,Fs as tangentWorld,Cs as temp,Is as texture,Ps as texture3D,Rs as textureBarrier,Ns as textureBicubic,Bs as textureCubeUV,Ls as textureLoad,ks as textureSize,As as textureStore,Gs as thickness,Os as threshold,Ws as time,js as timerDelta,Us as timerGlobal,zs as timerLocal,qs as toOutputColorSpace,Es as toWorkingColorSpace,Zs as toneMapping,Xs as toneMappingExposure,Ys as toonOutlinePass,Hs as transformDirection,Js as transformNormal,Ks as transformNormalToView,Qs as transformedBentNormalView,$s as transformedBitangentView,el as transformedBitangentWorld,rl as transformedClearcoatNormalView,tl as transformedNormalView,al as transformedNormalWorld,ol as transformedTangentView,il as transformedTangentWorld,nl as transmission,sl as transpose,ll as tri,cl as tri3,ml as triNoise3D,pl as triplanarTexture,dl as triplanarTextures,ul as trunc,gl as tslFn,hl as uint,fl as uniform,xl as uniformArray,bl as uniformGroup,wl as uniforms,vl as userData,Sl as uv,Tl as uvec2,_l as uvec3,Vl as uvec4,Dl as varying,Ml as varyingProperty,Fl as vec2,Cl as vec3,Il as vec4,Pl as vectorComponents,Rl as velocity,Nl as vertexColor,Bl as vertexIndex,Ll as vibrance,kl as viewZToLogarithmicDepth,Al as viewZToOrthographicDepth,Gl as viewZToPerspectiveDepth,Ol as viewport,Wl as viewportBottomLeft,jl as viewportCoordinate,Ul as viewportDepthTexture,zl as viewportLinearDepth,ql as viewportMipTexture,El as viewportResolution,Zl as viewportSafeUV,Xl as viewportSharedTexture,Yl as viewportSize,Hl as viewportTexture,Jl as viewportTopLeft,Kl as viewportUV,Ql as wgsl,$l as wgslFn,ec as workgroupArray,rc as workgroupBarrier,tc as workgroupId,ac as workingToColorSpace,oc as xor};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
