/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */
import{Color as e,Vector2 as t,Vector3 as r,Vector4 as s,Matrix2 as i,Matrix3 as n,Matrix4 as o,EventDispatcher as a,MathUtils as u,WebGLCoordinateSystem as l,WebGPUCoordinateSystem as d,ColorManagement as c,SRGBTransfer as h,NoToneMapping as p,StaticDrawUsage as g,InterleavedBuffer as m,InterleavedBufferAttribute as f,DynamicDrawUsage as y,NoColorSpace as x,UnsignedIntType as b,IntType as T,NearestFilter as _,Sphere as v,BackSide as N,Euler as S,CubeReflectionMapping as E,CubeRefractionMapping as w,TangentSpaceNormalMap as A,ObjectSpaceNormalMap as R,InstancedInterleavedBuffer as C,InstancedBufferAttribute as M,DataArrayTexture as F,FloatType as B,FramebufferTexture as P,LinearMipmapLinearFilter as I,DepthTexture as L,Material as D,NormalBlending as V,LineBasicMaterial as U,LineDashedMaterial as O,NoBlending as G,MeshNormalMaterial as k,SRGBColorSpace as z,WebGLCubeRenderTarget as W,BoxGeometry as $,Mesh as H,Scene as j,LinearFilter as q,CubeCamera as X,CubeTexture as K,EquirectangularReflectionMapping as Y,EquirectangularRefractionMapping as Q,AddOperation as Z,MixOperation as J,MultiplyOperation as ee,MeshBasicMaterial as te,MeshLambertMaterial as re,MeshPhongMaterial as se,OrthographicCamera as ie,PerspectiveCamera as ne,RenderTarget as oe,CubeUVReflectionMapping as ae,BufferGeometry as ue,BufferAttribute as le,LinearSRGBColorSpace as de,RGBAFormat as ce,HalfFloatType as he,Texture as pe,MeshStandardMaterial as ge,MeshPhysicalMaterial as me,MeshToonMaterial as fe,MeshMatcapMaterial as ye,SpriteMaterial as xe,PointsMaterial as be,ShadowMaterial as Te,Uint32BufferAttribute as _e,Uint16BufferAttribute as ve,arrayNeedsUint32 as Ne,DoubleSide as Se,Camera as Ee,DepthStencilFormat as we,DepthFormat as Ae,UnsignedInt248Type as Re,UnsignedByteType as Ce,Plane as Me,Object3D as Fe,LinearMipMapLinearFilter as Be,Float32BufferAttribute as Pe,UVMapping as Ie,LessCompare as Le,VSMShadowMap as De,RGFormat as Ve,BasicShadowMap as Ue,SphereGeometry as Oe,LinearMipmapNearestFilter as Ge,NearestMipmapLinearFilter as ke,Float16BufferAttribute as ze,REVISION as We,ArrayCamera as $e,PlaneGeometry as He,FrontSide as je,CustomBlending as qe,AddEquation as Xe,ZeroFactor as Ke,CylinderGeometry as Ye,Quaternion as Qe,WebXRController as Ze,RAD2DEG as Je,PCFShadowMap as et,Frustum as tt,DataTexture as rt,RedIntegerFormat as st,RedFormat as it,ShortType as nt,ByteType as ot,UnsignedShortType as at,RGIntegerFormat as ut,RGBIntegerFormat as lt,RGBFormat as dt,RGBAIntegerFormat as ct,warnOnce as ht,createCanvasElement as pt,ReverseSubtractEquation as gt,SubtractEquation as mt,OneMinusDstAlphaFactor as ft,OneMinusDstColorFactor as yt,OneMinusSrcAlphaFactor as xt,OneMinusSrcColorFactor as bt,DstAlphaFactor as Tt,DstColorFactor as _t,SrcAlphaSaturateFactor as vt,SrcAlphaFactor as Nt,SrcColorFactor as St,OneFactor as Et,CullFaceNone as wt,CullFaceBack as At,CullFaceFront as Rt,MultiplyBlending as Ct,SubtractiveBlending as Mt,AdditiveBlending as Ft,NotEqualDepth as Bt,GreaterDepth as Pt,GreaterEqualDepth as It,EqualDepth as Lt,LessEqualDepth as Dt,LessDepth as Vt,AlwaysDepth as Ut,NeverDepth as Ot,UnsignedShort4444Type as Gt,UnsignedShort5551Type as kt,UnsignedInt5999Type as zt,AlphaFormat as Wt,LuminanceFormat as $t,LuminanceAlphaFormat as Ht,RGB_S3TC_DXT1_Format as jt,RGBA_S3TC_DXT1_Format as qt,RGBA_S3TC_DXT3_Format as Xt,RGBA_S3TC_DXT5_Format as Kt,RGB_PVRTC_4BPPV1_Format as Yt,RGB_PVRTC_2BPPV1_Format as Qt,RGBA_PVRTC_4BPPV1_Format as Zt,RGBA_PVRTC_2BPPV1_Format as Jt,RGB_ETC1_Format as er,RGB_ETC2_Format as tr,RGBA_ETC2_EAC_Format as rr,RGBA_ASTC_4x4_Format as sr,RGBA_ASTC_5x4_Format as ir,RGBA_ASTC_5x5_Format as nr,RGBA_ASTC_6x5_Format as or,RGBA_ASTC_6x6_Format as ar,RGBA_ASTC_8x5_Format as ur,RGBA_ASTC_8x6_Format as lr,RGBA_ASTC_8x8_Format as dr,RGBA_ASTC_10x5_Format as cr,RGBA_ASTC_10x6_Format as hr,RGBA_ASTC_10x8_Format as pr,RGBA_ASTC_10x10_Format as gr,RGBA_ASTC_12x10_Format as mr,RGBA_ASTC_12x12_Format as fr,RGBA_BPTC_Format as yr,RED_RGTC1_Format as xr,SIGNED_RED_RGTC1_Format as br,RED_GREEN_RGTC2_Format as Tr,SIGNED_RED_GREEN_RGTC2_Format as _r,MirroredRepeatWrapping as vr,ClampToEdgeWrapping as Nr,RepeatWrapping as Sr,NearestMipmapNearestFilter as Er,NotEqualCompare as wr,GreaterCompare as Ar,GreaterEqualCompare as Rr,EqualCompare as Cr,LessEqualCompare as Mr,AlwaysCompare as Fr,NeverCompare as Br,NotEqualStencilFunc as Pr,GreaterStencilFunc as Ir,GreaterEqualStencilFunc as Lr,EqualStencilFunc as Dr,LessEqualStencilFunc as Vr,LessStencilFunc as Ur,AlwaysStencilFunc as Or,NeverStencilFunc as Gr,DecrementWrapStencilOp as kr,IncrementWrapStencilOp as zr,DecrementStencilOp as Wr,IncrementStencilOp as $r,InvertStencilOp as Hr,ReplaceStencilOp as jr,ZeroStencilOp as qr,KeepStencilOp as Xr,MaxEquation as Kr,MinEquation as Yr,SpotLight as Qr,PointLight as Zr,DirectionalLight as Jr,RectAreaLight as es,AmbientLight as ts,HemisphereLight as rs,LightProbe as ss,LinearToneMapping as is,ReinhardToneMapping as ns,CineonToneMapping as os,ACESFilmicToneMapping as as,AgXToneMapping as us,NeutralToneMapping as ls,Group as ds,Loader as cs,FileLoader as hs,MaterialLoader as ps,ObjectLoader as gs}from"./three.core.min.js";export{AdditiveAnimationBlendMode,AnimationAction,AnimationClip,AnimationLoader,AnimationMixer,AnimationObjectGroup,AnimationUtils,ArcCurve,ArrowHelper,AttachedBindMode,Audio,AudioAnalyser,AudioContext,AudioListener,AudioLoader,AxesHelper,BasicDepthPacking,BatchedMesh,Bone,BooleanKeyframeTrack,Box2,Box3,Box3Helper,BoxHelper,BufferGeometryLoader,Cache,CameraHelper,CanvasTexture,CapsuleGeometry,CatmullRomCurve3,CircleGeometry,Clock,ColorKeyframeTrack,CompressedArrayTexture,CompressedCubeTexture,CompressedTexture,CompressedTextureLoader,ConeGeometry,ConstantAlphaFactor,ConstantColorFactor,Controls,CubeTextureLoader,CubicBezierCurve,CubicBezierCurve3,CubicInterpolant,CullFaceFrontBack,Curve,CurvePath,CustomToneMapping,Cylindrical,Data3DTexture,DataTextureLoader,DataUtils,DefaultLoadingManager,DetachedBindMode,DirectionalLightHelper,DiscreteInterpolant,DodecahedronGeometry,DynamicCopyUsage,DynamicReadUsage,EdgesGeometry,EllipseCurve,ExtrudeGeometry,Fog,FogExp2,GLBufferAttribute,GLSL1,GLSL3,GridHelper,HemisphereLightHelper,IcosahedronGeometry,ImageBitmapLoader,ImageLoader,ImageUtils,InstancedBufferGeometry,InstancedMesh,Int16BufferAttribute,Int32BufferAttribute,Int8BufferAttribute,Interpolant,InterpolateDiscrete,InterpolateLinear,InterpolateSmooth,KeyframeTrack,LOD,LatheGeometry,Layers,Light,Line,Line3,LineCurve,LineCurve3,LineLoop,LineSegments,LinearInterpolant,LinearMipMapNearestFilter,LinearTransfer,LoaderUtils,LoadingManager,LoopOnce,LoopPingPong,LoopRepeat,MOUSE,MeshDepthMaterial,MeshDistanceMaterial,NearestMipMapLinearFilter,NearestMipMapNearestFilter,NormalAnimationBlendMode,NumberKeyframeTrack,OctahedronGeometry,OneMinusConstantAlphaFactor,OneMinusConstantColorFactor,PCFSoftShadowMap,Path,PlaneHelper,PointLightHelper,Points,PolarGridHelper,PolyhedronGeometry,PositionalAudio,PropertyBinding,PropertyMixer,QuadraticBezierCurve,QuadraticBezierCurve3,QuaternionKeyframeTrack,QuaternionLinearInterpolant,RGBADepthPacking,RGBDepthPacking,RGB_BPTC_SIGNED_Format,RGB_BPTC_UNSIGNED_Format,RGDepthPacking,RawShaderMaterial,Ray,Raycaster,RenderTarget3D,RenderTargetArray,RingGeometry,ShaderMaterial,Shape,ShapeGeometry,ShapePath,ShapeUtils,Skeleton,SkeletonHelper,SkinnedMesh,Source,Spherical,SphericalHarmonics3,SplineCurve,SpotLightHelper,Sprite,StaticCopyUsage,StaticReadUsage,StereoCamera,StreamCopyUsage,StreamDrawUsage,StreamReadUsage,StringKeyframeTrack,TOUCH,TetrahedronGeometry,TextureLoader,TextureUtils,TimestampQuery,TorusGeometry,TorusKnotGeometry,Triangle,TriangleFanDrawMode,TriangleStripDrawMode,TrianglesDrawMode,TubeGeometry,Uint8BufferAttribute,Uint8ClampedBufferAttribute,Uniform,UniformsGroup,VectorKeyframeTrack,VideoFrameTexture,VideoTexture,WebGL3DRenderTarget,WebGLArrayRenderTarget,WebGLRenderTarget,WireframeGeometry,WrapAroundEnding,ZeroCurvatureEnding,ZeroSlopeEnding}from"./three.core.min.js";const ms=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class fs{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=ms,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:s,object:i}=e;if(t={material:this.getMaterialData(s),geometry:{id:r.id,attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:i.matrixWorld.clone()},i.center&&(t.center=i.center.clone()),i.morphTargetInfluences&&(t.morphTargetInfluences=i.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:s}=e.context;t.bufferWidth=r,t.bufferHeight=s}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const s=e[r];t[r]={version:s.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const s=e[r];null!=s&&("object"==typeof s&&void 0!==s.clone?!0===s.isTexture?t[r]={id:s.id,version:s.version}:t[r]=s.clone():t[r]=s)}return t}equals(e){const{object:t,material:r,geometry:s}=e,i=this.getRenderObjectData(e);if(!0!==i.worldMatrix.equals(t.matrixWorld))return i.worldMatrix.copy(t.matrixWorld),!1;const n=i.material;for(const e in n){const t=n[e],s=r[e];if(void 0!==t.equals){if(!1===t.equals(s))return t.copy(s),!1}else if(!0===s.isTexture){if(t.id!==s.id||t.version!==s.version)return t.id=s.id,t.version=s.version,!1}else if(t!==s)return n[e]=s,!1}if(n.transmission>0){const{width:t,height:r}=e.context;if(i.bufferWidth!==t||i.bufferHeight!==r)return i.bufferWidth=t,i.bufferHeight=r,!1}const o=i.geometry,a=s.attributes,u=o.attributes,l=Object.keys(u),d=Object.keys(a);if(o.id!==s.id)return o.id=s.id,!1;if(l.length!==d.length)return i.geometry.attributes=this.getAttributesData(a),!1;for(const e of l){const t=u[e],r=a[e];if(void 0===r)return delete u[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const c=s.index,h=o.indexVersion,p=c?c.version:null;if(h!==p)return o.indexVersion=p,!1;if(o.drawRange.start!==s.drawRange.start||o.drawRange.count!==s.drawRange.count)return o.drawRange.start=s.drawRange.start,o.drawRange.count=s.drawRange.count,!1;if(i.morphTargetInfluences){let e=!1;for(let r=0;r<i.morphTargetInfluences.length;r++)i.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return i.center&&!1===i.center.equals(t.center)?(i.center.copy(t.center),!0):(null!==e.bundle&&(i.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const s=!0===e.object.static,i=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(s||i)return!1;return!0!==this.equals(e)}}function ys(e,t=0){let r=3735928559^t,s=1103547991^t;if(e instanceof Array)for(let t,i=0;i<e.length;i++)t=e[i],r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);else for(let t,i=0;i<e.length;i++)t=e.charCodeAt(i),r=Math.imul(r^t,2654435761),s=Math.imul(s^t,1597334677);return r=Math.imul(r^r>>>16,2246822507),r^=Math.imul(s^s>>>13,3266489909),s=Math.imul(s^s>>>16,2246822507),s^=Math.imul(r^r>>>13,3266489909),4294967296*(2097151&s)+(r>>>0)}const xs=e=>ys(e),bs=e=>ys(e),Ts=(...e)=>ys(e);function _s(e,t=!1){const r=[];!0===e.isNode&&(r.push(e.id),e=e.getSelf());for(const{property:s,childNode:i}of vs(e))r.push(ys(s.slice(0,-4)),i.getCacheKey(t));return ys(r)}function*vs(e,t=!1){for(const r in e){if(!0===r.startsWith("_"))continue;const s=e[r];if(!0===Array.isArray(s))for(let e=0;e<s.length;e++){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}else if(s&&!0===s.isNode)yield{property:r,childNode:s};else if("object"==typeof s)for(const e in s){const i=s[e];i&&(!0===i.isNode||t&&"function"==typeof i.toJSON)&&(yield{property:r,index:e,childNode:i})}}}const Ns=new Map([[1,"float"],[2,"vec2"],[3,"vec3"],[4,"vec4"],[9,"mat3"],[16,"mat4"]]),Ss=new WeakMap;function Es(e){return Ns.get(e)}function ws(e){if(/[iu]?vec\d/.test(e))return e.startsWith("ivec")?Int32Array:e.startsWith("uvec")?Uint32Array:Float32Array;if(/mat\d/.test(e))return Float32Array;if(/float/.test(e))return Float32Array;if(/uint/.test(e))return Uint32Array;if(/int/.test(e))return Int32Array;throw new Error(`THREE.NodeUtils: Unsupported type: ${e}`)}function As(e){return/float|int|uint/.test(e)?1:/vec2/.test(e)?2:/vec3/.test(e)?3:/vec4/.test(e)||/mat2/.test(e)?4:/mat3/.test(e)?9:/mat4/.test(e)?16:void console.error("THREE.TSL: Unsupported type:",e)}function Rs(e){if(null==e)return null;const t=typeof e;return!0===e.isNode?"node":"number"===t?"float":"boolean"===t?"bool":"string"===t?"string":"function"===t?"shader":!0===e.isVector2?"vec2":!0===e.isVector3?"vec3":!0===e.isVector4?"vec4":!0===e.isMatrix2?"mat2":!0===e.isMatrix3?"mat3":!0===e.isMatrix4?"mat4":!0===e.isColor?"color":e instanceof ArrayBuffer?"ArrayBuffer":null}function Cs(a,...u){const l=a?a.slice(-4):void 0;return 1===u.length&&("vec2"===l?u=[u[0],u[0]]:"vec3"===l?u=[u[0],u[0],u[0]]:"vec4"===l&&(u=[u[0],u[0],u[0],u[0]])),"color"===a?new e(...u):"vec2"===l?new t(...u):"vec3"===l?new r(...u):"vec4"===l?new s(...u):"mat2"===l?new i(...u):"mat3"===l?new n(...u):"mat4"===l?new o(...u):"bool"===a?u[0]||!1:"float"===a||"int"===a||"uint"===a?u[0]||0:"string"===a?u[0]||"":"ArrayBuffer"===a?Bs(u[0]):null}function Ms(e){let t=Ss.get(e);return void 0===t&&(t={},Ss.set(e,t)),t}function Fs(e){let t="";const r=new Uint8Array(e);for(let e=0;e<r.length;e++)t+=String.fromCharCode(r[e]);return btoa(t)}function Bs(e){return Uint8Array.from(atob(e),(e=>e.charCodeAt(0))).buffer}var Ps=Object.freeze({__proto__:null,arrayBufferToBase64:Fs,base64ToArrayBuffer:Bs,getCacheKey:_s,getDataFromObject:Ms,getLengthFromType:As,getNodeChildren:vs,getTypeFromLength:Es,getTypedArrayFromType:ws,getValueFromType:Cs,getValueType:Rs,hash:Ts,hashArray:bs,hashString:xs});const Is={VERTEX:"vertex",FRAGMENT:"fragment"},Ls={NONE:"none",FRAME:"frame",RENDER:"render",OBJECT:"object"},Ds={BOOLEAN:"bool",INTEGER:"int",FLOAT:"float",VECTOR2:"vec2",VECTOR3:"vec3",VECTOR4:"vec4",MATRIX2:"mat2",MATRIX3:"mat3",MATRIX4:"mat4"},Vs={READ_ONLY:"readOnly",WRITE_ONLY:"writeOnly",READ_WRITE:"readWrite"},Us=["fragment","vertex"],Os=["setup","analyze","generate"],Gs=[...Us,"compute"],ks=["x","y","z","w"];let zs=0;class Ws extends a{static get type(){return"Node"}constructor(e=null){super(),this.nodeType=e,this.updateType=Ls.NONE,this.updateBeforeType=Ls.NONE,this.updateAfterType=Ls.NONE,this.uuid=u.generateUUID(),this.version=0,this.global=!1,this.isNode=!0,this._cacheKey=null,this._cacheKeyVersion=0,Object.defineProperty(this,"id",{value:zs++})}set needsUpdate(e){!0===e&&this.version++}get type(){return this.constructor.type}onUpdate(e,t){return this.updateType=t,this.update=e.bind(this.getSelf()),this}onFrameUpdate(e){return this.onUpdate(e,Ls.FRAME)}onRenderUpdate(e){return this.onUpdate(e,Ls.RENDER)}onObjectUpdate(e){return this.onUpdate(e,Ls.OBJECT)}onReference(e){return this.updateReference=e.bind(this.getSelf()),this}getSelf(){return this.self||this}updateReference(){return this}isGlobal(){return this.global}*getChildren(){for(const{childNode:e}of vs(this))yield e}dispose(){this.dispatchEvent({type:"dispose"})}traverse(e){e(this);for(const t of this.getChildren())t.traverse(e)}getCacheKey(e=!1){return!0!==(e=e||this.version!==this._cacheKeyVersion)&&null!==this._cacheKey||(this._cacheKey=Ts(_s(this,e),this.customCacheKey()),this._cacheKeyVersion=this.version),this._cacheKey}customCacheKey(){return 0}getScope(){return this}getHash(){return this.uuid}getUpdateType(){return this.updateType}getUpdateBeforeType(){return this.updateBeforeType}getUpdateAfterType(){return this.updateAfterType}getElementType(e){const t=this.getNodeType(e);return e.getElementType(t)}getMemberType(){return"void"}getNodeType(e){const t=e.getNodeProperties(this);return t.outputNode?t.outputNode.getNodeType(e):this.nodeType}getShared(e){const t=this.getHash(e);return e.getNodeFromHash(t)||this}setup(e){const t=e.getNodeProperties(this);let r=0;for(const e of this.getChildren())t["node"+r++]=e;return t.outputNode||null}analyze(e){if(1===e.increaseUsage(this)){const t=e.getNodeProperties(this);for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e)}}generate(e,t){const{outputNode:r}=e.getNodeProperties(this);if(r&&!0===r.isNode)return r.build(e,t)}updateBefore(){console.warn("Abstract function.")}updateAfter(){console.warn("Abstract function.")}update(){console.warn("Abstract function.")}build(e,t=null){const r=this.getShared(e);if(this!==r)return r.build(e,t);e.addNode(this),e.addChain(this);let s=null;const i=e.getBuildStage();if("setup"===i){this.updateReference(e);const t=e.getNodeProperties(this);if(!0!==t.initialized){t.initialized=!0;const r=this.setup(e),s=r&&!0===r.isNode;for(const r of Object.values(t))r&&!0===r.isNode&&r.build(e);s&&r.build(e),t.outputNode=r}}else if("analyze"===i)this.analyze(e);else if("generate"===i){if(1===this.generate.length){const r=this.getNodeType(e),i=e.getDataFromNode(this);s=i.snippet,void 0===s?(s=this.generate(e)||"",i.snippet=s):void 0!==i.flowCodes&&void 0!==e.context.nodeBlock&&e.addFlowCodeHierarchy(this,e.context.nodeBlock),s=e.format(s,r,t)}else s=this.generate(e,t)||""}return e.removeChain(this),e.addSequentialNode(this),s}getSerializeChildren(){return vs(this)}serialize(e){const t=this.getSerializeChildren(),r={};for(const{property:s,index:i,childNode:n}of t)void 0!==i?(void 0===r[s]&&(r[s]=Number.isInteger(i)?[]:{}),r[s][i]=n.toJSON(e.meta).uuid):r[s]=n.toJSON(e.meta).uuid;Object.keys(r).length>0&&(e.inputNodes=r)}deserialize(e){if(void 0!==e.inputNodes){const t=e.meta.nodes;for(const r in e.inputNodes)if(Array.isArray(e.inputNodes[r])){const s=[];for(const i of e.inputNodes[r])s.push(t[i]);this[r]=s}else if("object"==typeof e.inputNodes[r]){const s={};for(const i in e.inputNodes[r]){const n=e.inputNodes[r][i];s[i]=t[n]}this[r]=s}else{const s=e.inputNodes[r];this[r]=t[s]}}}toJSON(e){const{uuid:t,type:r}=this,s=void 0===e||"string"==typeof e;s&&(e={textures:{},images:{},nodes:{}});let i=e.nodes[t];function n(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(void 0===i&&(i={uuid:t,type:r,meta:e,metadata:{version:4.6,type:"Node",generator:"Node.toJSON"}},!0!==s&&(e.nodes[i.uuid]=i),this.serialize(i),delete i.meta),s){const t=n(e.textures),r=n(e.images),s=n(e.nodes);t.length>0&&(i.textures=t),r.length>0&&(i.images=r),s.length>0&&(i.nodes=s)}return i}}class $s extends Ws{static get type(){return"ArrayElementNode"}constructor(e,t){super(),this.node=e,this.indexNode=t,this.isArrayElementNode=!0}getNodeType(e){return this.node.getElementType(e)}generate(e){return`${this.node.build(e)}[ ${this.indexNode.build(e,"uint")} ]`}}class Hs extends Ws{static get type(){return"ConvertNode"}constructor(e,t){super(),this.node=e,this.convertTo=t}getNodeType(e){const t=this.node.getNodeType(e);let r=null;for(const s of this.convertTo.split("|"))null!==r&&e.getTypeLength(t)!==e.getTypeLength(s)||(r=s);return r}serialize(e){super.serialize(e),e.convertTo=this.convertTo}deserialize(e){super.deserialize(e),this.convertTo=e.convertTo}generate(e,t){const r=this.node,s=this.getNodeType(e),i=r.build(e,s);return e.format(i,s,t)}}class js extends Ws{static get type(){return"TempNode"}constructor(e=null){super(e),this.isTempNode=!0}hasDependencies(e){return e.getDataFromNode(this).usageCount>1}build(e,t){if("generate"===e.getBuildStage()){const r=e.getVectorType(this.getNodeType(e,t)),s=e.getDataFromNode(this);if(void 0!==s.propertyName)return e.format(s.propertyName,r,t);if("void"!==r&&"void"!==t&&this.hasDependencies(e)){const i=super.build(e,r),n=e.getVarFromNode(this,null,r),o=e.getPropertyName(n);return e.addLineFlowCode(`${o} = ${i}`,this),s.snippet=i,s.propertyName=o,e.format(s.propertyName,r,t)}}return super.build(e,t)}}class qs extends js{static get type(){return"JoinNode"}constructor(e=[],t=null){super(t),this.nodes=e}getNodeType(e){return null!==this.nodeType?e.getVectorType(this.nodeType):e.getTypeFromLength(this.nodes.reduce(((t,r)=>t+e.getTypeLength(r.getNodeType(e))),0))}generate(e,t){const r=this.getNodeType(e),s=this.nodes,i=e.getComponentType(r),n=[];for(const t of s){let r=t.build(e);const s=e.getComponentType(t.getNodeType(e));s!==i&&(r=e.format(r,s,i)),n.push(r)}const o=`${e.getType(r)}( ${n.join(", ")} )`;return e.format(o,r,t)}}const Xs=ks.join("");class Ks extends Ws{static get type(){return"SplitNode"}constructor(e,t="x"){super(),this.node=e,this.components=t,this.isSplitNode=!0}getVectorLength(){let e=this.components.length;for(const t of this.components)e=Math.max(ks.indexOf(t)+1,e);return e}getComponentType(e){return e.getComponentType(this.node.getNodeType(e))}getNodeType(e){return e.getTypeFromLength(this.components.length,this.getComponentType(e))}generate(e,t){const r=this.node,s=e.getTypeLength(r.getNodeType(e));let i=null;if(s>1){let n=null;this.getVectorLength()>=s&&(n=e.getTypeFromLength(this.getVectorLength(),this.getComponentType(e)));const o=r.build(e,n);i=this.components.length===s&&this.components===Xs.slice(0,this.components.length)?e.format(o,n,t):e.format(`${o}.${this.components}`,this.getNodeType(e),t)}else i=r.build(e,t);return i}serialize(e){super.serialize(e),e.components=this.components}deserialize(e){super.deserialize(e),this.components=e.components}}class Ys extends js{static get type(){return"SetNode"}constructor(e,t,r){super(),this.sourceNode=e,this.components=t,this.targetNode=r}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{sourceNode:t,components:r,targetNode:s}=this,i=this.getNodeType(e),n=e.getComponentType(s.getNodeType(e)),o=e.getTypeFromLength(r.length,n),a=s.build(e,o),u=t.build(e,i),l=e.getTypeLength(i),d=[];for(let e=0;e<l;e++){const t=ks[e];t===r[0]?(d.push(a),e+=r.length-1):d.push(u+"."+t)}return`${e.getType(i)}( ${d.join(", ")} )`}}class Qs extends js{static get type(){return"FlipNode"}constructor(e,t){super(),this.sourceNode=e,this.components=t}getNodeType(e){return this.sourceNode.getNodeType(e)}generate(e){const{components:t,sourceNode:r}=this,s=this.getNodeType(e),i=r.build(e),n=e.getVarFromNode(this),o=e.getPropertyName(n);e.addLineFlowCode(o+" = "+i,this);const a=e.getTypeLength(s),u=[];let l=0;for(let e=0;e<a;e++){const r=ks[e];r===t[l]?(u.push("1.0 - "+o+"."+r),l++):u.push(o+"."+r)}return`${e.getType(s)}( ${u.join(", ")} )`}}class Zs extends Ws{static get type(){return"InputNode"}constructor(e,t=null){super(t),this.isInputNode=!0,this.value=e,this.precision=null}getNodeType(){return null===this.nodeType?Rs(this.value):this.nodeType}getInputType(e){return this.getNodeType(e)}setPrecision(e){return this.precision=e,this}serialize(e){super.serialize(e),e.value=this.value,this.value&&this.value.toArray&&(e.value=this.value.toArray()),e.valueType=Rs(this.value),e.nodeType=this.nodeType,"ArrayBuffer"===e.valueType&&(e.value=Fs(e.value)),e.precision=this.precision}deserialize(e){super.deserialize(e),this.nodeType=e.nodeType,this.value=Array.isArray(e.value)?Cs(e.valueType,...e.value):e.value,this.precision=e.precision||null,this.value&&this.value.fromArray&&(this.value=this.value.fromArray(e.value))}generate(){console.warn("Abstract function.")}}const Js=/float|u?int/;class ei extends Zs{static get type(){return"ConstNode"}constructor(e,t=null){super(e,t),this.isConstNode=!0}generateConst(e){return e.generateConst(this.getNodeType(e),this.value)}generate(e,t){const r=this.getNodeType(e);return Js.test(r)&&Js.test(t)?e.generateConst(t,this.value):e.format(this.generateConst(e),r,t)}}class ti extends Ws{static get type(){return"MemberNode"}constructor(e,t){super(),this.node=e,this.property=t,this.isMemberNode=!0}getNodeType(e){return this.node.getMemberType(e,this.property)}generate(e){return this.node.build(e)+"."+this.property}}let ri=null;const si=new Map;function ii(e,t){if(si.has(e))console.warn(`Redefinition of method chaining ${e}`);else{if("function"!=typeof t)throw new Error(`Node element ${e} is not a function`);si.set(e,t)}}const ni=e=>e.replace(/r|s/g,"x").replace(/g|t/g,"y").replace(/b|p/g,"z").replace(/a|q/g,"w"),oi=e=>ni(e).split("").sort().join(""),ai={setup(e,t){const r=t.shift();return e(Bi(r),...t)},get(e,t,r){if("string"==typeof t&&void 0===e[t]){if(!0!==e.isStackNode&&"assign"===t)return(...e)=>(ri.assign(r,...e),r);if(si.has(t)){const s=si.get(t);return e.isStackNode?(...e)=>r.add(s(...e)):(...e)=>s(r,...e)}if("self"===t)return e;if(t.endsWith("Assign")&&si.has(t.slice(0,t.length-6))){const s=si.get(t.slice(0,t.length-6));return e.isStackNode?(...e)=>r.assign(e[0],s(...e)):(...e)=>r.assign(s(r,...e))}if(!0===/^[xyzwrgbastpq]{1,4}$/.test(t))return t=ni(t),Fi(new Ks(r,t));if(!0===/^set[XYZWRGBASTPQ]{1,4}$/.test(t))return t=oi(t.slice(3).toLowerCase()),r=>Fi(new Ys(e,t,r));if(!0===/^flip[XYZWRGBASTPQ]{1,4}$/.test(t))return t=oi(t.slice(4).toLowerCase()),()=>Fi(new Qs(Fi(e),t));if("width"===t||"height"===t||"depth"===t)return"width"===t?t="x":"height"===t?t="y":"depth"===t&&(t="z"),Fi(new Ks(e,t));if(!0===/^\d+$/.test(t))return Fi(new $s(r,new ei(Number(t),"uint")));if(!0===/^get$/.test(t))return e=>Fi(new ti(r,e))}return Reflect.get(e,t,r)},set:(e,t,r,s)=>"string"!=typeof t||void 0!==e[t]||!0!==/^[xyzwrgbastpq]{1,4}$/.test(t)&&"width"!==t&&"height"!==t&&"depth"!==t&&!0!==/^\d+$/.test(t)?Reflect.set(e,t,r,s):(s[t].assign(r),!0)},ui=new WeakMap,li=new WeakMap,di=function(e,t=null){for(const r in e)e[r]=Fi(e[r],t);return e},ci=function(e,t=null){const r=e.length;for(let s=0;s<r;s++)e[s]=Fi(e[s],t);return e},hi=function(e,t=null,r=null,s=null){const i=e=>Fi(null!==s?Object.assign(e,s):e);return null===t?(...t)=>i(new e(...Pi(t))):null!==r?(r=Fi(r),(...s)=>i(new e(t,...Pi(s),r))):(...r)=>i(new e(t,...Pi(r)))},pi=function(e,...t){return Fi(new e(...Pi(t)))};class gi extends Ws{constructor(e,t){super(),this.shaderNode=e,this.inputNodes=t}getNodeType(e){return this.shaderNode.nodeType||this.getOutputNode(e).getNodeType(e)}getMemberType(e,t){return this.getOutputNode(e).getMemberType(e,t)}call(e){const{shaderNode:t,inputNodes:r}=this,s=e.getNodeProperties(t);if(s.onceOutput)return s.onceOutput;let i=null;if(t.layout){let s=li.get(e.constructor);void 0===s&&(s=new WeakMap,li.set(e.constructor,s));let n=s.get(t);void 0===n&&(n=Fi(e.buildFunctionNode(t)),s.set(t,n)),e.addInclude(n),i=Fi(n.call(r))}else{const s=t.jsFunc,n=null!==r||s.length>1?s(r||[],e):s(e);i=Fi(n)}return t.once&&(s.onceOutput=i),i}getOutputNode(e){const t=e.getNodeProperties(this);return null===t.outputNode&&(t.outputNode=this.setupOutput(e)),t.outputNode}setup(e){return this.getOutputNode(e)}setupOutput(e){return e.addStack(),e.stack.outputNode=this.call(e),e.removeStack()}generate(e,t){return this.getOutputNode(e).build(e,t)}}class mi extends Ws{constructor(e,t){super(t),this.jsFunc=e,this.layout=null,this.global=!0,this.once=!1}setLayout(e){return this.layout=e,this}call(e=null){return Bi(e),Fi(new gi(this,e))}setup(){return this.call()}}const fi=[!1,!0],yi=[0,1,2,3],xi=[-1,-2],bi=[.5,1.5,1/3,1e-6,1e6,Math.PI,2*Math.PI,1/Math.PI,2/Math.PI,1/(2*Math.PI),Math.PI/2],Ti=new Map;for(const e of fi)Ti.set(e,new ei(e));const _i=new Map;for(const e of yi)_i.set(e,new ei(e,"uint"));const vi=new Map([..._i].map((e=>new ei(e.value,"int"))));for(const e of xi)vi.set(e,new ei(e,"int"));const Ni=new Map([...vi].map((e=>new ei(e.value))));for(const e of bi)Ni.set(e,new ei(e));for(const e of bi)Ni.set(-e,new ei(-e));const Si={bool:Ti,uint:_i,ints:vi,float:Ni},Ei=new Map([...Ti,...Ni]),wi=(e,t)=>Ei.has(e)?Ei.get(e):!0===e.isNode?e:new ei(e,t),Ai=function(e,t=null){return(...r)=>{if((0===r.length||!["bool","float","int","uint"].includes(e)&&r.every((e=>"object"!=typeof e)))&&(r=[Cs(e,...r)]),1===r.length&&null!==t&&t.has(r[0]))return Fi(t.get(r[0]));if(1===r.length){const t=wi(r[0],e);return(e=>{try{return e.getNodeType()}catch(e){return}})(t)===e?Fi(t):Fi(new Hs(t,e))}const s=r.map((e=>wi(e)));return Fi(new qs(s,e))}},Ri=e=>"object"==typeof e&&null!==e?e.value:e,Ci=e=>null!=e?e.nodeType||e.convertTo||("string"==typeof e?e:null):null;function Mi(e,t){return new Proxy(new mi(e,t),ai)}const Fi=(e,t=null)=>function(e,t=null){const r=Rs(e);if("node"===r){let t=ui.get(e);return void 0===t&&(t=new Proxy(e,ai),ui.set(e,t),ui.set(t,t)),t}return null===t&&("float"===r||"boolean"===r)||r&&"shader"!==r&&"string"!==r?Fi(wi(e,t)):"shader"===r?Di(e):e}(e,t),Bi=(e,t=null)=>new di(e,t),Pi=(e,t=null)=>new ci(e,t),Ii=(...e)=>new hi(...e),Li=(...e)=>new pi(...e),Di=(e,t)=>{const r=new Mi(e,t),s=(...e)=>{let t;return Bi(e),t=e[0]&&e[0].isNode?[...e]:e[0],r.call(t)};return s.shaderNode=r,s.setLayout=e=>(r.setLayout(e),s),s.once=()=>(r.once=!0,s),s};ii("toGlobal",(e=>(e.global=!0,e)));const Vi=e=>{ri=e},Ui=()=>ri,Oi=(...e)=>ri.If(...e);function Gi(e){return ri&&ri.add(e),e}ii("append",Gi);const ki=new Ai("color"),zi=new Ai("float",Si.float),Wi=new Ai("int",Si.ints),$i=new Ai("uint",Si.uint),Hi=new Ai("bool",Si.bool),ji=new Ai("vec2"),qi=new Ai("ivec2"),Xi=new Ai("uvec2"),Ki=new Ai("bvec2"),Yi=new Ai("vec3"),Qi=new Ai("ivec3"),Zi=new Ai("uvec3"),Ji=new Ai("bvec3"),en=new Ai("vec4"),tn=new Ai("ivec4"),rn=new Ai("uvec4"),sn=new Ai("bvec4"),nn=new Ai("mat2"),on=new Ai("mat3"),an=new Ai("mat4");ii("toColor",ki),ii("toFloat",zi),ii("toInt",Wi),ii("toUint",$i),ii("toBool",Hi),ii("toVec2",ji),ii("toIVec2",qi),ii("toUVec2",Xi),ii("toBVec2",Ki),ii("toVec3",Yi),ii("toIVec3",Qi),ii("toUVec3",Zi),ii("toBVec3",Ji),ii("toVec4",en),ii("toIVec4",tn),ii("toUVec4",rn),ii("toBVec4",sn),ii("toMat2",nn),ii("toMat3",on),ii("toMat4",an);const un=Ii($s),ln=(e,t)=>Fi(new Hs(Fi(e),t));ii("element",un),ii("convert",ln);class dn extends js{static get type(){return"ArrayNode"}constructor(e,t,r=null){super(e),this.count=t,this.values=r,this.isArrayNode=!0}getNodeType(e){return null===this.nodeType&&(this.nodeType=this.values[0].getNodeType(e)),this.nodeType}getElementType(e){return this.getNodeType(e)}generate(e){const t=this.getNodeType(e);return e.generateArray(t,this.count,this.values)}}const cn=(...e)=>{let t;if(1===e.length){const r=e[0];t=new dn(null,r.length,r)}else{const r=e[0],s=e[1];t=new dn(r,s)}return Fi(t)};ii("toArray",((e,t)=>cn(Array(t).fill(e))));class hn extends Ws{static get type(){return"UniformGroupNode"}constructor(e,t=!1,r=1){super("string"),this.name=e,this.shared=t,this.order=r,this.isUniformGroup=!0}serialize(e){super.serialize(e),e.name=this.name,e.version=this.version,e.shared=this.shared}deserialize(e){super.deserialize(e),this.name=e.name,this.version=e.version,this.shared=e.shared}}const pn=e=>new hn(e),gn=(e,t=0)=>new hn(e,!0,t),mn=gn("frame"),fn=gn("render"),yn=pn("object");class xn extends Zs{static get type(){return"UniformNode"}constructor(e,t=null){super(e,t),this.isUniformNode=!0,this.name="",this.groupNode=yn}label(e){return this.name=e,this}setGroup(e){return this.groupNode=e,this}getGroup(){return this.groupNode}getUniformHash(e){return this.getHash(e)}onUpdate(e,t){const r=this.getSelf();return e=e.bind(r),super.onUpdate((t=>{const s=e(t,r);void 0!==s&&(this.value=s)}),t)}generate(e,t){const r=this.getNodeType(e),s=this.getUniformHash(e);let i=e.getNodeFromHash(s);void 0===i&&(e.setHashNode(this,s),i=this);const n=i.getInputType(e),o=e.getUniformFromNode(i,n,e.shaderStage,this.name||e.context.label),a=e.getPropertyName(o);return void 0!==e.context.label&&delete e.context.label,e.format(a,r,t)}}const bn=(e,t)=>{const r=Ci(t||e),s=e&&!0===e.isNode?e.node&&e.node.value||e.value:e;return Fi(new xn(s,r))};class Tn extends Ws{static get type(){return"PropertyNode"}constructor(e,t=null,r=!1){super(e),this.name=t,this.varying=r,this.isPropertyNode=!0}getHash(e){return this.name||super.getHash(e)}isGlobal(){return!0}generate(e){let t;return!0===this.varying?(t=e.getVaryingFromNode(this,this.name),t.needsInterpolation=!0):t=e.getVarFromNode(this,this.name),e.getPropertyName(t)}}const _n=(e,t)=>Fi(new Tn(e,t)),vn=(e,t)=>Fi(new Tn(e,t,!0)),Nn=Li(Tn,"vec4","DiffuseColor"),Sn=Li(Tn,"vec3","EmissiveColor"),En=Li(Tn,"float","Roughness"),wn=Li(Tn,"float","Metalness"),An=Li(Tn,"float","Clearcoat"),Rn=Li(Tn,"float","ClearcoatRoughness"),Cn=Li(Tn,"vec3","Sheen"),Mn=Li(Tn,"float","SheenRoughness"),Fn=Li(Tn,"float","Iridescence"),Bn=Li(Tn,"float","IridescenceIOR"),Pn=Li(Tn,"float","IridescenceThickness"),In=Li(Tn,"float","AlphaT"),Ln=Li(Tn,"float","Anisotropy"),Dn=Li(Tn,"vec3","AnisotropyT"),Vn=Li(Tn,"vec3","AnisotropyB"),Un=Li(Tn,"color","SpecularColor"),On=Li(Tn,"float","SpecularF90"),Gn=Li(Tn,"float","Shininess"),kn=Li(Tn,"vec4","Output"),zn=Li(Tn,"float","dashSize"),Wn=Li(Tn,"float","gapSize"),$n=Li(Tn,"float","pointWidth"),Hn=Li(Tn,"float","IOR"),jn=Li(Tn,"float","Transmission"),qn=Li(Tn,"float","Thickness"),Xn=Li(Tn,"float","AttenuationDistance"),Kn=Li(Tn,"color","AttenuationColor"),Yn=Li(Tn,"float","Dispersion");class Qn extends js{static get type(){return"AssignNode"}constructor(e,t){super(),this.targetNode=e,this.sourceNode=t}hasDependencies(){return!1}getNodeType(e,t){return"void"!==t?this.targetNode.getNodeType(e):"void"}needsSplitAssign(e){const{targetNode:t}=this;if(!1===e.isAvailable("swizzleAssign")&&t.isSplitNode&&t.components.length>1){const r=e.getTypeLength(t.node.getNodeType(e));return ks.join("").slice(0,r)!==t.components}return!1}generate(e,t){const{targetNode:r,sourceNode:s}=this,i=this.needsSplitAssign(e),n=r.getNodeType(e),o=r.context({assign:!0}).build(e),a=s.build(e,n),u=s.getNodeType(e),l=e.getDataFromNode(this);let d;if(!0===l.initialized)"void"!==t&&(d=o);else if(i){const s=e.getVarFromNode(this,null,n),i=e.getPropertyName(s);e.addLineFlowCode(`${i} = ${a}`,this);const u=r.node.context({assign:!0}).build(e);for(let t=0;t<r.components.length;t++){const s=r.components[t];e.addLineFlowCode(`${u}.${s} = ${i}[ ${t} ]`,this)}"void"!==t&&(d=o)}else d=`${o} = ${a}`,"void"!==t&&"void"!==u||(e.addLineFlowCode(d,this),"void"!==t&&(d=o));return l.initialized=!0,e.format(d,n,t)}}const Zn=Ii(Qn);ii("assign",Zn);class Jn extends js{static get type(){return"FunctionCallNode"}constructor(e=null,t={}){super(),this.functionNode=e,this.parameters=t}setParameters(e){return this.parameters=e,this}getParameters(){return this.parameters}getNodeType(e){return this.functionNode.getNodeType(e)}generate(e){const t=[],r=this.functionNode,s=r.getInputs(e),i=this.parameters,n=(t,r)=>{const s=r.type;let i;return i="pointer"===s?"&"+t.build(e):t.build(e,s),i};if(Array.isArray(i))for(let e=0;e<i.length;e++)t.push(n(i[e],s[e]));else for(const e of s){const r=i[e.name];if(void 0===r)throw new Error(`FunctionCallNode: Input '${e.name}' not found in FunctionNode.`);t.push(n(r,e))}return`${r.build(e,"property")}( ${t.join(", ")} )`}}const eo=(e,...t)=>(t=t.length>1||t[0]&&!0===t[0].isNode?Pi(t):Bi(t[0]),Fi(new Jn(Fi(e),t)));ii("call",eo);class to extends js{static get type(){return"OperatorNode"}constructor(e,t,r,...s){if(super(),s.length>0){let i=new to(e,t,r);for(let t=0;t<s.length-1;t++)i=new to(e,i,s[t]);t=i,r=s[s.length-1]}this.op=e,this.aNode=t,this.bNode=r,this.isOperatorNode=!0}getNodeType(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=s.getNodeType(e),o=void 0!==i?i.getNodeType(e):null;if("void"===n||"void"===o)return"void";if("%"===r)return n;if("~"===r||"&"===r||"|"===r||"^"===r||">>"===r||"<<"===r)return e.getIntegerType(n);if("!"===r||"=="===r||"&&"===r||"||"===r||"^^"===r)return"bool";if("<"===r||">"===r||"<="===r||">="===r){const r=t?e.getTypeLength(t):Math.max(e.getTypeLength(n),e.getTypeLength(o));return r>1?`bvec${r}`:"bool"}if(e.isMatrix(n)){if("float"===o)return n;if(e.isVector(o))return e.getVectorFromMatrix(n);if(e.isMatrix(o))return n}else if(e.isMatrix(o)){if("float"===n)return o;if(e.isVector(n))return e.getVectorFromMatrix(o)}return e.getTypeLength(o)>e.getTypeLength(n)?o:n}generate(e,t){const r=this.op,s=this.aNode,i=this.bNode,n=this.getNodeType(e,t);let o=null,a=null;"void"!==n?(o=s.getNodeType(e),a=void 0!==i?i.getNodeType(e):null,"<"===r||">"===r||"<="===r||">="===r||"=="===r?e.isVector(o)?a=o:o!==a&&(o=a="float"):">>"===r||"<<"===r?(o=n,a=e.changeComponentType(a,"uint")):e.isMatrix(o)?"float"===a?a="float":e.isVector(a)?a=e.getVectorFromMatrix(o):e.isMatrix(a)||(o=a=n):o=e.isMatrix(a)?"float"===o?"float":e.isVector(o)?e.getVectorFromMatrix(a):a=n:a=n):o=a=n;const u=s.build(e,o),l=void 0!==i?i.build(e,a):null,d=e.getTypeLength(t),c=e.getFunctionOperator(r);return"void"!==t?"<"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} < ${l} )`,n,t):"<="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("lessThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} <= ${l} )`,n,t):">"===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThan",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} > ${l} )`,n,t):">="===r&&d>1?e.useComparisonMethod?e.format(`${e.getMethod("greaterThanEqual",t)}( ${u}, ${l} )`,n,t):e.format(`( ${u} >= ${l} )`,n,t):"!"===r||"~"===r?e.format(`(${r}${u})`,o,t):c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`( ${l} ${r} ${u} )`,n,t):"float"===o&&e.isMatrix(a)?e.format(`${u} ${r} ${l}`,n,t):e.format(`( ${u} ${r} ${l} )`,n,t):"void"!==o?c?e.format(`${c}( ${u}, ${l} )`,n,t):e.isMatrix(o)&&"float"===a?e.format(`${l} ${r} ${u}`,n,t):e.format(`${u} ${r} ${l}`,n,t):void 0}serialize(e){super.serialize(e),e.op=this.op}deserialize(e){super.deserialize(e),this.op=e.op}}const ro=Ii(to,"+"),so=Ii(to,"-"),io=Ii(to,"*"),no=Ii(to,"/"),oo=Ii(to,"%"),ao=Ii(to,"=="),uo=Ii(to,"!="),lo=Ii(to,"<"),co=Ii(to,">"),ho=Ii(to,"<="),po=Ii(to,">="),go=Ii(to,"&&"),mo=Ii(to,"||"),fo=Ii(to,"!"),yo=Ii(to,"^^"),xo=Ii(to,"&"),bo=Ii(to,"~"),To=Ii(to,"|"),_o=Ii(to,"^"),vo=Ii(to,"<<"),No=Ii(to,">>");ii("add",ro),ii("sub",so),ii("mul",io),ii("div",no),ii("modInt",oo),ii("equal",ao),ii("notEqual",uo),ii("lessThan",lo),ii("greaterThan",co),ii("lessThanEqual",ho),ii("greaterThanEqual",po),ii("and",go),ii("or",mo),ii("not",fo),ii("xor",yo),ii("bitAnd",xo),ii("bitNot",bo),ii("bitOr",To),ii("bitXor",_o),ii("shiftLeft",vo),ii("shiftRight",No);const So=(...e)=>(console.warn("TSL.OperatorNode: .remainder() has been renamed to .modInt()."),oo(...e));ii("remainder",So);class Eo extends js{static get type(){return"MathNode"}constructor(e,t,r=null,s=null){super(),this.method=e,this.aNode=t,this.bNode=r,this.cNode=s,this.isMathNode=!0}getInputType(e){const t=this.aNode.getNodeType(e),r=this.bNode?this.bNode.getNodeType(e):null,s=this.cNode?this.cNode.getNodeType(e):null,i=e.isMatrix(t)?0:e.getTypeLength(t),n=e.isMatrix(r)?0:e.getTypeLength(r),o=e.isMatrix(s)?0:e.getTypeLength(s);return i>n&&i>o?t:n>o?r:o>i?s:t}getNodeType(e){const t=this.method;return t===Eo.LENGTH||t===Eo.DISTANCE||t===Eo.DOT?"float":t===Eo.CROSS?"vec3":t===Eo.ALL?"bool":t===Eo.EQUALS?e.changeComponentType(this.aNode.getNodeType(e),"bool"):t===Eo.MOD?this.aNode.getNodeType(e):this.getInputType(e)}generate(e,t){let r=this.method;const s=this.getNodeType(e),i=this.getInputType(e),n=this.aNode,o=this.bNode,a=this.cNode,u=e.renderer.coordinateSystem;if(r===Eo.TRANSFORM_DIRECTION){let r=n,s=o;e.isMatrix(r.getNodeType(e))?s=en(Yi(s),0):r=en(Yi(r),0);const i=io(r,s).xyz;return zo(i).build(e,t)}if(r===Eo.NEGATE)return e.format("( - "+n.build(e,i)+" )",s,t);if(r===Eo.ONE_MINUS)return so(1,n).build(e,t);if(r===Eo.RECIPROCAL)return no(1,n).build(e,t);if(r===Eo.DIFFERENCE)return Yo(so(n,o)).build(e,t);{const c=[];return r===Eo.CROSS||r===Eo.MOD?c.push(n.build(e,s),o.build(e,s)):u===l&&r===Eo.STEP?c.push(n.build(e,1===e.getTypeLength(n.getNodeType(e))?"float":i),o.build(e,i)):u===l&&(r===Eo.MIN||r===Eo.MAX)||r===Eo.MOD?c.push(n.build(e,i),o.build(e,1===e.getTypeLength(o.getNodeType(e))?"float":i)):r===Eo.REFRACT?c.push(n.build(e,i),o.build(e,i),a.build(e,"float")):r===Eo.MIX?c.push(n.build(e,i),o.build(e,i),a.build(e,1===e.getTypeLength(a.getNodeType(e))?"float":i)):(u===d&&r===Eo.ATAN&&null!==o&&(r="atan2"),c.push(n.build(e,i)),null!==o&&c.push(o.build(e,i)),null!==a&&c.push(a.build(e,i))),e.format(`${e.getMethod(r,s)}( ${c.join(", ")} )`,s,t)}}serialize(e){super.serialize(e),e.method=this.method}deserialize(e){super.deserialize(e),this.method=e.method}}Eo.ALL="all",Eo.ANY="any",Eo.RADIANS="radians",Eo.DEGREES="degrees",Eo.EXP="exp",Eo.EXP2="exp2",Eo.LOG="log",Eo.LOG2="log2",Eo.SQRT="sqrt",Eo.INVERSE_SQRT="inversesqrt",Eo.FLOOR="floor",Eo.CEIL="ceil",Eo.NORMALIZE="normalize",Eo.FRACT="fract",Eo.SIN="sin",Eo.COS="cos",Eo.TAN="tan",Eo.ASIN="asin",Eo.ACOS="acos",Eo.ATAN="atan",Eo.ABS="abs",Eo.SIGN="sign",Eo.LENGTH="length",Eo.NEGATE="negate",Eo.ONE_MINUS="oneMinus",Eo.DFDX="dFdx",Eo.DFDY="dFdy",Eo.ROUND="round",Eo.RECIPROCAL="reciprocal",Eo.TRUNC="trunc",Eo.FWIDTH="fwidth",Eo.TRANSPOSE="transpose",Eo.BITCAST="bitcast",Eo.EQUALS="equals",Eo.MIN="min",Eo.MAX="max",Eo.MOD="mod",Eo.STEP="step",Eo.REFLECT="reflect",Eo.DISTANCE="distance",Eo.DIFFERENCE="difference",Eo.DOT="dot",Eo.CROSS="cross",Eo.POW="pow",Eo.TRANSFORM_DIRECTION="transformDirection",Eo.MIX="mix",Eo.CLAMP="clamp",Eo.REFRACT="refract",Eo.SMOOTHSTEP="smoothstep",Eo.FACEFORWARD="faceforward";const wo=zi(1e-6),Ao=zi(1e6),Ro=zi(Math.PI),Co=zi(2*Math.PI),Mo=Ii(Eo,Eo.ALL),Fo=Ii(Eo,Eo.ANY),Bo=Ii(Eo,Eo.RADIANS),Po=Ii(Eo,Eo.DEGREES),Io=Ii(Eo,Eo.EXP),Lo=Ii(Eo,Eo.EXP2),Do=Ii(Eo,Eo.LOG),Vo=Ii(Eo,Eo.LOG2),Uo=Ii(Eo,Eo.SQRT),Oo=Ii(Eo,Eo.INVERSE_SQRT),Go=Ii(Eo,Eo.FLOOR),ko=Ii(Eo,Eo.CEIL),zo=Ii(Eo,Eo.NORMALIZE),Wo=Ii(Eo,Eo.FRACT),$o=Ii(Eo,Eo.SIN),Ho=Ii(Eo,Eo.COS),jo=Ii(Eo,Eo.TAN),qo=Ii(Eo,Eo.ASIN),Xo=Ii(Eo,Eo.ACOS),Ko=Ii(Eo,Eo.ATAN),Yo=Ii(Eo,Eo.ABS),Qo=Ii(Eo,Eo.SIGN),Zo=Ii(Eo,Eo.LENGTH),Jo=Ii(Eo,Eo.NEGATE),ea=Ii(Eo,Eo.ONE_MINUS),ta=Ii(Eo,Eo.DFDX),ra=Ii(Eo,Eo.DFDY),sa=Ii(Eo,Eo.ROUND),ia=Ii(Eo,Eo.RECIPROCAL),na=Ii(Eo,Eo.TRUNC),oa=Ii(Eo,Eo.FWIDTH),aa=Ii(Eo,Eo.TRANSPOSE),ua=Ii(Eo,Eo.BITCAST),la=Ii(Eo,Eo.EQUALS),da=Ii(Eo,Eo.MIN),ca=Ii(Eo,Eo.MAX),ha=Ii(Eo,Eo.MOD),pa=Ii(Eo,Eo.STEP),ga=Ii(Eo,Eo.REFLECT),ma=Ii(Eo,Eo.DISTANCE),fa=Ii(Eo,Eo.DIFFERENCE),ya=Ii(Eo,Eo.DOT),xa=Ii(Eo,Eo.CROSS),ba=Ii(Eo,Eo.POW),Ta=Ii(Eo,Eo.POW,2),_a=Ii(Eo,Eo.POW,3),va=Ii(Eo,Eo.POW,4),Na=Ii(Eo,Eo.TRANSFORM_DIRECTION),Sa=e=>io(Qo(e),ba(Yo(e),1/3)),Ea=e=>ya(e,e),wa=Ii(Eo,Eo.MIX),Aa=(e,t=0,r=1)=>Fi(new Eo(Eo.CLAMP,Fi(e),Fi(t),Fi(r))),Ra=e=>Aa(e),Ca=Ii(Eo,Eo.REFRACT),Ma=Ii(Eo,Eo.SMOOTHSTEP),Fa=Ii(Eo,Eo.FACEFORWARD),Ba=Di((([e])=>{const t=ya(e.xy,ji(12.9898,78.233)),r=ha(t,Ro);return Wo($o(r).mul(43758.5453))})),Pa=(e,t,r)=>wa(t,r,e),Ia=(e,t,r)=>Ma(t,r,e),La=(e,t)=>(console.warn('THREE.TSL: "atan2" is overloaded. Use "atan" instead.'),Ko(e,t)),Da=Fa,Va=Oo;ii("all",Mo),ii("any",Fo),ii("equals",la),ii("radians",Bo),ii("degrees",Po),ii("exp",Io),ii("exp2",Lo),ii("log",Do),ii("log2",Vo),ii("sqrt",Uo),ii("inverseSqrt",Oo),ii("floor",Go),ii("ceil",ko),ii("normalize",zo),ii("fract",Wo),ii("sin",$o),ii("cos",Ho),ii("tan",jo),ii("asin",qo),ii("acos",Xo),ii("atan",Ko),ii("abs",Yo),ii("sign",Qo),ii("length",Zo),ii("lengthSq",Ea),ii("negate",Jo),ii("oneMinus",ea),ii("dFdx",ta),ii("dFdy",ra),ii("round",sa),ii("reciprocal",ia),ii("trunc",na),ii("fwidth",oa),ii("atan2",La),ii("min",da),ii("max",ca),ii("mod",ha),ii("step",pa),ii("reflect",ga),ii("distance",ma),ii("dot",ya),ii("cross",xa),ii("pow",ba),ii("pow2",Ta),ii("pow3",_a),ii("pow4",va),ii("transformDirection",Na),ii("mix",Pa),ii("clamp",Aa),ii("refract",Ca),ii("smoothstep",Ia),ii("faceForward",Fa),ii("difference",fa),ii("saturate",Ra),ii("cbrt",Sa),ii("transpose",aa),ii("rand",Ba);class Ua extends Ws{static get type(){return"ConditionalNode"}constructor(e,t,r=null){super(),this.condNode=e,this.ifNode=t,this.elseNode=r}getNodeType(e){const{ifNode:t,elseNode:r}=e.getNodeProperties(this);if(void 0===t)return this.setup(e),this.getNodeType(e);const s=t.getNodeType(e);if(null!==r){const t=r.getNodeType(e);if(e.getTypeLength(t)>e.getTypeLength(s))return t}return s}setup(e){const t=this.condNode.cache(),r=this.ifNode.cache(),s=this.elseNode?this.elseNode.cache():null,i=e.context.nodeBlock;e.getDataFromNode(r).parentNodeBlock=i,null!==s&&(e.getDataFromNode(s).parentNodeBlock=i);const n=e.getNodeProperties(this);n.condNode=t,n.ifNode=r.context({nodeBlock:r}),n.elseNode=s?s.context({nodeBlock:s}):null}generate(e,t){const r=this.getNodeType(e),s=e.getDataFromNode(this);if(void 0!==s.nodeProperty)return s.nodeProperty;const{condNode:i,ifNode:n,elseNode:o}=e.getNodeProperties(this),a="void"!==t,u=a?_n(r).build(e):"";s.nodeProperty=u;const l=i.build(e,"bool");e.addFlowCode(`\n${e.tab}if ( ${l} ) {\n\n`).addFlowTab();let d=n.build(e,r);if(d&&(d=a?u+" = "+d+";":"return "+d+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+d+"\n\n"+e.tab+"}"),null!==o){e.addFlowCode(" else {\n\n").addFlowTab();let t=o.build(e,r);t&&(t=a?u+" = "+t+";":"return "+t+";"),e.removeFlowTab().addFlowCode(e.tab+"\t"+t+"\n\n"+e.tab+"}\n\n")}else e.addFlowCode("\n\n");return e.format(u,r,t)}}const Oa=Ii(Ua);ii("select",Oa);const Ga=(...e)=>(console.warn("TSL.ConditionalNode: cond() has been renamed to select()."),Oa(...e));ii("cond",Ga);class ka extends Ws{static get type(){return"ContextNode"}constructor(e,t={}){super(),this.isContextNode=!0,this.node=e,this.value=t}getScope(){return this.node.getScope()}getNodeType(e){return this.node.getNodeType(e)}analyze(e){this.node.build(e)}setup(e){const t=e.getContext();e.setContext({...e.context,...this.value});const r=this.node.build(e);return e.setContext(t),r}generate(e,t){const r=e.getContext();e.setContext({...e.context,...this.value});const s=this.node.build(e,t);return e.setContext(r),s}}const za=Ii(ka),Wa=(e,t)=>za(e,{label:t});ii("context",za),ii("label",Wa);class $a extends Ws{static get type(){return"VarNode"}constructor(e,t=null,r=!1){super(),this.node=e,this.name=t,this.global=!0,this.isVarNode=!0,this.readOnly=r}getHash(e){return this.name||super.getHash(e)}getMemberType(e,t){return this.node.getMemberType(e,t)}getElementType(e){return this.node.getElementType(e)}getNodeType(e){return this.node.getNodeType(e)}generate(e){const{node:t,name:r,readOnly:s}=this,{renderer:i}=e,n=!0===i.backend.isWebGPUBackend;let o=!1,a=!1;s&&(o=e.isDeterministic(t),a=n?s:o);const u=e.getVectorType(this.getNodeType(e)),l=t.build(e,u),d=e.getVarFromNode(this,r,u,void 0,a),c=e.getPropertyName(d);let h=c;if(a)if(n)h=o?`const ${c}`:`let ${c}`;else{const r=e.getArrayCount(t);h=`const ${e.getVar(d.type,c,r)}`}return e.addLineFlowCode(`${h} = ${l}`,this),c}}const Ha=Ii($a),ja=(e,t=null)=>Ha(e,t).append(),qa=(e,t=null)=>Ha(e,t,!0).append();ii("toVar",ja),ii("toConst",qa);const Xa=e=>(console.warn('TSL: "temp( node )" is deprecated. Use "Var( node )" or "node.toVar()" instead.'),Ha(e));ii("temp",Xa);class Ka extends Ws{static get type(){return"VaryingNode"}constructor(e,t=null){super(),this.node=e,this.name=t,this.isVaryingNode=!0}isGlobal(){return!0}getHash(e){return this.name||super.getHash(e)}getNodeType(e){return this.node.getNodeType(e)}setupVarying(e){const t=e.getNodeProperties(this);let r=t.varying;if(void 0===r){const s=this.name,i=this.getNodeType(e);t.varying=r=e.getVaryingFromNode(this,s,i),t.node=this.node}return r.needsInterpolation||(r.needsInterpolation="fragment"===e.shaderStage),r}setup(e){this.setupVarying(e)}analyze(e){return this.setupVarying(e),this.node.analyze(e)}generate(e){const t=e.getNodeProperties(this),r=this.setupVarying(e),s="fragment"===e.shaderStage&&!0===t.reassignPosition&&e.context.needsPositionReassign;if(void 0===t.propertyName||s){const i=this.getNodeType(e),n=e.getPropertyName(r,Is.VERTEX);e.flowNodeFromShaderStage(Is.VERTEX,this.node,i,n),t.propertyName=n,s?t.reassignPosition=!1:void 0===t.reassignPosition&&e.context.isPositionNodeInput&&(t.reassignPosition=!0)}return e.getPropertyName(r)}}const Ya=Ii(Ka),Qa=e=>Ya(e);ii("toVarying",Ya),ii("toVertexStage",Qa),ii("varying",((...e)=>(console.warn("TSL.VaryingNode: .varying() has been renamed to .toVarying()."),Ya(...e)))),ii("vertexStage",((...e)=>(console.warn("TSL.VaryingNode: .vertexStage() has been renamed to .toVertexStage()."),Ya(...e))));const Za=Di((([e])=>{const t=e.mul(.9478672986).add(.0521327014).pow(2.4),r=e.mul(.0773993808),s=e.lessThanEqual(.04045);return wa(t,r,s)})).setLayout({name:"sRGBTransferEOTF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),Ja=Di((([e])=>{const t=e.pow(.41666).mul(1.055).sub(.055),r=e.mul(12.92),s=e.lessThanEqual(.0031308);return wa(t,r,s)})).setLayout({name:"sRGBTransferOETF",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),eu="WorkingColorSpace",tu="OutputColorSpace";class ru extends js{static get type(){return"ColorSpaceNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.source=t,this.target=r}resolveColorSpace(e,t){return t===eu?c.workingColorSpace:t===tu?e.context.outputColorSpace||e.renderer.outputColorSpace:t}setup(e){const{colorNode:t}=this,r=this.resolveColorSpace(e,this.source),s=this.resolveColorSpace(e,this.target);let i=t;return!1!==c.enabled&&r!==s&&r&&s?(c.getTransfer(r)===h&&(i=en(Za(i.rgb),i.a)),c.getPrimaries(r)!==c.getPrimaries(s)&&(i=en(on(c._getMatrix(new n,r,s)).mul(i.rgb),i.a)),c.getTransfer(s)===h&&(i=en(Ja(i.rgb),i.a)),i):i}}const su=e=>Fi(new ru(Fi(e),eu,tu)),iu=e=>Fi(new ru(Fi(e),tu,eu)),nu=(e,t)=>Fi(new ru(Fi(e),eu,t)),ou=(e,t)=>Fi(new ru(Fi(e),t,eu));ii("toOutputColorSpace",su),ii("toWorkingColorSpace",iu),ii("workingToColorSpace",nu),ii("colorSpaceToWorking",ou);let au=class extends $s{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}};class uu extends Ws{static get type(){return"ReferenceBaseNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.updateType=Ls.OBJECT}setGroup(e){return this.group=e,this}element(e){return Fi(new au(this,Fi(e)))}setNodeType(e){const t=bn(null,e).getSelf();null!==this.group&&t.setGroup(this.group),this.node=t}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}class lu extends uu{static get type(){return"RendererReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.renderer=r,this.setGroup(fn)}updateReference(e){return this.reference=null!==this.renderer?this.renderer:e.renderer,this.reference}}const du=(e,t,r=null)=>Fi(new lu(e,t,r));class cu extends js{static get type(){return"ToneMappingNode"}constructor(e,t=pu,r=null){super("vec3"),this.toneMapping=e,this.exposureNode=t,this.colorNode=r}customCacheKey(){return Ts(this.toneMapping)}setup(e){const t=this.colorNode||e.context.color,r=this.toneMapping;if(r===p)return t;let s=null;const i=e.renderer.library.getToneMappingFunction(r);return null!==i?s=en(i(t.rgb,this.exposureNode),t.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",r),s=t),s}}const hu=(e,t,r)=>Fi(new cu(e,Fi(t),Fi(r))),pu=du("toneMappingExposure","float");ii("toneMapping",((e,t,r)=>hu(t,r,e)));class gu extends Zs{static get type(){return"BufferAttributeNode"}constructor(e,t=null,r=0,s=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferStride=r,this.bufferOffset=s,this.usage=g,this.instanced=!1,this.attribute=null,this.global=!0,e&&!0===e.isBufferAttribute&&(this.attribute=e,this.usage=e.usage,this.instanced=e.isInstancedBufferAttribute)}getHash(e){if(0===this.bufferStride&&0===this.bufferOffset){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getNodeType(e){return null===this.bufferType&&(this.bufferType=e.getTypeFromAttribute(this.attribute)),this.bufferType}setup(e){if(null!==this.attribute)return;const t=this.getNodeType(e),r=this.value,s=e.getTypeLength(t),i=this.bufferStride||s,n=this.bufferOffset,o=!0===r.isInterleavedBuffer?r:new m(r,i),a=new f(o,s,n);o.setUsage(this.usage),this.attribute=a,this.attribute.isInstancedBufferAttribute=this.instanced}generate(e){const t=this.getNodeType(e),r=e.getBufferAttributeFromNode(this,t),s=e.getPropertyName(r);let i=null;if("vertex"===e.shaderStage||"compute"===e.shaderStage)this.name=s,i=s;else{i=Ya(this).build(e,t)}return i}getInputType(){return"bufferAttribute"}setUsage(e){return this.usage=e,this.attribute&&!0===this.attribute.isBufferAttribute&&(this.attribute.usage=e),this}setInstanced(e){return this.instanced=e,this}}const mu=(e,t=null,r=0,s=0)=>Fi(new gu(e,t,r,s)),fu=(e,t=null,r=0,s=0)=>mu(e,t,r,s).setUsage(y),yu=(e,t=null,r=0,s=0)=>mu(e,t,r,s).setInstanced(!0),xu=(e,t=null,r=0,s=0)=>fu(e,t,r,s).setInstanced(!0);ii("toAttribute",(e=>mu(e.value)));class bu extends Ws{static get type(){return"ComputeNode"}constructor(e,t,r=[64]){super("void"),this.isComputeNode=!0,this.computeNode=e,this.count=t,this.workgroupSize=r,this.dispatchCount=0,this.version=1,this.name="",this.updateBeforeType=Ls.OBJECT,this.onInitFunction=null,this.updateDispatchCount()}dispose(){this.dispatchEvent({type:"dispose"})}label(e){return this.name=e,this}updateDispatchCount(){const{count:e,workgroupSize:t}=this;let r=t[0];for(let e=1;e<t.length;e++)r*=t[e];this.dispatchCount=Math.ceil(e/r)}onInit(e){return this.onInitFunction=e,this}updateBefore({renderer:e}){e.compute(this)}generate(e){const{shaderStage:t}=e;if("compute"===t){const t=this.computeNode.build(e,"void");""!==t&&e.addLineFlowCode(t,this)}}}const Tu=(e,t,r)=>Fi(new bu(Fi(e),t,r));ii("compute",Tu);class _u extends Ws{static get type(){return"CacheNode"}constructor(e,t=!0){super(),this.node=e,this.parent=t,this.isCacheNode=!0}getNodeType(e){const t=e.getCache(),r=e.getCacheFromNode(this,this.parent);e.setCache(r);const s=this.node.getNodeType(e);return e.setCache(t),s}build(e,...t){const r=e.getCache(),s=e.getCacheFromNode(this,this.parent);e.setCache(s);const i=this.node.build(e,...t);return e.setCache(r),i}}const vu=(e,t)=>Fi(new _u(Fi(e),t));ii("cache",vu);class Nu extends Ws{static get type(){return"BypassNode"}constructor(e,t){super(),this.isBypassNode=!0,this.outputNode=e,this.callNode=t}getNodeType(e){return this.outputNode.getNodeType(e)}generate(e){const t=this.callNode.build(e,"void");return""!==t&&e.addLineFlowCode(t,this),this.outputNode.build(e)}}const Su=Ii(Nu);ii("bypass",Su);class Eu extends Ws{static get type(){return"RemapNode"}constructor(e,t,r,s=zi(0),i=zi(1)){super(),this.node=e,this.inLowNode=t,this.inHighNode=r,this.outLowNode=s,this.outHighNode=i,this.doClamp=!0}setup(){const{node:e,inLowNode:t,inHighNode:r,outLowNode:s,outHighNode:i,doClamp:n}=this;let o=e.sub(t).div(r.sub(t));return!0===n&&(o=o.clamp()),o.mul(i.sub(s)).add(s)}}const wu=Ii(Eu,null,null,{doClamp:!1}),Au=Ii(Eu);ii("remap",wu),ii("remapClamp",Au);class Ru extends Ws{static get type(){return"ExpressionNode"}constructor(e="",t="void"){super(t),this.snippet=e}generate(e,t){const r=this.getNodeType(e),s=this.snippet;if("void"!==r)return e.format(s,r,t);e.addLineFlowCode(s,this)}}const Cu=Ii(Ru),Mu=e=>(e?Oa(e,Cu("discard")):Cu("discard")).append();ii("discard",Mu);class Fu extends js{static get type(){return"RenderOutputNode"}constructor(e,t,r){super("vec4"),this.colorNode=e,this.toneMapping=t,this.outputColorSpace=r,this.isRenderOutputNode=!0}setup({context:e}){let t=this.colorNode||e.color;const r=(null!==this.toneMapping?this.toneMapping:e.toneMapping)||p,s=(null!==this.outputColorSpace?this.outputColorSpace:e.outputColorSpace)||x;return r!==p&&(t=t.toneMapping(r)),s!==x&&s!==c.workingColorSpace&&(t=t.workingToColorSpace(s)),t}}const Bu=(e,t=null,r=null)=>Fi(new Fu(Fi(e),t,r));ii("renderOutput",Bu);class Pu extends Ws{static get type(){return"AttributeNode"}constructor(e,t=null){super(t),this.global=!0,this._attributeName=e}getHash(e){return this.getAttributeName(e)}getNodeType(e){let t=this.nodeType;if(null===t){const r=this.getAttributeName(e);if(e.hasGeometryAttribute(r)){const s=e.geometry.getAttribute(r);t=e.getTypeFromAttribute(s)}else t="float"}return t}setAttributeName(e){return this._attributeName=e,this}getAttributeName(){return this._attributeName}generate(e){const t=this.getAttributeName(e),r=this.getNodeType(e);if(!0===e.hasGeometryAttribute(t)){const s=e.geometry.getAttribute(t),i=e.getTypeFromAttribute(s),n=e.getAttribute(t,i);if("vertex"===e.shaderStage)return e.format(n.name,i,r);return Ya(this).build(e,r)}return console.warn(`AttributeNode: Vertex attribute "${t}" not found on geometry.`),e.generateConst(r)}serialize(e){super.serialize(e),e.global=this.global,e._attributeName=this._attributeName}deserialize(e){super.deserialize(e),this.global=e.global,this._attributeName=e._attributeName}}const Iu=(e,t)=>Fi(new Pu(e,t)),Lu=(e=0)=>Iu("uv"+(e>0?e:""),"vec2");class Du extends Ws{static get type(){return"TextureSizeNode"}constructor(e,t=null){super("uvec2"),this.isTextureSizeNode=!0,this.textureNode=e,this.levelNode=t}generate(e,t){const r=this.textureNode.build(e,"property"),s=null===this.levelNode?"0":this.levelNode.build(e,"int");return e.format(`${e.getMethod("textureDimensions")}( ${r}, ${s} )`,this.getNodeType(e),t)}}const Vu=Ii(Du);class Uu extends xn{static get type(){return"MaxMipLevelNode"}constructor(e){super(0),this._textureNode=e,this.updateType=Ls.FRAME}get textureNode(){return this._textureNode}get texture(){return this._textureNode.value}update(){const e=this.texture,t=e.images,r=t&&t.length>0?t[0]&&t[0].image||t[0]:e.image;if(r&&void 0!==r.width){const{width:e,height:t}=r;this.value=Math.log2(Math.max(e,t))}}}const Ou=Ii(Uu);class Gu extends xn{static get type(){return"TextureNode"}constructor(e,t=null,r=null,s=null){super(e),this.isTextureNode=!0,this.uvNode=t,this.levelNode=r,this.biasNode=s,this.compareNode=null,this.depthNode=null,this.gradNode=null,this.sampler=!0,this.updateMatrix=!1,this.updateType=Ls.NONE,this.referenceNode=null,this._value=e,this._matrixUniform=null,this.setUpdateMatrix(null===t)}set value(e){this.referenceNode?this.referenceNode.value=e:this._value=e}get value(){return this.referenceNode?this.referenceNode.value:this._value}getUniformHash(){return this.value.uuid}getNodeType(){return!0===this.value.isDepthTexture?"float":this.value.type===b?"uvec4":this.value.type===T?"ivec4":"vec4"}getInputType(){return"texture"}getDefaultUV(){return Lu(this.value.channel)}updateReference(){return this.value}getTransformedUV(e){return null===this._matrixUniform&&(this._matrixUniform=bn(this.value.matrix)),this._matrixUniform.mul(Yi(e,1)).xy}setUpdateMatrix(e){return this.updateMatrix=e,this.updateType=e?Ls.RENDER:Ls.NONE,this}setupUV(e,t){const r=this.value;return e.isFlipY()&&(r.image instanceof ImageBitmap&&!0===r.flipY||!0===r.isRenderTargetTexture||!0===r.isFramebufferTexture||!0===r.isDepthTexture)&&(t=this.sampler?t.flipY():t.setY(Wi(Vu(this,this.levelNode).y).sub(t.y).sub(1))),t}setup(e){const t=e.getNodeProperties(this);t.referenceNode=this.referenceNode;const r=this.value;if(!r||!0!==r.isTexture)throw new Error("THREE.TSL: `texture( value )` function expects a valid instance of THREE.Texture().");let s=this.uvNode;null!==s&&!0!==e.context.forceUVContext||!e.context.getUV||(s=e.context.getUV(this)),s||(s=this.getDefaultUV()),!0===this.updateMatrix&&(s=this.getTransformedUV(s)),s=this.setupUV(e,s);let i=this.levelNode;null===i&&e.context.getTextureLevel&&(i=e.context.getTextureLevel(this)),t.uvNode=s,t.levelNode=i,t.biasNode=this.biasNode,t.compareNode=this.compareNode,t.gradNode=this.gradNode,t.depthNode=this.depthNode}generateUV(e,t){return t.build(e,!0===this.sampler?"vec2":"ivec2")}generateSnippet(e,t,r,s,i,n,o,a){const u=this.value;let l;return l=s?e.generateTextureLevel(u,t,r,s,n):i?e.generateTextureBias(u,t,r,i,n):a?e.generateTextureGrad(u,t,r,a,n):o?e.generateTextureCompare(u,t,r,o,n):!1===this.sampler?e.generateTextureLoad(u,t,r,n):e.generateTexture(u,t,r,n),l}generate(e,t){const r=this.value,s=e.getNodeProperties(this),i=super.generate(e,"property");if(/^sampler/.test(t))return i+"_sampler";if(e.isReference(t))return i;{const n=e.getDataFromNode(this);let o=n.propertyName;if(void 0===o){const{uvNode:t,levelNode:r,biasNode:a,compareNode:u,depthNode:l,gradNode:d}=s,c=this.generateUV(e,t),h=r?r.build(e,"float"):null,p=a?a.build(e,"float"):null,g=l?l.build(e,"int"):null,m=u?u.build(e,"float"):null,f=d?[d[0].build(e,"vec2"),d[1].build(e,"vec2")]:null,y=e.getVarFromNode(this);o=e.getPropertyName(y);const x=this.generateSnippet(e,i,c,h,p,g,m,f);e.addLineFlowCode(`${o} = ${x}`,this),n.snippet=x,n.propertyName=o}let a=o;const u=this.getNodeType(e);return e.needsToWorkingColorSpace(r)&&(a=ou(Cu(a,u),r.colorSpace).setup(e).build(e,u)),e.format(a,u,t)}}setSampler(e){return this.sampler=e,this}getSampler(){return this.sampler}uv(e){return console.warn("THREE.TextureNode: .uv() has been renamed. Use .sample() instead."),this.sample(e)}sample(e){const t=this.clone();return t.uvNode=Fi(e),t.referenceNode=this.getSelf(),Fi(t)}blur(e){const t=this.clone();t.biasNode=Fi(e).mul(Ou(t)),t.referenceNode=this.getSelf();const r=t.value;return(r&&!1===r.generateMipmaps||r.minFilter===_||r.magFilter===_)&&(console.warn("THREE.TSL: texture().blur() requires mipmaps and sampling. Use .generateMipmaps=true and .minFilter/.magFilter=THREE.LinearFilter in the Texture."),t.biasNode=null),Fi(t)}level(e){const t=this.clone();return t.levelNode=Fi(e),t.referenceNode=this.getSelf(),Fi(t)}size(e){return Vu(this,e)}bias(e){const t=this.clone();return t.biasNode=Fi(e),t.referenceNode=this.getSelf(),Fi(t)}compare(e){const t=this.clone();return t.compareNode=Fi(e),t.referenceNode=this.getSelf(),Fi(t)}grad(e,t){const r=this.clone();return r.gradNode=[Fi(e),Fi(t)],r.referenceNode=this.getSelf(),Fi(r)}depth(e){const t=this.clone();return t.depthNode=Fi(e),t.referenceNode=this.getSelf(),Fi(t)}serialize(e){super.serialize(e),e.value=this.value.toJSON(e.meta).uuid,e.sampler=this.sampler,e.updateMatrix=this.updateMatrix,e.updateType=this.updateType}deserialize(e){super.deserialize(e),this.value=e.meta.textures[e.value],this.sampler=e.sampler,this.updateMatrix=e.updateMatrix,this.updateType=e.updateType}update(){const e=this.value,t=this._matrixUniform;null!==t&&(t.value=e.matrix),!0===e.matrixAutoUpdate&&e.updateMatrix()}clone(){const e=new this.constructor(this.value,this.uvNode,this.levelNode,this.biasNode);return e.sampler=this.sampler,e}}const ku=Ii(Gu),zu=(...e)=>ku(...e).setSampler(!1);class Wu extends xn{static get type(){return"BufferNode"}constructor(e,t,r=0){super(e,t),this.isBufferNode=!0,this.bufferType=t,this.bufferCount=r}getElementType(e){return this.getNodeType(e)}getInputType(){return"buffer"}}const $u=(e,t,r)=>Fi(new Wu(e,t,r));class Hu extends $s{static get type(){return"UniformArrayElementNode"}constructor(e,t){super(e,t),this.isArrayBufferElementNode=!0}generate(e){const t=super.generate(e),r=this.getNodeType(),s=this.node.getPaddedType();return e.format(t,s,r)}}class ju extends Wu{static get type(){return"UniformArrayNode"}constructor(e,t=null){super(null),this.array=e,this.elementType=null===t?Rs(e[0]):t,this.paddedType=this.getPaddedType(),this.updateType=Ls.RENDER,this.isArrayBufferNode=!0}getNodeType(){return this.paddedType}getElementType(){return this.elementType}getPaddedType(){const e=this.elementType;let t="vec4";return"mat2"===e?t="mat2":!0===/mat/.test(e)?t="mat4":"i"===e.charAt(0)?t="ivec4":"u"===e.charAt(0)&&(t="uvec4"),t}update(){const{array:e,value:t}=this,r=this.elementType;if("float"===r||"int"===r||"uint"===r)for(let r=0;r<e.length;r++){t[4*r]=e[r]}else if("color"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.r,t[s+1]=i.g,t[s+2]=i.b||0}else if("mat2"===r)for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+3]=i.elements[3]}else if("mat3"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];t[s]=i.elements[0],t[s+1]=i.elements[1],t[s+2]=i.elements[2],t[s+4]=i.elements[3],t[s+5]=i.elements[4],t[s+6]=i.elements[5],t[s+8]=i.elements[6],t[s+9]=i.elements[7],t[s+10]=i.elements[8],t[s+15]=1}else if("mat4"===r)for(let r=0;r<e.length;r++){const s=16*r,i=e[r];for(let e=0;e<i.elements.length;e++)t[s+e]=i.elements[e]}else for(let r=0;r<e.length;r++){const s=4*r,i=e[r];t[s]=i.x,t[s+1]=i.y,t[s+2]=i.z||0,t[s+3]=i.w||0}}setup(e){const t=this.array.length,r=this.elementType;let s=Float32Array;const i=this.paddedType,n=e.getTypeLength(i);return"i"===r.charAt(0)&&(s=Int32Array),"u"===r.charAt(0)&&(s=Uint32Array),this.value=new s(t*n),this.bufferCount=t,this.bufferType=i,super.setup(e)}element(e){return Fi(new Hu(this,Fi(e)))}}const qu=(e,t)=>Fi(new ju(e,t)),Xu=bn(0,"uint").setGroup(gn("cameraIndex")).toVarying("v_cameraIndex"),Ku=bn("float").label("cameraNear").setGroup(fn).onRenderUpdate((({camera:e})=>e.near)),Yu=bn("float").label("cameraFar").setGroup(fn).onRenderUpdate((({camera:e})=>e.far)),Qu=Di((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.projectionMatrix);t=qu(r).setGroup(fn).label("cameraProjectionMatrices").element(Xu).toVar("cameraProjectionMatrix")}else t=bn("mat4").label("cameraProjectionMatrix").setGroup(fn).onRenderUpdate((({camera:e})=>e.projectionMatrix));return t})).once()(),Zu=bn("mat4").label("cameraProjectionMatrixInverse").setGroup(fn).onRenderUpdate((({camera:e})=>e.projectionMatrixInverse)),Ju=Di((({camera:e})=>{let t;if(e.isArrayCamera&&e.cameras.length>0){const r=[];for(const t of e.cameras)r.push(t.matrixWorldInverse);t=qu(r).setGroup(fn).label("cameraViewMatrices").element(Xu).toVar("cameraViewMatrix")}else t=bn("mat4").label("cameraViewMatrix").setGroup(fn).onRenderUpdate((({camera:e})=>e.matrixWorldInverse));return t})).once()(),el=bn("mat4").label("cameraWorldMatrix").setGroup(fn).onRenderUpdate((({camera:e})=>e.matrixWorld)),tl=bn("mat3").label("cameraNormalMatrix").setGroup(fn).onRenderUpdate((({camera:e})=>e.normalMatrix)),rl=bn(new r).label("cameraPosition").setGroup(fn).onRenderUpdate((({camera:e},t)=>t.value.setFromMatrixPosition(e.matrixWorld))),sl=new v;class il extends Ws{static get type(){return"Object3DNode"}constructor(e,t=null){super(),this.scope=e,this.object3d=t,this.updateType=Ls.OBJECT,this._uniformNode=new xn(null)}getNodeType(){const e=this.scope;return e===il.WORLD_MATRIX?"mat4":e===il.POSITION||e===il.VIEW_POSITION||e===il.DIRECTION||e===il.SCALE?"vec3":e===il.RADIUS?"float":void 0}update(e){const t=this.object3d,s=this._uniformNode,i=this.scope;if(i===il.WORLD_MATRIX)s.value=t.matrixWorld;else if(i===il.POSITION)s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld);else if(i===il.SCALE)s.value=s.value||new r,s.value.setFromMatrixScale(t.matrixWorld);else if(i===il.DIRECTION)s.value=s.value||new r,t.getWorldDirection(s.value);else if(i===il.VIEW_POSITION){const i=e.camera;s.value=s.value||new r,s.value.setFromMatrixPosition(t.matrixWorld),s.value.applyMatrix4(i.matrixWorldInverse)}else if(i===il.RADIUS){const r=e.object.geometry;null===r.boundingSphere&&r.computeBoundingSphere(),sl.copy(r.boundingSphere).applyMatrix4(t.matrixWorld),s.value=sl.radius}}generate(e){const t=this.scope;return t===il.WORLD_MATRIX?this._uniformNode.nodeType="mat4":t===il.POSITION||t===il.VIEW_POSITION||t===il.DIRECTION||t===il.SCALE?this._uniformNode.nodeType="vec3":t===il.RADIUS&&(this._uniformNode.nodeType="float"),this._uniformNode.build(e)}serialize(e){super.serialize(e),e.scope=this.scope}deserialize(e){super.deserialize(e),this.scope=e.scope}}il.WORLD_MATRIX="worldMatrix",il.POSITION="position",il.SCALE="scale",il.VIEW_POSITION="viewPosition",il.DIRECTION="direction",il.RADIUS="radius";const nl=Ii(il,il.DIRECTION),ol=Ii(il,il.WORLD_MATRIX),al=Ii(il,il.POSITION),ul=Ii(il,il.SCALE),ll=Ii(il,il.VIEW_POSITION),dl=Ii(il,il.RADIUS);class cl extends il{static get type(){return"ModelNode"}constructor(e){super(e)}update(e){this.object3d=e.object,super.update(e)}}const hl=Li(cl,cl.DIRECTION),pl=Li(cl,cl.WORLD_MATRIX),gl=Li(cl,cl.POSITION),ml=Li(cl,cl.SCALE),fl=Li(cl,cl.VIEW_POSITION),yl=Li(cl,cl.RADIUS),xl=bn(new n).onObjectUpdate((({object:e},t)=>t.value.getNormalMatrix(e.matrixWorld))),bl=bn(new o).onObjectUpdate((({object:e},t)=>t.value.copy(e.matrixWorld).invert())),Tl=Di((e=>e.renderer.nodes.modelViewMatrix||_l)).once()().toVar("modelViewMatrix"),_l=Ju.mul(pl),vl=Di((e=>(e.context.isHighPrecisionModelViewMatrix=!0,bn("mat4").onObjectUpdate((({object:e,camera:t})=>e.modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,e.matrixWorld)))))).once()().toVar("highpModelViewMatrix"),Nl=Di((e=>{const t=e.context.isHighPrecisionModelViewMatrix;return bn("mat3").onObjectUpdate((({object:e,camera:r})=>(!0!==t&&e.modelViewMatrix.multiplyMatrices(r.matrixWorldInverse,e.matrixWorld),e.normalMatrix.getNormalMatrix(e.modelViewMatrix))))})).once()().toVar("highpModelNormalViewMatrix"),Sl=Iu("position","vec3"),El=Sl.toVarying("positionLocal"),wl=Sl.toVarying("positionPrevious"),Al=pl.mul(El).xyz.toVarying("v_positionWorld").context({needsPositionReassign:!0}),Rl=El.transformDirection(pl).toVarying("v_positionWorldDirection").normalize().toVar("positionWorldDirection").context({needsPositionReassign:!0}),Cl=Di((e=>e.context.setupPositionView()),"vec3").once()().toVarying("v_positionView").context({needsPositionReassign:!0}),Ml=Cl.negate().toVarying("v_positionViewDirection").normalize().toVar("positionViewDirection");class Fl extends Ws{static get type(){return"FrontFacingNode"}constructor(){super("bool"),this.isFrontFacingNode=!0}generate(e){const{renderer:t,material:r}=e;return t.coordinateSystem===l&&r.side===N?"false":e.getFrontFacing()}}const Bl=Li(Fl),Pl=zi(Bl).mul(2).sub(1),Il=Iu("normal","vec3"),Ll=Di((e=>!1===e.geometry.hasAttribute("normal")?(console.warn('TSL.NormalNode: Vertex attribute "normal" not found on geometry.'),Yi(0,1,0)):Il),"vec3").once()().toVar("normalLocal"),Dl=Cl.dFdx().cross(Cl.dFdy()).normalize().toVar("normalFlat"),Vl=Di((e=>{let t;return t=!0===e.material.flatShading?Dl:Ya(Wl(Ll),"v_normalView").normalize(),t}),"vec3").once()().toVar("normalView"),Ul=Ya(Vl.transformDirection(Ju),"v_normalWorld").normalize().toVar("normalWorld"),Ol=Di((e=>e.context.setupNormal().context({getUV:null})),"vec3").once()().mul(Pl).toVar("transformedNormalView"),Gl=Ol.transformDirection(Ju).toVar("transformedNormalWorld"),kl=Di((e=>e.context.setupClearcoatNormal().context({getUV:null})),"vec3").once()().mul(Pl).toVar("transformedClearcoatNormalView"),zl=Di((([e,t=pl])=>{const r=on(t),s=e.div(Yi(r[0].dot(r[0]),r[1].dot(r[1]),r[2].dot(r[2])));return r.mul(s).xyz})),Wl=Di((([e],t)=>{const r=t.renderer.nodes.modelNormalViewMatrix;if(null!==r)return r.transformDirection(e);const s=xl.mul(e);return Ju.transformDirection(s)})),$l=new S,Hl=new o,jl=bn(0).onReference((({material:e})=>e)).onObjectUpdate((({material:e})=>e.refractionRatio)),ql=bn(1).onReference((({material:e})=>e)).onObjectUpdate((function({material:e,scene:t}){return e.envMap?e.envMapIntensity:t.environmentIntensity})),Xl=bn(new o).onReference((function(e){return e.material})).onObjectUpdate((function({material:e,scene:t}){const r=null!==t.environment&&null===e.envMap?t.environmentRotation:e.envMapRotation;return r?($l.copy(r),Hl.makeRotationFromEuler($l)):Hl.identity(),Hl})),Kl=Ml.negate().reflect(Ol),Yl=Ml.negate().refract(Ol,jl),Ql=Kl.transformDirection(Ju).toVar("reflectVector"),Zl=Yl.transformDirection(Ju).toVar("reflectVector");class Jl extends Gu{static get type(){return"CubeTextureNode"}constructor(e,t=null,r=null,s=null){super(e,t,r,s),this.isCubeTextureNode=!0}getInputType(){return"cubeTexture"}getDefaultUV(){const e=this.value;return e.mapping===E?Ql:e.mapping===w?Zl:(console.error('THREE.CubeTextureNode: Mapping "%s" not supported.',e.mapping),Yi(0,0,0))}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return e.renderer.coordinateSystem!==d&&r.isRenderTargetTexture||(t=Yi(t.x.negate(),t.yz)),Xl.mul(t)}generateUV(e,t){return t.build(e,"vec3")}}const ed=Ii(Jl);class td extends $s{static get type(){return"ReferenceElementNode"}constructor(e,t){super(e,t),this.referenceNode=e,this.isReferenceElementNode=!0}getNodeType(){return this.referenceNode.uniformType}generate(e){const t=super.generate(e),r=this.referenceNode.getNodeType(),s=this.getNodeType();return e.format(t,r,s)}}class rd extends Ws{static get type(){return"ReferenceNode"}constructor(e,t,r=null,s=null){super(),this.property=e,this.uniformType=t,this.object=r,this.count=s,this.properties=e.split("."),this.reference=r,this.node=null,this.group=null,this.name=null,this.updateType=Ls.OBJECT}element(e){return Fi(new td(this,Fi(e)))}setGroup(e){return this.group=e,this}label(e){return this.name=e,this}setNodeType(e){let t=null;t=null!==this.count?$u(null,e,this.count):Array.isArray(this.getValueFromReference())?qu(null,e):"texture"===e?ku(null):"cubeTexture"===e?ed(null):bn(null,e),null!==this.group&&t.setGroup(this.group),null!==this.name&&t.label(this.name),this.node=t.getSelf()}getNodeType(e){return null===this.node&&(this.updateReference(e),this.updateValue()),this.node.getNodeType(e)}getValueFromReference(e=this.reference){const{properties:t}=this;let r=e[t[0]];for(let e=1;e<t.length;e++)r=r[t[e]];return r}updateReference(e){return this.reference=null!==this.object?this.object:e.object,this.reference}setup(){return this.updateValue(),this.node}update(){this.updateValue()}updateValue(){null===this.node&&this.setNodeType(this.uniformType);const e=this.getValueFromReference();Array.isArray(e)?this.node.array=e:this.node.value=e}}const sd=(e,t,r)=>Fi(new rd(e,t,r)),id=(e,t,r,s)=>Fi(new rd(e,t,s,r));class nd extends rd{static get type(){return"MaterialReferenceNode"}constructor(e,t,r=null){super(e,t,r),this.material=r,this.isMaterialReferenceNode=!0}updateReference(e){return this.reference=null!==this.material?this.material:e.material,this.reference}}const od=(e,t,r=null)=>Fi(new nd(e,t,r)),ad=Di((e=>(!1===e.geometry.hasAttribute("tangent")&&e.geometry.computeTangents(),Iu("tangent","vec4"))))(),ud=ad.xyz.toVar("tangentLocal"),ld=Tl.mul(en(ud,0)).xyz.toVarying("v_tangentView").normalize().toVar("tangentView"),dd=ld.transformDirection(Ju).toVarying("v_tangentWorld").normalize().toVar("tangentWorld"),cd=ld.toVar("transformedTangentView"),hd=cd.transformDirection(Ju).normalize().toVar("transformedTangentWorld"),pd=e=>e.mul(ad.w).xyz,gd=Ya(pd(Il.cross(ad)),"v_bitangentGeometry").normalize().toVar("bitangentGeometry"),md=Ya(pd(Ll.cross(ud)),"v_bitangentLocal").normalize().toVar("bitangentLocal"),fd=Ya(pd(Vl.cross(ld)),"v_bitangentView").normalize().toVar("bitangentView"),yd=Ya(pd(Ul.cross(dd)),"v_bitangentWorld").normalize().toVar("bitangentWorld"),xd=pd(Ol.cross(cd)).normalize().toVar("transformedBitangentView"),bd=xd.transformDirection(Ju).normalize().toVar("transformedBitangentWorld"),Td=on(ld,fd,Vl),_d=Ml.mul(Td),vd=(()=>{let e=Vn.cross(Ml);return e=e.cross(Vn).normalize(),e=wa(e,Ol,Ln.mul(En.oneMinus()).oneMinus().pow2().pow2()).normalize(),e})(),Nd=Di((e=>{const{eye_pos:t,surf_norm:r,mapN:s,uv:i}=e,n=t.dFdx(),o=t.dFdy(),a=i.dFdx(),u=i.dFdy(),l=r,d=o.cross(l),c=l.cross(n),h=d.mul(a.x).add(c.mul(u.x)),p=d.mul(a.y).add(c.mul(u.y)),g=h.dot(h).max(p.dot(p)),m=Pl.mul(g.inverseSqrt());return ro(h.mul(s.x,m),p.mul(s.y,m),l.mul(s.z)).normalize()}));class Sd extends js{static get type(){return"NormalMapNode"}constructor(e,t=null){super("vec3"),this.node=e,this.scaleNode=t,this.normalMapType=A}setup(e){const{normalMapType:t,scaleNode:r}=this;let s=this.node.mul(2).sub(1);null!==r&&(s=Yi(s.xy.mul(r),s.z));let i=null;if(t===R)i=Wl(s);else if(t===A){i=!0===e.hasGeometryAttribute("tangent")?Td.mul(s).normalize():Nd({eye_pos:Cl,surf_norm:Vl,mapN:s,uv:Lu()})}return i}}const Ed=Ii(Sd),wd=Di((({textureNode:e,bumpScale:t})=>{const r=t=>e.cache().context({getUV:e=>t(e.uvNode||Lu()),forceUVContext:!0}),s=zi(r((e=>e)));return ji(zi(r((e=>e.add(e.dFdx())))).sub(s),zi(r((e=>e.add(e.dFdy())))).sub(s)).mul(t)})),Ad=Di((e=>{const{surf_pos:t,surf_norm:r,dHdxy:s}=e,i=t.dFdx().normalize(),n=r,o=t.dFdy().normalize().cross(n),a=n.cross(i),u=i.dot(o).mul(Pl),l=u.sign().mul(s.x.mul(o).add(s.y.mul(a)));return u.abs().mul(r).sub(l).normalize()}));class Rd extends js{static get type(){return"BumpMapNode"}constructor(e,t=null){super("vec3"),this.textureNode=e,this.scaleNode=t}setup(){const e=null!==this.scaleNode?this.scaleNode:1,t=wd({textureNode:this.textureNode,bumpScale:e});return Ad({surf_pos:Cl,surf_norm:Vl,dHdxy:t})}}const Cd=Ii(Rd),Md=new Map;class Fd extends Ws{static get type(){return"MaterialNode"}constructor(e){super(),this.scope=e}getCache(e,t){let r=Md.get(e);return void 0===r&&(r=od(e,t),Md.set(e,r)),r}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const t=e.context.material,r=this.scope;let s=null;if(r===Fd.COLOR){const e=void 0!==t.color?this.getColor(r):Yi();s=t.map&&!0===t.map.isTexture?e.mul(this.getTexture("map")):e}else if(r===Fd.OPACITY){const e=this.getFloat(r);s=t.alphaMap&&!0===t.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(r===Fd.SPECULAR_STRENGTH)s=t.specularMap&&!0===t.specularMap.isTexture?this.getTexture("specular").r:zi(1);else if(r===Fd.SPECULAR_INTENSITY){const e=this.getFloat(r);s=t.specularIntensityMap&&!0===t.specularIntensityMap.isTexture?e.mul(this.getTexture(r).a):e}else if(r===Fd.SPECULAR_COLOR){const e=this.getColor(r);s=t.specularColorMap&&!0===t.specularColorMap.isTexture?e.mul(this.getTexture(r).rgb):e}else if(r===Fd.ROUGHNESS){const e=this.getFloat(r);s=t.roughnessMap&&!0===t.roughnessMap.isTexture?e.mul(this.getTexture(r).g):e}else if(r===Fd.METALNESS){const e=this.getFloat(r);s=t.metalnessMap&&!0===t.metalnessMap.isTexture?e.mul(this.getTexture(r).b):e}else if(r===Fd.EMISSIVE){const e=this.getFloat("emissiveIntensity"),i=this.getColor(r).mul(e);s=t.emissiveMap&&!0===t.emissiveMap.isTexture?i.mul(this.getTexture(r)):i}else if(r===Fd.NORMAL)t.normalMap?(s=Ed(this.getTexture("normal"),this.getCache("normalScale","vec2")),s.normalMapType=t.normalMapType):s=t.bumpMap?Cd(this.getTexture("bump").r,this.getFloat("bumpScale")):Vl;else if(r===Fd.CLEARCOAT){const e=this.getFloat(r);s=t.clearcoatMap&&!0===t.clearcoatMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Fd.CLEARCOAT_ROUGHNESS){const e=this.getFloat(r);s=t.clearcoatRoughnessMap&&!0===t.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(r).r):e}else if(r===Fd.CLEARCOAT_NORMAL)s=t.clearcoatNormalMap?Ed(this.getTexture(r),this.getCache(r+"Scale","vec2")):Vl;else if(r===Fd.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));s=t.sheenColorMap&&!0===t.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(r===Fd.SHEEN_ROUGHNESS){const e=this.getFloat(r);s=t.sheenRoughnessMap&&!0===t.sheenRoughnessMap.isTexture?e.mul(this.getTexture(r).a):e,s=s.clamp(.07,1)}else if(r===Fd.ANISOTROPY)if(t.anisotropyMap&&!0===t.anisotropyMap.isTexture){const e=this.getTexture(r);s=nn(mc.x,mc.y,mc.y.negate(),mc.x).mul(e.rg.mul(2).sub(ji(1)).normalize().mul(e.b))}else s=mc;else if(r===Fd.IRIDESCENCE_THICKNESS){const e=sd("1","float",t.iridescenceThicknessRange);if(t.iridescenceThicknessMap){const i=sd("0","float",t.iridescenceThicknessRange);s=e.sub(i).mul(this.getTexture(r).g).add(i)}else s=e}else if(r===Fd.TRANSMISSION){const e=this.getFloat(r);s=t.transmissionMap?e.mul(this.getTexture(r).r):e}else if(r===Fd.THICKNESS){const e=this.getFloat(r);s=t.thicknessMap?e.mul(this.getTexture(r).g):e}else if(r===Fd.IOR)s=this.getFloat(r);else if(r===Fd.LIGHT_MAP)s=this.getTexture(r).rgb.mul(this.getFloat("lightMapIntensity"));else if(r===Fd.AO)s=this.getTexture(r).r.sub(1).mul(this.getFloat("aoMapIntensity")).add(1);else{const t=this.getNodeType(e);s=this.getCache(r,t)}return s}}Fd.ALPHA_TEST="alphaTest",Fd.COLOR="color",Fd.OPACITY="opacity",Fd.SHININESS="shininess",Fd.SPECULAR="specular",Fd.SPECULAR_STRENGTH="specularStrength",Fd.SPECULAR_INTENSITY="specularIntensity",Fd.SPECULAR_COLOR="specularColor",Fd.REFLECTIVITY="reflectivity",Fd.ROUGHNESS="roughness",Fd.METALNESS="metalness",Fd.NORMAL="normal",Fd.CLEARCOAT="clearcoat",Fd.CLEARCOAT_ROUGHNESS="clearcoatRoughness",Fd.CLEARCOAT_NORMAL="clearcoatNormal",Fd.EMISSIVE="emissive",Fd.ROTATION="rotation",Fd.SHEEN="sheen",Fd.SHEEN_ROUGHNESS="sheenRoughness",Fd.ANISOTROPY="anisotropy",Fd.IRIDESCENCE="iridescence",Fd.IRIDESCENCE_IOR="iridescenceIOR",Fd.IRIDESCENCE_THICKNESS="iridescenceThickness",Fd.IOR="ior",Fd.TRANSMISSION="transmission",Fd.THICKNESS="thickness",Fd.ATTENUATION_DISTANCE="attenuationDistance",Fd.ATTENUATION_COLOR="attenuationColor",Fd.LINE_SCALE="scale",Fd.LINE_DASH_SIZE="dashSize",Fd.LINE_GAP_SIZE="gapSize",Fd.LINE_WIDTH="linewidth",Fd.LINE_DASH_OFFSET="dashOffset",Fd.POINT_SIZE="size",Fd.DISPERSION="dispersion",Fd.LIGHT_MAP="light",Fd.AO="ao";const Bd=Li(Fd,Fd.ALPHA_TEST),Pd=Li(Fd,Fd.COLOR),Id=Li(Fd,Fd.SHININESS),Ld=Li(Fd,Fd.EMISSIVE),Dd=Li(Fd,Fd.OPACITY),Vd=Li(Fd,Fd.SPECULAR),Ud=Li(Fd,Fd.SPECULAR_INTENSITY),Od=Li(Fd,Fd.SPECULAR_COLOR),Gd=Li(Fd,Fd.SPECULAR_STRENGTH),kd=Li(Fd,Fd.REFLECTIVITY),zd=Li(Fd,Fd.ROUGHNESS),Wd=Li(Fd,Fd.METALNESS),$d=Li(Fd,Fd.NORMAL),Hd=Li(Fd,Fd.CLEARCOAT),jd=Li(Fd,Fd.CLEARCOAT_ROUGHNESS),qd=Li(Fd,Fd.CLEARCOAT_NORMAL),Xd=Li(Fd,Fd.ROTATION),Kd=Li(Fd,Fd.SHEEN),Yd=Li(Fd,Fd.SHEEN_ROUGHNESS),Qd=Li(Fd,Fd.ANISOTROPY),Zd=Li(Fd,Fd.IRIDESCENCE),Jd=Li(Fd,Fd.IRIDESCENCE_IOR),ec=Li(Fd,Fd.IRIDESCENCE_THICKNESS),tc=Li(Fd,Fd.TRANSMISSION),rc=Li(Fd,Fd.THICKNESS),sc=Li(Fd,Fd.IOR),ic=Li(Fd,Fd.ATTENUATION_DISTANCE),nc=Li(Fd,Fd.ATTENUATION_COLOR),oc=Li(Fd,Fd.LINE_SCALE),ac=Li(Fd,Fd.LINE_DASH_SIZE),uc=Li(Fd,Fd.LINE_GAP_SIZE),lc=Li(Fd,Fd.LINE_WIDTH),dc=Li(Fd,Fd.LINE_DASH_OFFSET),cc=Li(Fd,Fd.POINT_SIZE),hc=Li(Fd,Fd.DISPERSION),pc=Li(Fd,Fd.LIGHT_MAP),gc=Li(Fd,Fd.AO),mc=bn(new t).onReference((function(e){return e.material})).onRenderUpdate((function({material:e}){this.value.set(e.anisotropy*Math.cos(e.anisotropyRotation),e.anisotropy*Math.sin(e.anisotropyRotation))})),fc=Di((e=>e.context.setupModelViewProjection()),"vec4").once()().toVarying("v_modelViewProjection");class yc extends Ws{static get type(){return"IndexNode"}constructor(e){super("uint"),this.scope=e,this.isIndexNode=!0}generate(e){const t=this.getNodeType(e),r=this.scope;let s,i;if(r===yc.VERTEX)s=e.getVertexIndex();else if(r===yc.INSTANCE)s=e.getInstanceIndex();else if(r===yc.DRAW)s=e.getDrawIndex();else if(r===yc.INVOCATION_LOCAL)s=e.getInvocationLocalIndex();else if(r===yc.INVOCATION_SUBGROUP)s=e.getInvocationSubgroupIndex();else{if(r!==yc.SUBGROUP)throw new Error("THREE.IndexNode: Unknown scope: "+r);s=e.getSubgroupIndex()}if("vertex"===e.shaderStage||"compute"===e.shaderStage)i=s;else{i=Ya(this).build(e,t)}return i}}yc.VERTEX="vertex",yc.INSTANCE="instance",yc.SUBGROUP="subgroup",yc.INVOCATION_LOCAL="invocationLocal",yc.INVOCATION_SUBGROUP="invocationSubgroup",yc.DRAW="draw";const xc=Li(yc,yc.VERTEX),bc=Li(yc,yc.INSTANCE),Tc=Li(yc,yc.SUBGROUP),_c=Li(yc,yc.INVOCATION_SUBGROUP),vc=Li(yc,yc.INVOCATION_LOCAL),Nc=Li(yc,yc.DRAW);class Sc extends Ws{static get type(){return"InstanceNode"}constructor(e,t,r){super("void"),this.count=e,this.instanceMatrix=t,this.instanceColor=r,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=Ls.FRAME,this.buffer=null,this.bufferColor=null}setup(e){const{count:t,instanceMatrix:r,instanceColor:s}=this;let{instanceMatrixNode:i,instanceColorNode:n}=this;if(null===i){if(t<=1e3)i=$u(r.array,"mat4",Math.max(t,1)).element(bc);else{const e=new C(r.array,16,1);this.buffer=e;const t=r.usage===y?xu:yu,s=[t(e,"vec4",16,0),t(e,"vec4",16,4),t(e,"vec4",16,8),t(e,"vec4",16,12)];i=an(...s)}this.instanceMatrixNode=i}if(s&&null===n){const e=new M(s.array,3),t=s.usage===y?xu:yu;this.bufferColor=e,n=Yi(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=i.mul(El).xyz;if(El.assign(o),e.hasGeometryAttribute("normal")){const e=zl(Ll,i);Ll.assign(e)}null!==this.instanceColorNode&&vn("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMatrix.usage!==y&&null!==this.buffer&&this.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMatrix.version),this.instanceColor&&this.instanceColor.usage!==y&&null!==this.bufferColor&&this.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceColor.version)}}const Ec=Ii(Sc);class wc extends Sc{static get type(){return"InstancedMeshNode"}constructor(e){const{count:t,instanceMatrix:r,instanceColor:s}=e;super(t,r,s),this.instancedMesh=e}}const Ac=Ii(wc);class Rc extends Ws{static get type(){return"BatchNode"}constructor(e){super("void"),this.batchMesh=e,this.batchingIdNode=null}setup(e){null===this.batchingIdNode&&(null===e.getDrawIndex()?this.batchingIdNode=bc:this.batchingIdNode=Nc);const t=Di((([e])=>{const t=Wi(Vu(zu(this.batchMesh._indirectTexture),0)),r=Wi(e).modInt(t),s=Wi(e).div(t);return zu(this.batchMesh._indirectTexture,qi(r,s)).x})).setLayout({name:"getIndirectIndex",type:"uint",inputs:[{name:"id",type:"int"}]}),r=t(Wi(this.batchingIdNode)),s=this.batchMesh._matricesTexture,i=Vu(zu(s),0),n=zi(r).mul(4).toInt().toVar(),o=n.modInt(i),a=n.div(Wi(i)),u=an(zu(s,qi(o,a)),zu(s,qi(o.add(1),a)),zu(s,qi(o.add(2),a)),zu(s,qi(o.add(3),a))),l=this.batchMesh._colorsTexture;if(null!==l){const e=Di((([e])=>{const t=Vu(zu(l),0).x,r=e,s=r.modInt(t),i=r.div(t);return zu(l,qi(s,i)).rgb})).setLayout({name:"getBatchingColor",type:"vec3",inputs:[{name:"id",type:"int"}]}),t=e(r);vn("vec3","vBatchColor").assign(t)}const d=on(u);El.assign(u.mul(El));const c=Ll.div(Yi(d[0].dot(d[0]),d[1].dot(d[1]),d[2].dot(d[2]))),h=d.mul(c).xyz;Ll.assign(h),e.hasGeometryAttribute("tangent")&&ud.mulAssign(d)}}const Cc=Ii(Rc),Mc=new WeakMap;class Fc extends Ws{static get type(){return"SkinningNode"}constructor(e,t=!1){let r,s,i;super("void"),this.skinnedMesh=e,this.useReference=t,this.updateType=Ls.OBJECT,this.skinIndexNode=Iu("skinIndex","uvec4"),this.skinWeightNode=Iu("skinWeight","vec4"),t?(r=sd("bindMatrix","mat4"),s=sd("bindMatrixInverse","mat4"),i=id("skeleton.boneMatrices","mat4",e.skeleton.bones.length)):(r=bn(e.bindMatrix,"mat4"),s=bn(e.bindMatrixInverse,"mat4"),i=$u(e.skeleton.boneMatrices,"mat4",e.skeleton.bones.length)),this.bindMatrixNode=r,this.bindMatrixInverseNode=s,this.boneMatricesNode=i,this.previousBoneMatricesNode=null}getSkinnedPosition(e=this.boneMatricesNode,t=El){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w),d=i.mul(t),c=ro(o.mul(s.x).mul(d),a.mul(s.y).mul(d),u.mul(s.z).mul(d),l.mul(s.w).mul(d));return n.mul(c).xyz}getSkinnedNormal(e=this.boneMatricesNode,t=Ll){const{skinIndexNode:r,skinWeightNode:s,bindMatrixNode:i,bindMatrixInverseNode:n}=this,o=e.element(r.x),a=e.element(r.y),u=e.element(r.z),l=e.element(r.w);let d=ro(s.x.mul(o),s.y.mul(a),s.z.mul(u),s.w.mul(l));return d=n.mul(d).mul(i),d.transformDirection(t).xyz}getPreviousSkinnedPosition(e){const t=e.object;return null===this.previousBoneMatricesNode&&(t.skeleton.previousBoneMatrices=new Float32Array(t.skeleton.boneMatrices),this.previousBoneMatricesNode=id("skeleton.previousBoneMatrices","mat4",t.skeleton.bones.length)),this.getSkinnedPosition(this.previousBoneMatricesNode,wl)}needsPreviousBoneMatrices(e){const t=e.renderer.getMRT();return t&&t.has("velocity")||!0===Ms(e.object).useVelocity}setup(e){this.needsPreviousBoneMatrices(e)&&wl.assign(this.getPreviousSkinnedPosition(e));const t=this.getSkinnedPosition();if(El.assign(t),e.hasGeometryAttribute("normal")){const t=this.getSkinnedNormal();Ll.assign(t),e.hasGeometryAttribute("tangent")&&ud.assign(t)}}generate(e,t){if("void"!==t)return El.build(e,t)}update(e){const t=(this.useReference?e.object:this.skinnedMesh).skeleton;Mc.get(t)!==e.frameId&&(Mc.set(t,e.frameId),null!==this.previousBoneMatricesNode&&t.previousBoneMatrices.set(t.boneMatrices),t.update())}}const Bc=e=>Fi(new Fc(e,!0));class Pc extends Ws{static get type(){return"LoopNode"}constructor(e=[]){super(),this.params=e}getVarName(e){return String.fromCharCode("i".charCodeAt(0)+e)}getProperties(e){const t=e.getNodeProperties(this);if(void 0!==t.stackNode)return t;const r={};for(let e=0,t=this.params.length-1;e<t;e++){const t=this.params[e],s=!0!==t.isNode&&t.name||this.getVarName(e),i=!0!==t.isNode&&t.type||"int";r[s]=Cu(s,i)}const s=e.addStack();return t.returnsNode=this.params[this.params.length-1](r,s,e),t.stackNode=s,e.removeStack(),t}getNodeType(e){const{returnsNode:t}=this.getProperties(e);return t?t.getNodeType(e):"void"}setup(e){this.getProperties(e)}generate(e){const t=this.getProperties(e),r=this.params,s=t.stackNode;for(let t=0,s=r.length-1;t<s;t++){const s=r[t];let i=null,n=null,o=null,a=null,u=null,l=null;s.isNode?(a="int",o=this.getVarName(t),i="0",n=s.build(e,a),u="<"):(a=s.type||"int",o=s.name||this.getVarName(t),i=s.start,n=s.end,u=s.condition,l=s.update,"number"==typeof i?i=e.generateConst(a,i):i&&i.isNode&&(i=i.build(e,a)),"number"==typeof n?n=e.generateConst(a,n):n&&n.isNode&&(n=n.build(e,a)),void 0!==i&&void 0===n?(i+=" - 1",n="0",u=">="):void 0!==n&&void 0===i&&(i="0",u="<"),void 0===u&&(u=Number(i)>Number(n)?">=":"<"));const d={start:i,end:n},c=d.start,h=d.end;let p="",g="",m="";l||(l="int"===a||"uint"===a?u.includes("<")?"++":"--":u.includes("<")?"+= 1.":"-= 1."),p+=e.getVar(a,o)+" = "+c,g+=o+" "+u+" "+h,m+=o+" "+l;const f=`for ( ${p}; ${g}; ${m} )`;e.addFlowCode((0===t?"\n":"")+e.tab+f+" {\n\n").addFlowTab()}const i=s.build(e,"void"),n=t.returnsNode?t.returnsNode.build(e):"";e.removeFlowTab().addFlowCode("\n"+e.tab+i);for(let t=0,r=this.params.length-1;t<r;t++)e.addFlowCode((0===t?"":e.tab)+"}\n\n").removeFlowTab();return e.addFlowTab(),n}}const Ic=(...e)=>Fi(new Pc(Pi(e,"int"))).append(),Lc=()=>Cu("break").append(),Dc=new WeakMap,Vc=new s,Uc=Di((({bufferMap:e,influence:t,stride:r,width:s,depth:i,offset:n})=>{const o=Wi(xc).mul(r).add(n),a=o.div(s),u=o.sub(a.mul(s));return zu(e,qi(u,a)).depth(i).mul(t)}));class Oc extends Ws{static get type(){return"MorphNode"}constructor(e){super("void"),this.mesh=e,this.morphBaseInfluence=bn(1),this.updateType=Ls.OBJECT}setup(e){const{geometry:r}=e,s=void 0!==r.morphAttributes.position,i=r.hasAttribute("normal")&&void 0!==r.morphAttributes.normal,n=r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color,o=void 0!==n?n.length:0,{texture:a,stride:u,size:l}=function(e){const r=void 0!==e.morphAttributes.position,s=void 0!==e.morphAttributes.normal,i=void 0!==e.morphAttributes.color,n=e.morphAttributes.position||e.morphAttributes.normal||e.morphAttributes.color,o=void 0!==n?n.length:0;let a=Dc.get(e);if(void 0===a||a.count!==o){void 0!==a&&a.texture.dispose();const u=e.morphAttributes.position||[],l=e.morphAttributes.normal||[],d=e.morphAttributes.color||[];let c=0;!0===r&&(c=1),!0===s&&(c=2),!0===i&&(c=3);let h=e.attributes.position.count*c,p=1;const g=4096;h>g&&(p=Math.ceil(h/g),h=g);const m=new Float32Array(h*p*4*o),f=new F(m,h,p,o);f.type=B,f.needsUpdate=!0;const y=4*c;for(let b=0;b<o;b++){const T=u[b],_=l[b],v=d[b],N=h*p*4*b;for(let S=0;S<T.count;S++){const E=S*y;!0===r&&(Vc.fromBufferAttribute(T,S),m[N+E+0]=Vc.x,m[N+E+1]=Vc.y,m[N+E+2]=Vc.z,m[N+E+3]=0),!0===s&&(Vc.fromBufferAttribute(_,S),m[N+E+4]=Vc.x,m[N+E+5]=Vc.y,m[N+E+6]=Vc.z,m[N+E+7]=0),!0===i&&(Vc.fromBufferAttribute(v,S),m[N+E+8]=Vc.x,m[N+E+9]=Vc.y,m[N+E+10]=Vc.z,m[N+E+11]=4===v.itemSize?Vc.w:1)}}function x(){f.dispose(),Dc.delete(e),e.removeEventListener("dispose",x)}a={count:o,texture:f,stride:c,size:new t(h,p)},Dc.set(e,a),e.addEventListener("dispose",x)}return a}(r);!0===s&&El.mulAssign(this.morphBaseInfluence),!0===i&&Ll.mulAssign(this.morphBaseInfluence);const d=Wi(l.width);Ic(o,(({i:e})=>{const t=zi(0).toVar();this.mesh.count>1&&null!==this.mesh.morphTexture&&void 0!==this.mesh.morphTexture?t.assign(zu(this.mesh.morphTexture,qi(Wi(e).add(1),Wi(bc))).r):t.assign(sd("morphTargetInfluences","float").element(e).toVar()),!0===s&&El.addAssign(Uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Wi(0)})),!0===i&&Ll.addAssign(Uc({bufferMap:a,influence:t,stride:u,width:d,depth:e,offset:Wi(1)}))}))}update(){const e=this.morphBaseInfluence;this.mesh.geometry.morphTargetsRelative?e.value=1:e.value=1-this.mesh.morphTargetInfluences.reduce(((e,t)=>e+t),0)}}const Gc=Ii(Oc);class kc extends Ws{static get type(){return"LightingNode"}constructor(){super("vec3"),this.isLightingNode=!0}}class zc extends kc{static get type(){return"AONode"}constructor(e=null){super(),this.aoNode=e}setup(e){e.context.ambientOcclusion.mulAssign(this.aoNode)}}class Wc extends ka{static get type(){return"LightingContextNode"}constructor(e,t=null,r=null,s=null){super(e),this.lightingModel=t,this.backdropNode=r,this.backdropAlphaNode=s,this._value=null}getContext(){const{backdropNode:e,backdropAlphaNode:t}=this,r={directDiffuse:Yi().toVar("directDiffuse"),directSpecular:Yi().toVar("directSpecular"),indirectDiffuse:Yi().toVar("indirectDiffuse"),indirectSpecular:Yi().toVar("indirectSpecular")};return{radiance:Yi().toVar("radiance"),irradiance:Yi().toVar("irradiance"),iblIrradiance:Yi().toVar("iblIrradiance"),ambientOcclusion:zi(1).toVar("ambientOcclusion"),reflectedLight:r,backdrop:e,backdropAlpha:t}}setup(e){return this.value=this._value||(this._value=this.getContext()),this.value.lightingModel=this.lightingModel||e.context.lightingModel,super.setup(e)}}const $c=Ii(Wc);class Hc extends kc{static get type(){return"IrradianceNode"}constructor(e){super(),this.node=e}setup(e){e.context.irradiance.addAssign(this.node)}}let jc,qc;class Xc extends Ws{static get type(){return"ScreenNode"}constructor(e){super(),this.scope=e,this.isViewportNode=!0}getNodeType(){return this.scope===Xc.VIEWPORT?"vec4":"vec2"}getUpdateType(){let e=Ls.NONE;return this.scope!==Xc.SIZE&&this.scope!==Xc.VIEWPORT||(e=Ls.RENDER),this.updateType=e,e}update({renderer:e}){const t=e.getRenderTarget();this.scope===Xc.VIEWPORT?null!==t?qc.copy(t.viewport):(e.getViewport(qc),qc.multiplyScalar(e.getPixelRatio())):null!==t?(jc.width=t.width,jc.height=t.height):e.getDrawingBufferSize(jc)}setup(){const e=this.scope;let r=null;return r=e===Xc.SIZE?bn(jc||(jc=new t)):e===Xc.VIEWPORT?bn(qc||(qc=new s)):ji(Qc.div(Yc)),r}generate(e){if(this.scope===Xc.COORDINATE){let t=e.getFragCoord();if(e.isFlipY()){const r=e.getNodeProperties(Yc).outputNode.build(e);t=`${e.getType("vec2")}( ${t}.x, ${r}.y - ${t}.y )`}return t}return super.generate(e)}}Xc.COORDINATE="coordinate",Xc.VIEWPORT="viewport",Xc.SIZE="size",Xc.UV="uv";const Kc=Li(Xc,Xc.UV),Yc=Li(Xc,Xc.SIZE),Qc=Li(Xc,Xc.COORDINATE),Zc=Li(Xc,Xc.VIEWPORT),Jc=Zc.zw,eh=Qc.sub(Zc.xy),th=eh.div(Jc),rh=Di((()=>(console.warn('TSL.ViewportNode: "viewportResolution" is deprecated. Use "screenSize" instead.'),Yc)),"vec2").once()(),sh=Di((()=>(console.warn('TSL.ViewportNode: "viewportTopLeft" is deprecated. Use "screenUV" instead.'),Kc)),"vec2").once()(),ih=Di((()=>(console.warn('TSL.ViewportNode: "viewportBottomLeft" is deprecated. Use "screenUV.flipY()" instead.'),Kc.flipY())),"vec2").once()(),nh=new t;class oh extends Gu{static get type(){return"ViewportTextureNode"}constructor(e=Kc,t=null,r=null){null===r&&((r=new P).minFilter=I),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=Ls.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(nh);const r=this.value;r.image.width===nh.width&&r.image.height===nh.height||(r.image.width=nh.width,r.image.height=nh.height,r.needsUpdate=!0);const s=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=s}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}const ah=Ii(oh),uh=Ii(oh,null,null,{generateMipmaps:!0});let lh=null;class dh extends oh{static get type(){return"ViewportDepthTextureNode"}constructor(e=Kc,t=null){null===lh&&(lh=new L),super(e,t,lh)}}const ch=Ii(dh);class hh extends Ws{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===hh.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,r=this.valueNode;let s=null;if(t===hh.DEPTH_BASE)null!==r&&(s=yh().assign(r));else if(t===hh.DEPTH)s=e.isPerspectiveCamera?gh(Cl.z,Ku,Yu):ph(Cl.z,Ku,Yu);else if(t===hh.LINEAR_DEPTH)if(null!==r)if(e.isPerspectiveCamera){const e=mh(r,Ku,Yu);s=ph(e,Ku,Yu)}else s=r;else s=ph(Cl.z,Ku,Yu);return s}}hh.DEPTH_BASE="depthBase",hh.DEPTH="depth",hh.LINEAR_DEPTH="linearDepth";const ph=(e,t,r)=>e.add(t).div(t.sub(r)),gh=(e,t,r)=>t.add(e).mul(r).div(r.sub(t).mul(e)),mh=(e,t,r)=>t.mul(r).div(r.sub(t).mul(e).sub(r)),fh=(e,t,r)=>{t=t.max(1e-6).toVar();const s=Vo(e.negate().div(t)),i=Vo(r.div(t));return s.div(i)},yh=Ii(hh,hh.DEPTH_BASE),xh=Li(hh,hh.DEPTH),bh=Ii(hh,hh.LINEAR_DEPTH),Th=bh(ch());xh.assign=e=>yh(e);const _h=Ii(class extends Ws{constructor(e){super("float"),this.name=e,this.isBuiltinNode=!0}generate(){return this.name}});class vh extends Ws{static get type(){return"ClippingNode"}constructor(e=vh.DEFAULT){super(),this.scope=e}setup(e){super.setup(e);const t=e.clippingContext,{intersectionPlanes:r,unionPlanes:s}=t;return this.hardwareClipping=e.material.hardwareClipping,this.scope===vh.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(r,s):this.scope===vh.HARDWARE?this.setupHardwareClipping(s,e):this.setupDefault(r,s)}setupAlphaToCoverage(e,t){return Di((()=>{const r=zi().toVar("distanceToPlane"),s=zi().toVar("distanceToGradient"),i=zi(1).toVar("clipOpacity"),n=t.length;if(!1===this.hardwareClipping&&n>0){const e=qu(t);Ic(n,(({i:t})=>{const n=e.element(t);r.assign(Cl.dot(n.xyz).negate().add(n.w)),s.assign(r.fwidth().div(2)),i.mulAssign(Ma(s.negate(),s,r))}))}const o=e.length;if(o>0){const t=qu(e),n=zi(1).toVar("intersectionClipOpacity");Ic(o,(({i:e})=>{const i=t.element(e);r.assign(Cl.dot(i.xyz).negate().add(i.w)),s.assign(r.fwidth().div(2)),n.mulAssign(Ma(s.negate(),s,r).oneMinus())})),i.mulAssign(n.oneMinus())}Nn.a.mulAssign(i),Nn.a.equal(0).discard()}))()}setupDefault(e,t){return Di((()=>{const r=t.length;if(!1===this.hardwareClipping&&r>0){const e=qu(t);Ic(r,(({i:t})=>{const r=e.element(t);Cl.dot(r.xyz).greaterThan(r.w).discard()}))}const s=e.length;if(s>0){const t=qu(e),r=Hi(!0).toVar("clipped");Ic(s,(({i:e})=>{const s=t.element(e);r.assign(Cl.dot(s.xyz).greaterThan(s.w).and(r))})),r.discard()}}))()}setupHardwareClipping(e,t){const r=e.length;return t.enableHardwareClipping(r),Di((()=>{const s=qu(e),i=_h(t.getClipDistance());Ic(r,(({i:e})=>{const t=s.element(e),r=Cl.dot(t.xyz).sub(t.w).negate();i.element(e).assign(r)}))}))()}}vh.ALPHA_TO_COVERAGE="alphaToCoverage",vh.DEFAULT="default",vh.HARDWARE="hardware";const Nh=Di((([e])=>Wo(io(1e4,$o(io(17,e.x).add(io(.1,e.y)))).mul(ro(.1,Yo($o(io(13,e.y).add(e.x)))))))),Sh=Di((([e])=>Nh(ji(Nh(e.xy),e.z)))),Eh=Di((([e])=>{const t=ca(Zo(ta(e.xyz)),Zo(ra(e.xyz))),r=zi(1).div(zi(.05).mul(t)).toVar("pixScale"),s=ji(Lo(Go(Vo(r))),Lo(ko(Vo(r)))),i=ji(Sh(Go(s.x.mul(e.xyz))),Sh(Go(s.y.mul(e.xyz)))),n=Wo(Vo(r)),o=ro(io(n.oneMinus(),i.x),io(n,i.y)),a=da(n,n.oneMinus()),u=Yi(o.mul(o).div(io(2,a).mul(so(1,a))),o.sub(io(.5,a)).div(so(1,a)),so(1,so(1,o).mul(so(1,o)).div(io(2,a).mul(so(1,a))))),l=o.lessThan(a.oneMinus()).select(o.lessThan(a).select(u.x,u.y),u.z);return Aa(l,1e-6,1)})).setLayout({name:"getAlphaHashThreshold",type:"float",inputs:[{name:"position",type:"vec3"}]});class wh extends D{static get type(){return"NodeMaterial"}get type(){return this.constructor.type}set type(e){}constructor(){super(),this.isNodeMaterial=!0,this.fog=!0,this.lights=!1,this.hardwareClipping=!1,this.lightsNode=null,this.envNode=null,this.aoNode=null,this.colorNode=null,this.normalNode=null,this.opacityNode=null,this.backdropNode=null,this.backdropAlphaNode=null,this.alphaTestNode=null,this.positionNode=null,this.geometryNode=null,this.depthNode=null,this.shadowPositionNode=null,this.receivedShadowNode=null,this.castShadowNode=null,this.outputNode=null,this.mrtNode=null,this.fragmentNode=null,this.vertexNode=null}customProgramCacheKey(){return this.type+_s(this)}build(e){this.setup(e)}setupObserver(e){return new fs(e)}setup(e){e.context.setupNormal=()=>this.setupNormal(e),e.context.setupPositionView=()=>this.setupPositionView(e),e.context.setupModelViewProjection=()=>this.setupModelViewProjection(e);const t=e.renderer,r=t.getRenderTarget();e.addStack();const s=this.vertexNode||this.setupVertex(e);let i;e.stack.outputNode=s,this.setupHardwareClipping(e),null!==this.geometryNode&&(e.stack.outputNode=e.stack.outputNode.bypass(this.geometryNode)),e.addFlow("vertex",e.removeStack()),e.addStack();const n=this.setupClipping(e);if(!0!==this.depthWrite&&!0!==this.depthTest||(null!==r?!0===r.depthBuffer&&this.setupDepth(e):!0===t.depth&&this.setupDepth(e)),null===this.fragmentNode){this.setupDiffuseColor(e),this.setupVariants(e);const s=this.setupLighting(e);null!==n&&e.stack.add(n);const o=en(s,Nn.a).max(0);i=this.setupOutput(e,o),kn.assign(i);const a=null!==this.outputNode;if(a&&(i=this.outputNode),null!==r){const e=t.getMRT(),r=this.mrtNode;null!==e?(a&&kn.assign(i),i=e,null!==r&&(i=e.merge(r))):null!==r&&(i=r)}}else{let t=this.fragmentNode;!0!==t.isOutputStructNode&&(t=en(t)),i=this.setupOutput(e,t)}e.stack.outputNode=i,e.addFlow("fragment",e.removeStack()),e.observer=this.setupObserver(e)}setupClipping(e){if(null===e.clippingContext)return null;const{unionPlanes:t,intersectionPlanes:r}=e.clippingContext;let s=null;if(t.length>0||r.length>0){const t=e.renderer.samples;this.alphaToCoverage&&t>1?s=Fi(new vh(vh.ALPHA_TO_COVERAGE)):e.stack.add(Fi(new vh))}return s}setupHardwareClipping(e){if(this.hardwareClipping=!1,null===e.clippingContext)return;const t=e.clippingContext.unionPlanes.length;t>0&&t<=8&&e.isAvailable("clipDistance")&&(e.stack.add(Fi(new vh(vh.HARDWARE))),this.hardwareClipping=!0)}setupDepth(e){const{renderer:t,camera:r}=e;let s=this.depthNode;if(null===s){const e=t.getMRT();e&&e.has("depth")?s=e.get("depth"):!0===t.logarithmicDepthBuffer&&(s=r.isPerspectiveCamera?fh(Cl.z,Ku,Yu):ph(Cl.z,Ku,Yu))}null!==s&&xh.assign(s).append()}setupPositionView(){return Tl.mul(El).xyz}setupModelViewProjection(){return Qu.mul(Cl)}setupVertex(e){return e.addStack(),this.setupPosition(e),e.context.vertex=e.removeStack(),fc}setupPosition(e){const{object:t,geometry:r}=e;if((r.morphAttributes.position||r.morphAttributes.normal||r.morphAttributes.color)&&Gc(t).append(),!0===t.isSkinnedMesh&&Bc(t).append(),this.displacementMap){const e=od("displacementMap","texture"),t=od("displacementScale","float"),r=od("displacementBias","float");El.addAssign(Ll.normalize().mul(e.x.mul(t).add(r)))}return t.isBatchedMesh&&Cc(t).append(),t.isInstancedMesh&&t.instanceMatrix&&!0===t.instanceMatrix.isInstancedBufferAttribute&&Ac(t).append(),null!==this.positionNode&&El.assign(this.positionNode.context({isPositionNodeInput:!0})),El}setupDiffuseColor({object:e,geometry:t}){let r=this.colorNode?en(this.colorNode):Pd;if(!0===this.vertexColors&&t.hasAttribute("color")&&(r=en(r.xyz.mul(Iu("color","vec3")),r.a)),e.instanceColor){r=vn("vec3","vInstanceColor").mul(r)}if(e.isBatchedMesh&&e._colorsTexture){r=vn("vec3","vBatchColor").mul(r)}Nn.assign(r);const s=this.opacityNode?zi(this.opacityNode):Dd;if(Nn.a.assign(Nn.a.mul(s)),null!==this.alphaTestNode||this.alphaTest>0){const e=null!==this.alphaTestNode?zi(this.alphaTestNode):Bd;Nn.a.lessThanEqual(e).discard()}!0===this.alphaHash&&Nn.a.lessThan(Eh(El)).discard(),!1===this.transparent&&this.blending===V&&!1===this.alphaToCoverage&&Nn.a.assign(1)}setupVariants(){}setupOutgoingLight(){return!0===this.lights?Yi(0):Nn.rgb}setupNormal(){return this.normalNode?Yi(this.normalNode):$d}setupEnvironment(){let e=null;return this.envNode?e=this.envNode:this.envMap&&(e=this.envMap.isCubeTexture?od("envMap","cubeTexture"):od("envMap","texture")),e}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Hc(pc)),t}setupLights(e){const t=[],r=this.setupEnvironment(e);r&&r.isLightingNode&&t.push(r);const s=this.setupLightMap(e);if(s&&s.isLightingNode&&t.push(s),null!==this.aoNode||e.material.aoMap){const e=null!==this.aoNode?this.aoNode:gc;t.push(new zc(e))}let i=this.lightsNode||e.lightsNode;return t.length>0&&(i=e.renderer.lighting.createNode([...i.getLights(),...t])),i}setupLightingModel(){}setupLighting(e){const{material:t}=e,{backdropNode:r,backdropAlphaNode:s,emissiveNode:i}=this,n=!0===this.lights||null!==this.lightsNode?this.setupLights(e):null;let o=this.setupOutgoingLight(e);if(n&&n.getScope().hasLights){const t=this.setupLightingModel(e)||null;o=$c(n,t,r,s)}else null!==r&&(o=Yi(null!==s?wa(o,r,s):r));return(i&&!0===i.isNode||t.emissive&&!0===t.emissive.isColor)&&(Sn.assign(Yi(i||Ld)),o=o.add(Sn)),o}setupFog(e,t){const r=e.fogNode;return r&&(kn.assign(t),t=en(r)),t}setupOutput(e,t){return!0===this.fog&&(t=this.setupFog(e,t)),t}setDefaultValues(e){for(const t in e){const r=e[t];void 0===this[t]&&(this[t]=r,r&&r.clone&&(this[t]=r.clone()))}const t=Object.getOwnPropertyDescriptors(e.constructor.prototype);for(const e in t)void 0===Object.getOwnPropertyDescriptor(this.constructor.prototype,e)&&void 0!==t[e].get&&Object.defineProperty(this.constructor.prototype,e,t[e])}toJSON(e){const t=void 0===e||"string"==typeof e;t&&(e={textures:{},images:{},nodes:{}});const r=D.prototype.toJSON.call(this,e),s=vs(this);r.inputNodes={};for(const{property:t,childNode:i}of s)r.inputNodes[t]=i.toJSON(e).uuid;function i(e){const t=[];for(const r in e){const s=e[r];delete s.metadata,t.push(s)}return t}if(t){const t=i(e.textures),s=i(e.images),n=i(e.nodes);t.length>0&&(r.textures=t),s.length>0&&(r.images=s),n.length>0&&(r.nodes=n)}return r}copy(e){return this.lightsNode=e.lightsNode,this.envNode=e.envNode,this.colorNode=e.colorNode,this.normalNode=e.normalNode,this.opacityNode=e.opacityNode,this.backdropNode=e.backdropNode,this.backdropAlphaNode=e.backdropAlphaNode,this.alphaTestNode=e.alphaTestNode,this.positionNode=e.positionNode,this.geometryNode=e.geometryNode,this.depthNode=e.depthNode,this.shadowPositionNode=e.shadowPositionNode,this.receivedShadowNode=e.receivedShadowNode,this.castShadowNode=e.castShadowNode,this.outputNode=e.outputNode,this.mrtNode=e.mrtNode,this.fragmentNode=e.fragmentNode,this.vertexNode=e.vertexNode,super.copy(e)}}const Ah=new U;class Rh extends wh{static get type(){return"LineBasicNodeMaterial"}constructor(e){super(),this.isLineBasicNodeMaterial=!0,this.setDefaultValues(Ah),this.setValues(e)}}const Ch=new O;class Mh extends wh{static get type(){return"LineDashedNodeMaterial"}constructor(e){super(),this.isLineDashedNodeMaterial=!0,this.setDefaultValues(Ch),this.dashOffset=0,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setValues(e)}setupVariants(){const e=this.offsetNode?zi(this.offsetNode):dc,t=this.dashScaleNode?zi(this.dashScaleNode):oc,r=this.dashSizeNode?zi(this.dashSizeNode):ac,s=this.gapSizeNode?zi(this.gapSizeNode):uc;zn.assign(r),Wn.assign(s);const i=Ya(Iu("lineDistance").mul(t));(e?i.add(e):i).mod(zn.add(Wn)).greaterThan(zn).discard()}}let Fh=null;class Bh extends oh{static get type(){return"ViewportSharedTextureNode"}constructor(e=Kc,t=null){null===Fh&&(Fh=new P),super(e,t,Fh)}updateReference(){return this}}const Ph=Ii(Bh),Ih=new O;class Lh extends wh{static get type(){return"Line2NodeMaterial"}constructor(e={}){super(),this.isLine2NodeMaterial=!0,this.setDefaultValues(Ih),this.useColor=e.vertexColors,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.blending=G,this._useDash=e.dashed,this._useAlphaToCoverage=!0,this._useWorldUnits=!1,this.setValues(e)}setup(e){const{renderer:t}=e,r=this._useAlphaToCoverage,s=this.useColor,i=this._useDash,n=this._useWorldUnits,o=Di((({start:e,end:t})=>{const r=Qu.element(2).element(2),s=Qu.element(3).element(2).mul(-.5).div(r).sub(e.z).div(t.z.sub(e.z));return en(wa(e.xyz,t.xyz,s),t.w)})).setLayout({name:"trimSegment",type:"vec4",inputs:[{name:"start",type:"vec4"},{name:"end",type:"vec4"}]});this.vertexNode=Di((()=>{const e=Iu("instanceStart"),t=Iu("instanceEnd"),r=en(Tl.mul(en(e,1))).toVar("start"),s=en(Tl.mul(en(t,1))).toVar("end");if(i){const e=this.dashScaleNode?zi(this.dashScaleNode):oc,t=this.offsetNode?zi(this.offsetNode):dc,r=Iu("instanceDistanceStart"),s=Iu("instanceDistanceEnd");let i=Sl.y.lessThan(.5).select(e.mul(r),e.mul(s));i=i.add(t),vn("float","lineDistance").assign(i)}n&&(vn("vec3","worldStart").assign(r.xyz),vn("vec3","worldEnd").assign(s.xyz));const a=Zc.z.div(Zc.w),u=Qu.element(2).element(3).equal(-1);Oi(u,(()=>{Oi(r.z.lessThan(0).and(s.z.greaterThan(0)),(()=>{s.assign(o({start:r,end:s}))})).ElseIf(s.z.lessThan(0).and(r.z.greaterThanEqual(0)),(()=>{r.assign(o({start:s,end:r}))}))}));const l=Qu.mul(r),d=Qu.mul(s),c=l.xyz.div(l.w),h=d.xyz.div(d.w),p=h.xy.sub(c.xy).toVar();p.x.assign(p.x.mul(a)),p.assign(p.normalize());const g=en().toVar();if(n){const e=s.xyz.sub(r.xyz).normalize(),t=wa(r.xyz,s.xyz,.5).normalize(),n=e.cross(t).normalize(),o=e.cross(n),a=vn("vec4","worldPos");a.assign(Sl.y.lessThan(.5).select(r,s));const u=lc.mul(.5);a.addAssign(en(Sl.x.lessThan(0).select(n.mul(u),n.mul(u).negate()),0)),i||(a.addAssign(en(Sl.y.lessThan(.5).select(e.mul(u).negate(),e.mul(u)),0)),a.addAssign(en(o.mul(u),0)),Oi(Sl.y.greaterThan(1).or(Sl.y.lessThan(0)),(()=>{a.subAssign(en(o.mul(2).mul(u),0))}))),g.assign(Qu.mul(a));const l=Yi().toVar();l.assign(Sl.y.lessThan(.5).select(c,h)),g.z.assign(l.z.mul(g.w))}else{const e=ji(p.y,p.x.negate()).toVar("offset");p.x.assign(p.x.div(a)),e.x.assign(e.x.div(a)),e.assign(Sl.x.lessThan(0).select(e.negate(),e)),Oi(Sl.y.lessThan(0),(()=>{e.assign(e.sub(p))})).ElseIf(Sl.y.greaterThan(1),(()=>{e.assign(e.add(p))})),e.assign(e.mul(lc)),e.assign(e.div(Zc.w)),g.assign(Sl.y.lessThan(.5).select(l,d)),e.assign(e.mul(g.w)),g.assign(g.add(en(e,0,0)))}return g}))();const a=Di((({p1:e,p2:t,p3:r,p4:s})=>{const i=e.sub(r),n=s.sub(r),o=t.sub(e),a=i.dot(n),u=n.dot(o),l=i.dot(o),d=n.dot(n),c=o.dot(o).mul(d).sub(u.mul(u)),h=a.mul(u).sub(l.mul(d)).div(c).clamp(),p=a.add(u.mul(h)).div(d).clamp();return ji(h,p)}));if(this.colorNode=Di((()=>{const e=Lu();if(i){const t=this.dashSizeNode?zi(this.dashSizeNode):ac,r=this.gapSizeNode?zi(this.gapSizeNode):uc;zn.assign(t),Wn.assign(r);const s=vn("float","lineDistance");e.y.lessThan(-1).or(e.y.greaterThan(1)).discard(),s.mod(zn.add(Wn)).greaterThan(zn).discard()}const o=zi(1).toVar("alpha");if(n){const e=vn("vec3","worldStart"),s=vn("vec3","worldEnd"),n=vn("vec4","worldPos").xyz.normalize().mul(1e5),u=s.sub(e),l=a({p1:e,p2:s,p3:Yi(0,0,0),p4:n}),d=e.add(u.mul(l.x)),c=n.mul(l.y),h=d.sub(c).length().div(lc);if(!i)if(r&&t.samples>1){const e=h.fwidth();o.assign(Ma(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(r&&t.samples>1){const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1)),s=t.mul(t).add(r.mul(r)),i=zi(s.fwidth()).toVar("dlen");Oi(e.y.abs().greaterThan(1),(()=>{o.assign(Ma(i.oneMinus(),i.add(1),s).oneMinus())}))}else Oi(e.y.abs().greaterThan(1),(()=>{const t=e.x,r=e.y.greaterThan(0).select(e.y.sub(1),e.y.add(1));t.mul(t).add(r.mul(r)).greaterThan(1).discard()}));let u;if(this.lineColorNode)u=this.lineColorNode;else if(s){const e=Iu("instanceColorStart"),t=Iu("instanceColorEnd");u=Sl.y.lessThan(.5).select(e,t).mul(Pd)}else u=Pd;return en(u,o)}))(),this.transparent){const e=this.opacityNode?zi(this.opacityNode):Dd;this.outputNode=en(this.colorNode.rgb.mul(e).add(Ph().rgb.mul(e.oneMinus())),this.colorNode.a)}super.setup(e)}get worldUnits(){return this._useWorldUnits}set worldUnits(e){this._useWorldUnits!==e&&(this._useWorldUnits=e,this.needsUpdate=!0)}get dashed(){return this._useDash}set dashed(e){this._useDash!==e&&(this._useDash=e,this.needsUpdate=!0)}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}const Dh=e=>Fi(e).mul(.5).add(.5),Vh=new k;class Uh extends wh{static get type(){return"MeshNormalNodeMaterial"}constructor(e){super(),this.isMeshNormalNodeMaterial=!0,this.setDefaultValues(Vh),this.setValues(e)}setupDiffuseColor(){const e=this.opacityNode?zi(this.opacityNode):Dd;Nn.assign(ou(en(Dh(Ol),e),z))}}class Oh extends js{static get type(){return"EquirectUVNode"}constructor(e=Rl){super("vec2"),this.dirNode=e}setup(){const e=this.dirNode,t=e.z.atan(e.x).mul(1/(2*Math.PI)).add(.5),r=e.y.clamp(-1,1).asin().mul(1/Math.PI).add(.5);return ji(t,r)}}const Gh=Ii(Oh);class kh extends W{constructor(e=1,t={}){super(e,t),this.isCubeRenderTarget=!0}fromEquirectangularTexture(e,t){const r=t.minFilter,s=t.generateMipmaps;t.generateMipmaps=!0,this.texture.type=t.type,this.texture.colorSpace=t.colorSpace,this.texture.generateMipmaps=t.generateMipmaps,this.texture.minFilter=t.minFilter,this.texture.magFilter=t.magFilter;const i=new $(5,5,5),n=Gh(Rl),o=new wh;o.colorNode=ku(t,n,0),o.side=N,o.blending=G;const a=new H(i,o),u=new j;u.add(a),t.minFilter===I&&(t.minFilter=q);const l=new X(1,10,this),d=e.getMRT();return e.setMRT(null),l.update(e,u),e.setMRT(d),t.minFilter=r,t.currentGenerateMipmaps=s,a.geometry.dispose(),a.material.dispose(),this}}const zh=new WeakMap;class Wh extends js{static get type(){return"CubeMapNode"}constructor(e){super("vec3"),this.envNode=e,this._cubeTexture=null,this._cubeTextureNode=ed();const t=new K;t.isRenderTargetTexture=!0,this._defaultTexture=t,this.updateBeforeType=Ls.RENDER}updateBefore(e){const{renderer:t,material:r}=e,s=this.envNode;if(s.isTextureNode||s.isMaterialReferenceNode){const e=s.isTextureNode?s.value:r[s.property];if(e&&e.isTexture){const r=e.mapping;if(r===Y||r===Q){if(zh.has(e)){const t=zh.get(e);Hh(t,e.mapping),this._cubeTexture=t}else{const r=e.image;if(function(e){return null!=e&&e.height>0}(r)){const s=new kh(r.height);s.fromEquirectangularTexture(t,e),Hh(s.texture,e.mapping),this._cubeTexture=s.texture,zh.set(e,s.texture),e.addEventListener("dispose",$h)}else this._cubeTexture=this._defaultTexture}this._cubeTextureNode.value=this._cubeTexture}else this._cubeTextureNode=this.envNode}}}setup(e){return this.updateBefore(e),this._cubeTextureNode}}function $h(e){const t=e.target;t.removeEventListener("dispose",$h);const r=zh.get(t);void 0!==r&&(zh.delete(t),r.dispose())}function Hh(e,t){t===Y?e.mapping=E:t===Q&&(e.mapping=w)}const jh=Ii(Wh);class qh extends kc{static get type(){return"BasicEnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){e.context.environment=jh(this.envNode)}}class Xh extends kc{static get type(){return"BasicLightMapNode"}constructor(e=null){super(),this.lightMapNode=e}setup(e){const t=zi(1/Math.PI);e.context.irradianceLightMap=this.lightMapNode.mul(t)}}class Kh{start(e){e.lightsNode.setupLights(e,e.lightsNode.getLightNodes(e)),this.indirect(e)}finish(){}direct(){}directRectArea(){}indirect(){}ambientOcclusion(){}}class Yh extends Kh{constructor(){super()}indirect({context:e}){const t=e.ambientOcclusion,r=e.reflectedLight,s=e.irradianceLightMap;r.indirectDiffuse.assign(en(0)),s?r.indirectDiffuse.addAssign(s):r.indirectDiffuse.addAssign(en(1,1,1,0)),r.indirectDiffuse.mulAssign(t),r.indirectDiffuse.mulAssign(Nn.rgb)}finish(e){const{material:t,context:r}=e,s=r.outgoingLight,i=e.context.environment;if(i)switch(t.combine){case ee:s.rgb.assign(wa(s.rgb,s.rgb.mul(i.rgb),Gd.mul(kd)));break;case J:s.rgb.assign(wa(s.rgb,i.rgb,Gd.mul(kd)));break;case Z:s.rgb.addAssign(i.rgb.mul(Gd.mul(kd)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",t.combine)}}}const Qh=new te;class Zh extends wh{static get type(){return"MeshBasicNodeMaterial"}constructor(e){super(),this.isMeshBasicNodeMaterial=!0,this.lights=!0,this.setDefaultValues(Qh),this.setValues(e)}setupNormal(){return Vl}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new qh(t):null}setupLightMap(e){let t=null;return e.material.lightMap&&(t=new Xh(pc)),t}setupOutgoingLight(){return Nn.rgb}setupLightingModel(){return new Yh}}const Jh=Di((({f0:e,f90:t,dotVH:r})=>{const s=r.mul(-5.55473).sub(6.98316).mul(r).exp2();return e.mul(s.oneMinus()).add(t.mul(s))})),ep=Di((e=>e.diffuseColor.mul(1/Math.PI))),tp=Di((({dotNH:e})=>Gn.mul(zi(.5)).add(1).mul(zi(1/Math.PI)).mul(e.pow(Gn)))),rp=Di((({lightDirection:e})=>{const t=e.add(Ml).normalize(),r=Ol.dot(t).clamp(),s=Ml.dot(t).clamp(),i=Jh({f0:Un,f90:1,dotVH:s}),n=zi(.25),o=tp({dotNH:r});return i.mul(n).mul(o)}));class sp extends Yh{constructor(e=!0){super(),this.specular=e}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Ol.dot(e).clamp().mul(t);r.directDiffuse.addAssign(s.mul(ep({diffuseColor:Nn.rgb}))),!0===this.specular&&r.directSpecular.addAssign(s.mul(rp({lightDirection:e})).mul(Gd))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(ep({diffuseColor:Nn}))),s.indirectDiffuse.mulAssign(t)}}const ip=new re;class np extends wh{static get type(){return"MeshLambertNodeMaterial"}constructor(e){super(),this.isMeshLambertNodeMaterial=!0,this.lights=!0,this.setDefaultValues(ip),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new qh(t):null}setupLightingModel(){return new sp(!1)}}const op=new se;class ap extends wh{static get type(){return"MeshPhongNodeMaterial"}constructor(e){super(),this.isMeshPhongNodeMaterial=!0,this.lights=!0,this.shininessNode=null,this.specularNode=null,this.setDefaultValues(op),this.setValues(e)}setupEnvironment(e){const t=super.setupEnvironment(e);return t?new qh(t):null}setupLightingModel(){return new sp}setupVariants(){const e=(this.shininessNode?zi(this.shininessNode):Id).max(1e-4);Gn.assign(e);const t=this.specularNode||Vd;Un.assign(t)}copy(e){return this.shininessNode=e.shininessNode,this.specularNode=e.specularNode,super.copy(e)}}const up=Di((e=>{if(!1===e.geometry.hasAttribute("normal"))return zi(0);const t=Vl.dFdx().abs().max(Vl.dFdy().abs());return t.x.max(t.y).max(t.z)})),lp=Di((e=>{const{roughness:t}=e,r=up();let s=t.max(.0525);return s=s.add(r),s=s.min(1),s})),dp=Di((({alpha:e,dotNL:t,dotNV:r})=>{const s=e.pow2(),i=t.mul(s.add(s.oneMinus().mul(r.pow2())).sqrt()),n=r.mul(s.add(s.oneMinus().mul(t.pow2())).sqrt());return no(.5,i.add(n).max(wo))})).setLayout({name:"V_GGX_SmithCorrelated",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNL",type:"float"},{name:"dotNV",type:"float"}]}),cp=Di((({alphaT:e,alphaB:t,dotTV:r,dotBV:s,dotTL:i,dotBL:n,dotNV:o,dotNL:a})=>{const u=a.mul(Yi(e.mul(r),t.mul(s),o).length()),l=o.mul(Yi(e.mul(i),t.mul(n),a).length());return no(.5,u.add(l)).saturate()})).setLayout({name:"V_GGX_SmithCorrelated_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotTV",type:"float",qualifier:"in"},{name:"dotBV",type:"float",qualifier:"in"},{name:"dotTL",type:"float",qualifier:"in"},{name:"dotBL",type:"float",qualifier:"in"},{name:"dotNV",type:"float",qualifier:"in"},{name:"dotNL",type:"float",qualifier:"in"}]}),hp=Di((({alpha:e,dotNH:t})=>{const r=e.pow2(),s=t.pow2().mul(r.oneMinus()).oneMinus();return r.div(s.pow2()).mul(1/Math.PI)})).setLayout({name:"D_GGX",type:"float",inputs:[{name:"alpha",type:"float"},{name:"dotNH",type:"float"}]}),pp=zi(1/Math.PI),gp=Di((({alphaT:e,alphaB:t,dotNH:r,dotTH:s,dotBH:i})=>{const n=e.mul(t),o=Yi(t.mul(s),e.mul(i),n.mul(r)),a=o.dot(o),u=n.div(a);return pp.mul(n.mul(u.pow2()))})).setLayout({name:"D_GGX_Anisotropic",type:"float",inputs:[{name:"alphaT",type:"float",qualifier:"in"},{name:"alphaB",type:"float",qualifier:"in"},{name:"dotNH",type:"float",qualifier:"in"},{name:"dotTH",type:"float",qualifier:"in"},{name:"dotBH",type:"float",qualifier:"in"}]}),mp=Di((e=>{const{lightDirection:t,f0:r,f90:s,roughness:i,f:n,USE_IRIDESCENCE:o,USE_ANISOTROPY:a}=e,u=e.normalView||Ol,l=i.pow2(),d=t.add(Ml).normalize(),c=u.dot(t).clamp(),h=u.dot(Ml).clamp(),p=u.dot(d).clamp(),g=Ml.dot(d).clamp();let m,f,y=Jh({f0:r,f90:s,dotVH:g});if(Ri(o)&&(y=Fn.mix(y,n)),Ri(a)){const e=Dn.dot(t),r=Dn.dot(Ml),s=Dn.dot(d),i=Vn.dot(t),n=Vn.dot(Ml),o=Vn.dot(d);m=cp({alphaT:In,alphaB:l,dotTV:r,dotBV:n,dotTL:e,dotBL:i,dotNV:h,dotNL:c}),f=gp({alphaT:In,alphaB:l,dotNH:p,dotTH:s,dotBH:o})}else m=dp({alpha:l,dotNL:c,dotNV:h}),f=hp({alpha:l,dotNH:p});return y.mul(m).mul(f)})),fp=Di((({roughness:e,dotNV:t})=>{const r=en(-1,-.0275,-.572,.022),s=en(1,.0425,1.04,-.04),i=e.mul(r).add(s),n=i.x.mul(i.x).min(t.mul(-9.28).exp2()).mul(i.x).add(i.y);return ji(-1.04,1.04).mul(n).add(i.zw)})).setLayout({name:"DFGApprox",type:"vec2",inputs:[{name:"roughness",type:"float"},{name:"dotNV",type:"vec3"}]}),yp=Di((e=>{const{dotNV:t,specularColor:r,specularF90:s,roughness:i}=e,n=fp({dotNV:t,roughness:i});return r.mul(n.x).add(s.mul(n.y))})),xp=Di((({f:e,f90:t,dotVH:r})=>{const s=r.oneMinus().saturate(),i=s.mul(s),n=s.mul(i,i).clamp(0,.9999);return e.sub(Yi(t).mul(n)).div(n.oneMinus())})).setLayout({name:"Schlick_to_F0",type:"vec3",inputs:[{name:"f",type:"vec3"},{name:"f90",type:"float"},{name:"dotVH",type:"float"}]}),bp=Di((({roughness:e,dotNH:t})=>{const r=e.pow2(),s=zi(1).div(r),i=t.pow2().oneMinus().max(.0078125);return zi(2).add(s).mul(i.pow(s.mul(.5))).div(2*Math.PI)})).setLayout({name:"D_Charlie",type:"float",inputs:[{name:"roughness",type:"float"},{name:"dotNH",type:"float"}]}),Tp=Di((({dotNV:e,dotNL:t})=>zi(1).div(zi(4).mul(t.add(e).sub(t.mul(e)))))).setLayout({name:"V_Neubelt",type:"float",inputs:[{name:"dotNV",type:"float"},{name:"dotNL",type:"float"}]}),_p=Di((({lightDirection:e})=>{const t=e.add(Ml).normalize(),r=Ol.dot(e).clamp(),s=Ol.dot(Ml).clamp(),i=Ol.dot(t).clamp(),n=bp({roughness:Mn,dotNH:i}),o=Tp({dotNV:s,dotNL:r});return Cn.mul(n).mul(o)})),vp=Di((({N:e,V:t,roughness:r})=>{const s=e.dot(t).saturate(),i=ji(r,s.oneMinus().sqrt());return i.assign(i.mul(.984375).add(.0078125)),i})).setLayout({name:"LTC_Uv",type:"vec2",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"roughness",type:"float"}]}),Np=Di((({f:e})=>{const t=e.length();return ca(t.mul(t).add(e.z).div(t.add(1)),0)})).setLayout({name:"LTC_ClippedSphereFormFactor",type:"float",inputs:[{name:"f",type:"vec3"}]}),Sp=Di((({v1:e,v2:t})=>{const r=e.dot(t),s=r.abs().toVar(),i=s.mul(.0145206).add(.4965155).mul(s).add(.8543985).toVar(),n=s.add(4.1616724).mul(s).add(3.417594).toVar(),o=i.div(n),a=r.greaterThan(0).select(o,ca(r.mul(r).oneMinus(),1e-7).inverseSqrt().mul(.5).sub(o));return e.cross(t).mul(a)})).setLayout({name:"LTC_EdgeVectorFormFactor",type:"vec3",inputs:[{name:"v1",type:"vec3"},{name:"v2",type:"vec3"}]}),Ep=Di((({N:e,V:t,P:r,mInv:s,p0:i,p1:n,p2:o,p3:a})=>{const u=n.sub(i).toVar(),l=a.sub(i).toVar(),d=u.cross(l),c=Yi().toVar();return Oi(d.dot(r.sub(i)).greaterThanEqual(0),(()=>{const u=t.sub(e.mul(t.dot(e))).normalize(),l=e.cross(u).negate(),d=s.mul(on(u,l,e).transpose()).toVar(),h=d.mul(i.sub(r)).normalize().toVar(),p=d.mul(n.sub(r)).normalize().toVar(),g=d.mul(o.sub(r)).normalize().toVar(),m=d.mul(a.sub(r)).normalize().toVar(),f=Yi(0).toVar();f.addAssign(Sp({v1:h,v2:p})),f.addAssign(Sp({v1:p,v2:g})),f.addAssign(Sp({v1:g,v2:m})),f.addAssign(Sp({v1:m,v2:h})),c.assign(Yi(Np({f:f})))})),c})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"N",type:"vec3"},{name:"V",type:"vec3"},{name:"P",type:"vec3"},{name:"mInv",type:"mat3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),wp=Di((({P:e,p0:t,p1:r,p2:s,p3:i})=>{const n=r.sub(t).toVar(),o=i.sub(t).toVar(),a=n.cross(o),u=Yi().toVar();return Oi(a.dot(e.sub(t)).greaterThanEqual(0),(()=>{const n=t.sub(e).normalize().toVar(),o=r.sub(e).normalize().toVar(),a=s.sub(e).normalize().toVar(),l=i.sub(e).normalize().toVar(),d=Yi(0).toVar();d.addAssign(Sp({v1:n,v2:o})),d.addAssign(Sp({v1:o,v2:a})),d.addAssign(Sp({v1:a,v2:l})),d.addAssign(Sp({v1:l,v2:n})),u.assign(Yi(Np({f:d.abs()})))})),u})).setLayout({name:"LTC_Evaluate",type:"vec3",inputs:[{name:"P",type:"vec3"},{name:"p0",type:"vec3"},{name:"p1",type:"vec3"},{name:"p2",type:"vec3"},{name:"p3",type:"vec3"}]}),Ap=1/6,Rp=e=>io(Ap,io(e,io(e,e.negate().add(3)).sub(3)).add(1)),Cp=e=>io(Ap,io(e,io(e,io(3,e).sub(6))).add(4)),Mp=e=>io(Ap,io(e,io(e,io(-3,e).add(3)).add(3)).add(1)),Fp=e=>io(Ap,ba(e,3)),Bp=e=>Rp(e).add(Cp(e)),Pp=e=>Mp(e).add(Fp(e)),Ip=e=>ro(-1,Cp(e).div(Rp(e).add(Cp(e)))),Lp=e=>ro(1,Fp(e).div(Mp(e).add(Fp(e)))),Dp=(e,t,r)=>{const s=e.uvNode,i=io(s,t.zw).add(.5),n=Go(i),o=Wo(i),a=Bp(o.x),u=Pp(o.x),l=Ip(o.x),d=Lp(o.x),c=Ip(o.y),h=Lp(o.y),p=ji(n.x.add(l),n.y.add(c)).sub(.5).mul(t.xy),g=ji(n.x.add(d),n.y.add(c)).sub(.5).mul(t.xy),m=ji(n.x.add(l),n.y.add(h)).sub(.5).mul(t.xy),f=ji(n.x.add(d),n.y.add(h)).sub(.5).mul(t.xy),y=Bp(o.y).mul(ro(a.mul(e.sample(p).level(r)),u.mul(e.sample(g).level(r)))),x=Pp(o.y).mul(ro(a.mul(e.sample(m).level(r)),u.mul(e.sample(f).level(r))));return y.add(x)},Vp=Di((([e,t=zi(3)])=>{const r=ji(e.size(Wi(t))),s=ji(e.size(Wi(t.add(1)))),i=no(1,r),n=no(1,s),o=Dp(e,en(i,r),Go(t)),a=Dp(e,en(n,s),ko(t));return Wo(t).mix(o,a)})),Up=Di((([e,t,r,s,i])=>{const n=Yi(Ca(t.negate(),zo(e),no(1,s))),o=Yi(Zo(i[0].xyz),Zo(i[1].xyz),Zo(i[2].xyz));return zo(n).mul(r.mul(o))})).setLayout({name:"getVolumeTransmissionRay",type:"vec3",inputs:[{name:"n",type:"vec3"},{name:"v",type:"vec3"},{name:"thickness",type:"float"},{name:"ior",type:"float"},{name:"modelMatrix",type:"mat4"}]}),Op=Di((([e,t])=>e.mul(Aa(t.mul(2).sub(2),0,1)))).setLayout({name:"applyIorToRoughness",type:"float",inputs:[{name:"roughness",type:"float"},{name:"ior",type:"float"}]}),Gp=uh(),kp=uh(),zp=Di((([e,t,r],{material:s})=>{const i=(s.side===N?Gp:kp).sample(e),n=Vo(Yc.x).mul(Op(t,r));return Vp(i,n)})),Wp=Di((([e,t,r])=>(Oi(r.notEqual(0),(()=>{const s=Do(t).negate().div(r);return Io(s.negate().mul(e))})),Yi(1)))).setLayout({name:"volumeAttenuation",type:"vec3",inputs:[{name:"transmissionDistance",type:"float"},{name:"attenuationColor",type:"vec3"},{name:"attenuationDistance",type:"float"}]}),$p=Di((([e,t,r,s,i,n,o,a,u,l,d,c,h,p,g])=>{let m,f;if(g){m=en().toVar(),f=Yi().toVar();const i=d.sub(1).mul(g.mul(.025)),n=Yi(d.sub(i),d,d.add(i));Ic({start:0,end:3},(({i:i})=>{const d=n.element(i),g=Up(e,t,c,d,a),y=o.add(g),x=l.mul(u.mul(en(y,1))),b=ji(x.xy.div(x.w)).toVar();b.addAssign(1),b.divAssign(2),b.assign(ji(b.x,b.y.oneMinus()));const T=zp(b,r,d);m.element(i).assign(T.element(i)),m.a.addAssign(T.a),f.element(i).assign(s.element(i).mul(Wp(Zo(g),h,p).element(i)))})),m.a.divAssign(3)}else{const i=Up(e,t,c,d,a),n=o.add(i),g=l.mul(u.mul(en(n,1))),y=ji(g.xy.div(g.w)).toVar();y.addAssign(1),y.divAssign(2),y.assign(ji(y.x,y.y.oneMinus())),m=zp(y,r,d),f=s.mul(Wp(Zo(i),h,p))}const y=f.rgb.mul(m.rgb),x=e.dot(t).clamp(),b=Yi(yp({dotNV:x,specularColor:i,specularF90:n,roughness:r})),T=f.r.add(f.g,f.b).div(3);return en(b.oneMinus().mul(y),m.a.oneMinus().mul(T).oneMinus())})),Hp=on(3.2404542,-.969266,.0556434,-1.5371385,1.8760108,-.2040259,-.4985314,.041556,1.0572252),jp=(e,t)=>e.sub(t).div(e.add(t)).pow2(),qp=Di((({outsideIOR:e,eta2:t,cosTheta1:r,thinFilmThickness:s,baseF0:i})=>{const n=wa(e,t,Ma(0,.03,s)),o=e.div(n).pow2().mul(r.pow2().oneMinus()).oneMinus();Oi(o.lessThan(0),(()=>Yi(1)));const a=o.sqrt(),u=jp(n,e),l=Jh({f0:u,f90:1,dotVH:r}),d=l.oneMinus(),c=n.lessThan(e).select(Math.PI,0),h=zi(Math.PI).sub(c),p=(e=>{const t=e.sqrt();return Yi(1).add(t).div(Yi(1).sub(t))})(i.clamp(0,.9999)),g=jp(p,n.toVec3()),m=Jh({f0:g,f90:1,dotVH:a}),f=Yi(p.x.lessThan(n).select(Math.PI,0),p.y.lessThan(n).select(Math.PI,0),p.z.lessThan(n).select(Math.PI,0)),y=n.mul(s,a,2),x=Yi(h).add(f),b=l.mul(m).clamp(1e-5,.9999),T=b.sqrt(),_=d.pow2().mul(m).div(Yi(1).sub(b)),v=l.add(_).toVar(),N=_.sub(d).toVar();return Ic({start:1,end:2,condition:"<=",name:"m"},(({m:e})=>{N.mulAssign(T);const t=((e,t)=>{const r=e.mul(2*Math.PI*1e-9),s=Yi(54856e-17,44201e-17,52481e-17),i=Yi(1681e3,1795300,2208400),n=Yi(43278e5,93046e5,66121e5),o=zi(9747e-17*Math.sqrt(2*Math.PI*45282e5)).mul(r.mul(2239900).add(t.x).cos()).mul(r.pow2().mul(-45282e5).exp());let a=s.mul(n.mul(2*Math.PI).sqrt()).mul(i.mul(r).add(t).cos()).mul(r.pow2().negate().mul(n).exp());return a=Yi(a.x.add(o),a.y,a.z).div(1.0685e-7),Hp.mul(a)})(zi(e).mul(y),zi(e).mul(x)).mul(2);v.addAssign(N.mul(t))})),v.max(Yi(0))})).setLayout({name:"evalIridescence",type:"vec3",inputs:[{name:"outsideIOR",type:"float"},{name:"eta2",type:"float"},{name:"cosTheta1",type:"float"},{name:"thinFilmThickness",type:"float"},{name:"baseF0",type:"vec3"}]}),Xp=Di((({normal:e,viewDir:t,roughness:r})=>{const s=e.dot(t).saturate(),i=r.pow2(),n=Oa(r.lessThan(.25),zi(-339.2).mul(i).add(zi(161.4).mul(r)).sub(25.9),zi(-8.48).mul(i).add(zi(14.3).mul(r)).sub(9.95)),o=Oa(r.lessThan(.25),zi(44).mul(i).sub(zi(23.7).mul(r)).add(3.26),zi(1.97).mul(i).sub(zi(3.27).mul(r)).add(.72));return Oa(r.lessThan(.25),0,zi(.1).mul(r).sub(.025)).add(n.mul(s).add(o).exp()).mul(1/Math.PI).saturate()})),Kp=Yi(.04),Yp=zi(1);class Qp extends Kh{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1){super(),this.clearcoat=e,this.sheen=t,this.iridescence=r,this.anisotropy=s,this.transmission=i,this.dispersion=n,this.clearcoatRadiance=null,this.clearcoatSpecularDirect=null,this.clearcoatSpecularIndirect=null,this.sheenSpecularDirect=null,this.sheenSpecularIndirect=null,this.iridescenceFresnel=null,this.iridescenceF0=null}start(e){if(!0===this.clearcoat&&(this.clearcoatRadiance=Yi().toVar("clearcoatRadiance"),this.clearcoatSpecularDirect=Yi().toVar("clearcoatSpecularDirect"),this.clearcoatSpecularIndirect=Yi().toVar("clearcoatSpecularIndirect")),!0===this.sheen&&(this.sheenSpecularDirect=Yi().toVar("sheenSpecularDirect"),this.sheenSpecularIndirect=Yi().toVar("sheenSpecularIndirect")),!0===this.iridescence){const e=Ol.dot(Ml).clamp();this.iridescenceFresnel=qp({outsideIOR:zi(1),eta2:Bn,cosTheta1:e,thinFilmThickness:Pn,baseF0:Un}),this.iridescenceF0=xp({f:this.iridescenceFresnel,f90:1,dotVH:e})}if(!0===this.transmission){const t=Al,r=rl.sub(Al).normalize(),s=Gl,i=e.context;i.backdrop=$p(s,r,En,Nn,Un,On,t,pl,Ju,Qu,Hn,qn,Kn,Xn,this.dispersion?Yn:null),i.backdropAlpha=jn,Nn.a.mulAssign(wa(1,i.backdrop.a,jn))}super.start(e)}computeMultiscattering(e,t,r){const s=Ol.dot(Ml).clamp(),i=fp({roughness:En,dotNV:s}),n=(this.iridescenceF0?Fn.mix(Un,this.iridescenceF0):Un).mul(i.x).add(r.mul(i.y)),o=i.x.add(i.y).oneMinus(),a=Un.add(Un.oneMinus().mul(.047619)),u=n.mul(a).div(o.mul(a).oneMinus());e.addAssign(n),t.addAssign(u.mul(o))}direct({lightDirection:e,lightColor:t,reflectedLight:r}){const s=Ol.dot(e).clamp().mul(t);if(!0===this.sheen&&this.sheenSpecularDirect.addAssign(s.mul(_p({lightDirection:e}))),!0===this.clearcoat){const r=kl.dot(e).clamp().mul(t);this.clearcoatSpecularDirect.addAssign(r.mul(mp({lightDirection:e,f0:Kp,f90:Yp,roughness:Rn,normalView:kl})))}r.directDiffuse.addAssign(s.mul(ep({diffuseColor:Nn.rgb}))),r.directSpecular.addAssign(s.mul(mp({lightDirection:e,f0:Un,f90:1,roughness:En,iridescence:this.iridescence,f:this.iridescenceFresnel,USE_IRIDESCENCE:this.iridescence,USE_ANISOTROPY:this.anisotropy})))}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s,reflectedLight:i,ltc_1:n,ltc_2:o}){const a=t.add(r).sub(s),u=t.sub(r).sub(s),l=t.sub(r).add(s),d=t.add(r).add(s),c=Ol,h=Ml,p=Cl.toVar(),g=vp({N:c,V:h,roughness:En}),m=n.sample(g).toVar(),f=o.sample(g).toVar(),y=on(Yi(m.x,0,m.y),Yi(0,1,0),Yi(m.z,0,m.w)).toVar(),x=Un.mul(f.x).add(Un.oneMinus().mul(f.y)).toVar();i.directSpecular.addAssign(e.mul(x).mul(Ep({N:c,V:h,P:p,mInv:y,p0:a,p1:u,p2:l,p3:d}))),i.directDiffuse.addAssign(e.mul(Nn).mul(Ep({N:c,V:h,P:p,mInv:on(1,0,0,0,1,0,0,0,1),p0:a,p1:u,p2:l,p3:d})))}indirect(e){this.indirectDiffuse(e),this.indirectSpecular(e),this.ambientOcclusion(e)}indirectDiffuse(e){const{irradiance:t,reflectedLight:r}=e.context;r.indirectDiffuse.addAssign(t.mul(ep({diffuseColor:Nn})))}indirectSpecular(e){const{radiance:t,iblIrradiance:r,reflectedLight:s}=e.context;if(!0===this.sheen&&this.sheenSpecularIndirect.addAssign(r.mul(Cn,Xp({normal:Ol,viewDir:Ml,roughness:Mn}))),!0===this.clearcoat){const e=kl.dot(Ml).clamp(),t=yp({dotNV:e,specularColor:Kp,specularF90:Yp,roughness:Rn});this.clearcoatSpecularIndirect.addAssign(this.clearcoatRadiance.mul(t))}const i=Yi().toVar("singleScattering"),n=Yi().toVar("multiScattering"),o=r.mul(1/Math.PI);this.computeMultiscattering(i,n,On);const a=i.add(n),u=Nn.mul(a.r.max(a.g).max(a.b).oneMinus());s.indirectSpecular.addAssign(t.mul(i)),s.indirectSpecular.addAssign(n.mul(o)),s.indirectDiffuse.addAssign(u.mul(o))}ambientOcclusion(e){const{ambientOcclusion:t,reflectedLight:r}=e.context,s=Ol.dot(Ml).clamp().add(t),i=En.mul(-16).oneMinus().negate().exp2(),n=t.sub(s.pow(i).oneMinus()).clamp();!0===this.clearcoat&&this.clearcoatSpecularIndirect.mulAssign(t),!0===this.sheen&&this.sheenSpecularIndirect.mulAssign(t),r.indirectDiffuse.mulAssign(t),r.indirectSpecular.mulAssign(n)}finish({context:e}){const{outgoingLight:t}=e;if(!0===this.clearcoat){const e=kl.dot(Ml).clamp(),r=Jh({dotVH:e,f0:Kp,f90:Yp}),s=t.mul(An.mul(r).oneMinus()).add(this.clearcoatSpecularDirect.add(this.clearcoatSpecularIndirect).mul(An));t.assign(s)}if(!0===this.sheen){const e=Cn.r.max(Cn.g).max(Cn.b).mul(.157).oneMinus(),r=t.mul(e).add(this.sheenSpecularDirect,this.sheenSpecularIndirect);t.assign(r)}}}const Zp=zi(1),Jp=zi(-2),eg=zi(.8),tg=zi(-1),rg=zi(.4),sg=zi(2),ig=zi(.305),ng=zi(3),og=zi(.21),ag=zi(4),ug=zi(4),lg=zi(16),dg=Di((([e])=>{const t=Yi(Yo(e)).toVar(),r=zi(-1).toVar();return Oi(t.x.greaterThan(t.z),(()=>{Oi(t.x.greaterThan(t.y),(()=>{r.assign(Oa(e.x.greaterThan(0),0,3))})).Else((()=>{r.assign(Oa(e.y.greaterThan(0),1,4))}))})).Else((()=>{Oi(t.z.greaterThan(t.y),(()=>{r.assign(Oa(e.z.greaterThan(0),2,5))})).Else((()=>{r.assign(Oa(e.y.greaterThan(0),1,4))}))})),r})).setLayout({name:"getFace",type:"float",inputs:[{name:"direction",type:"vec3"}]}),cg=Di((([e,t])=>{const r=ji().toVar();return Oi(t.equal(0),(()=>{r.assign(ji(e.z,e.y).div(Yo(e.x)))})).ElseIf(t.equal(1),(()=>{r.assign(ji(e.x.negate(),e.z.negate()).div(Yo(e.y)))})).ElseIf(t.equal(2),(()=>{r.assign(ji(e.x.negate(),e.y).div(Yo(e.z)))})).ElseIf(t.equal(3),(()=>{r.assign(ji(e.z.negate(),e.y).div(Yo(e.x)))})).ElseIf(t.equal(4),(()=>{r.assign(ji(e.x.negate(),e.z).div(Yo(e.y)))})).Else((()=>{r.assign(ji(e.x,e.y).div(Yo(e.z)))})),io(.5,r.add(1))})).setLayout({name:"getUV",type:"vec2",inputs:[{name:"direction",type:"vec3"},{name:"face",type:"float"}]}),hg=Di((([e])=>{const t=zi(0).toVar();return Oi(e.greaterThanEqual(eg),(()=>{t.assign(Zp.sub(e).mul(tg.sub(Jp)).div(Zp.sub(eg)).add(Jp))})).ElseIf(e.greaterThanEqual(rg),(()=>{t.assign(eg.sub(e).mul(sg.sub(tg)).div(eg.sub(rg)).add(tg))})).ElseIf(e.greaterThanEqual(ig),(()=>{t.assign(rg.sub(e).mul(ng.sub(sg)).div(rg.sub(ig)).add(sg))})).ElseIf(e.greaterThanEqual(og),(()=>{t.assign(ig.sub(e).mul(ag.sub(ng)).div(ig.sub(og)).add(ng))})).Else((()=>{t.assign(zi(-2).mul(Vo(io(1.16,e))))})),t})).setLayout({name:"roughnessToMip",type:"float",inputs:[{name:"roughness",type:"float"}]}),pg=Di((([e,t])=>{const r=e.toVar();r.assign(io(2,r).sub(1));const s=Yi(r,1).toVar();return Oi(t.equal(0),(()=>{s.assign(s.zyx)})).ElseIf(t.equal(1),(()=>{s.assign(s.xzy),s.xz.mulAssign(-1)})).ElseIf(t.equal(2),(()=>{s.x.mulAssign(-1)})).ElseIf(t.equal(3),(()=>{s.assign(s.zyx),s.xz.mulAssign(-1)})).ElseIf(t.equal(4),(()=>{s.assign(s.xzy),s.xy.mulAssign(-1)})).ElseIf(t.equal(5),(()=>{s.z.mulAssign(-1)})),s})).setLayout({name:"getDirection",type:"vec3",inputs:[{name:"uv",type:"vec2"},{name:"face",type:"float"}]}),gg=Di((([e,t,r,s,i,n])=>{const o=zi(r),a=Yi(t),u=Aa(hg(o),Jp,n),l=Wo(u),d=Go(u),c=Yi(mg(e,a,d,s,i,n)).toVar();return Oi(l.notEqual(0),(()=>{const t=Yi(mg(e,a,d.add(1),s,i,n)).toVar();c.assign(wa(c,t,l))})),c})),mg=Di((([e,t,r,s,i,n])=>{const o=zi(r).toVar(),a=Yi(t),u=zi(dg(a)).toVar(),l=zi(ca(ug.sub(o),0)).toVar();o.assign(ca(o,ug));const d=zi(Lo(o)).toVar(),c=ji(cg(a,u).mul(d.sub(2)).add(1)).toVar();return Oi(u.greaterThan(2),(()=>{c.y.addAssign(d),u.subAssign(3)})),c.x.addAssign(u.mul(d)),c.x.addAssign(l.mul(io(3,lg))),c.y.addAssign(io(4,Lo(n).sub(d))),c.x.mulAssign(s),c.y.mulAssign(i),e.sample(c).grad(ji(),ji())})),fg=Di((({envMap:e,mipInt:t,outputDirection:r,theta:s,axis:i,CUBEUV_TEXEL_WIDTH:n,CUBEUV_TEXEL_HEIGHT:o,CUBEUV_MAX_MIP:a})=>{const u=Ho(s),l=r.mul(u).add(i.cross(r).mul($o(s))).add(i.mul(i.dot(r).mul(u.oneMinus())));return mg(e,l,t,n,o,a)})),yg=Di((({n:e,latitudinal:t,poleAxis:r,outputDirection:s,weights:i,samples:n,dTheta:o,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})=>{const h=Yi(Oa(t,r,xa(r,s))).toVar();Oi(Mo(h.equals(Yi(0))),(()=>{h.assign(Yi(s.z,0,s.x.negate()))})),h.assign(zo(h));const p=Yi().toVar();return p.addAssign(i.element(0).mul(fg({theta:0,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),Ic({start:Wi(1),end:e},(({i:e})=>{Oi(e.greaterThanEqual(n),(()=>{Lc()}));const t=zi(o.mul(zi(e))).toVar();p.addAssign(i.element(e).mul(fg({theta:t.mul(-1),axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c}))),p.addAssign(i.element(e).mul(fg({theta:t,axis:h,outputDirection:s,mipInt:a,envMap:u,CUBEUV_TEXEL_WIDTH:l,CUBEUV_TEXEL_HEIGHT:d,CUBEUV_MAX_MIP:c})))})),en(p,1)})),xg=[.125,.215,.35,.446,.526,.582],bg=20,Tg=new ie(-1,1,1,-1,0,1),_g=new ne(90,1),vg=new e;let Ng=null,Sg=0,Eg=0;const wg=(1+Math.sqrt(5))/2,Ag=1/wg,Rg=[new r(-wg,Ag,0),new r(wg,Ag,0),new r(-Ag,0,wg),new r(Ag,0,wg),new r(0,wg,-Ag),new r(0,wg,Ag),new r(-1,1,-1),new r(1,1,-1),new r(-1,1,1),new r(1,1,1)],Cg=new r,Mg=new WeakMap,Fg=[3,1,5,0,4,2],Bg=pg(Lu(),Iu("faceIndex")).normalize(),Pg=Yi(Bg.x,Bg.y,Bg.z);class Ig{constructor(e){this._renderer=e,this._pingPongRenderTarget=null,this._lodMax=0,this._cubeSize=0,this._lodPlanes=[],this._sizeLods=[],this._sigmas=[],this._lodMeshes=[],this._blurMaterial=null,this._cubemapMaterial=null,this._equirectMaterial=null,this._backgroundBox=null}get _hasInitialized(){return this._renderer.hasInitialized()}fromScene(e,t=0,r=.1,s=100,i={}){const{size:n=256,position:o=Cg,renderTarget:a=null}=i;if(this._setSize(n),!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromScene() called before the backend is initialized. Try using .fromSceneAsync() instead.");const n=a||this._allocateTargets();return i.renderTarget=n,this.fromSceneAsync(e,t,r,s,i),n}Ng=this._renderer.getRenderTarget(),Sg=this._renderer.getActiveCubeFace(),Eg=this._renderer.getActiveMipmapLevel();const u=a||this._allocateTargets();return u.depthBuffer=!0,this._sceneToCubeUV(e,r,s,u,o),t>0&&this._blur(u,0,0,t),this._applyPMREM(u),this._cleanup(u),u}async fromSceneAsync(e,t=0,r=.1,s=100,i={}){return!1===this._hasInitialized&&await this._renderer.init(),this.fromScene(e,t,r,s,i)}fromEquirectangular(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromEquirectangular() called before the backend is initialized. Try using .fromEquirectangularAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromEquirectangularAsync(e,r),r}return this._fromTexture(e,t)}async fromEquirectangularAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}fromCubemap(e,t=null){if(!1===this._hasInitialized){console.warn("THREE.PMREMGenerator: .fromCubemap() called before the backend is initialized. Try using .fromCubemapAsync() instead."),this._setSizeFromTexture(e);const r=t||this._allocateTargets();return this.fromCubemapAsync(e,t),r}return this._fromTexture(e,t)}async fromCubemapAsync(e,t=null){return!1===this._hasInitialized&&await this._renderer.init(),this._fromTexture(e,t)}async compileCubemapShader(){null===this._cubemapMaterial&&(this._cubemapMaterial=Ug(),await this._compileMaterial(this._cubemapMaterial))}async compileEquirectangularShader(){null===this._equirectMaterial&&(this._equirectMaterial=Og(),await this._compileMaterial(this._equirectMaterial))}dispose(){this._dispose(),null!==this._cubemapMaterial&&this._cubemapMaterial.dispose(),null!==this._equirectMaterial&&this._equirectMaterial.dispose(),null!==this._backgroundBox&&(this._backgroundBox.geometry.dispose(),this._backgroundBox.material.dispose())}_setSizeFromTexture(e){e.mapping===E||e.mapping===w?this._setSize(0===e.image.length?16:e.image[0].width||e.image[0].image.width):this._setSize(e.image.width/4)}_setSize(e){this._lodMax=Math.floor(Math.log2(e)),this._cubeSize=Math.pow(2,this._lodMax)}_dispose(){null!==this._blurMaterial&&this._blurMaterial.dispose(),null!==this._pingPongRenderTarget&&this._pingPongRenderTarget.dispose();for(let e=0;e<this._lodPlanes.length;e++)this._lodPlanes[e].dispose()}_cleanup(e){this._renderer.setRenderTarget(Ng,Sg,Eg),e.scissorTest=!1,Dg(e,0,0,e.width,e.height)}_fromTexture(e,t){this._setSizeFromTexture(e),Ng=this._renderer.getRenderTarget(),Sg=this._renderer.getActiveCubeFace(),Eg=this._renderer.getActiveMipmapLevel();const r=t||this._allocateTargets();return this._textureToCubeUV(e,r),this._applyPMREM(r),this._cleanup(r),r}_allocateTargets(){const e=3*Math.max(this._cubeSize,112),t=4*this._cubeSize,s={magFilter:q,minFilter:q,generateMipmaps:!1,type:he,format:ce,colorSpace:de},i=Lg(e,t,s);if(null===this._pingPongRenderTarget||this._pingPongRenderTarget.width!==e||this._pingPongRenderTarget.height!==t){null!==this._pingPongRenderTarget&&this._dispose(),this._pingPongRenderTarget=Lg(e,t,s);const{_lodMax:i}=this;({sizeLods:this._sizeLods,lodPlanes:this._lodPlanes,sigmas:this._sigmas,lodMeshes:this._lodMeshes}=function(e){const t=[],r=[],s=[],i=[];let n=e;const o=e-4+1+xg.length;for(let a=0;a<o;a++){const o=Math.pow(2,n);r.push(o);let u=1/o;a>e-4?u=xg[a-e+4-1]:0===a&&(u=0),s.push(u);const l=1/(o-2),d=-l,c=1+l,h=[d,d,c,d,c,c,d,d,c,c,d,c],p=6,g=6,m=3,f=2,y=1,x=new Float32Array(m*g*p),b=new Float32Array(f*g*p),T=new Float32Array(y*g*p);for(let e=0;e<p;e++){const t=e%3*2/3-1,r=e>2?0:-1,s=[t,r,0,t+2/3,r,0,t+2/3,r+1,0,t,r,0,t+2/3,r+1,0,t,r+1,0],i=Fg[e];x.set(s,m*g*i),b.set(h,f*g*i);const n=[i,i,i,i,i,i];T.set(n,y*g*i)}const _=new ue;_.setAttribute("position",new le(x,m)),_.setAttribute("uv",new le(b,f)),_.setAttribute("faceIndex",new le(T,y)),t.push(_),i.push(new H(_,null)),n>4&&n--}return{lodPlanes:t,sizeLods:r,sigmas:s,lodMeshes:i}}(i)),this._blurMaterial=function(e,t,s){const i=qu(new Array(bg).fill(0)),n=bn(new r(0,1,0)),o=bn(0),a=zi(bg),u=bn(0),l=bn(1),d=ku(null),c=bn(0),h=zi(1/t),p=zi(1/s),g=zi(e),m={n:a,latitudinal:u,weights:i,poleAxis:n,outputDirection:Pg,dTheta:o,samples:l,envMap:d,mipInt:c,CUBEUV_TEXEL_WIDTH:h,CUBEUV_TEXEL_HEIGHT:p,CUBEUV_MAX_MIP:g},f=Vg("blur");return f.fragmentNode=yg({...m,latitudinal:u.equal(1)}),Mg.set(f,m),f}(i,e,t)}return i}async _compileMaterial(e){const t=new H(this._lodPlanes[0],e);await this._renderer.compile(t,Tg)}_sceneToCubeUV(e,t,r,s,i){const n=_g;n.near=t,n.far=r;const o=[1,1,1,1,-1,1],a=[1,-1,1,-1,1,-1],u=this._renderer,l=u.autoClear;u.getClearColor(vg),u.autoClear=!1;let d=this._backgroundBox;if(null===d){const e=new te({name:"PMREM.Background",side:N,depthWrite:!1,depthTest:!1});d=new H(new $,e)}let c=!1;const h=e.background;h?h.isColor&&(d.material.color.copy(h),e.background=null,c=!0):(d.material.color.copy(vg),c=!0),u.setRenderTarget(s),u.clear(),c&&u.render(d,n);for(let t=0;t<6;t++){const r=t%3;0===r?(n.up.set(0,o[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x+a[t],i.y,i.z)):1===r?(n.up.set(0,0,o[t]),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y+a[t],i.z)):(n.up.set(0,o[t],0),n.position.set(i.x,i.y,i.z),n.lookAt(i.x,i.y,i.z+a[t]));const l=this._cubeSize;Dg(s,r*l,t>2?l:0,l,l),u.render(e,n)}u.autoClear=l,e.background=h}_textureToCubeUV(e,t){const r=this._renderer,s=e.mapping===E||e.mapping===w;s?null===this._cubemapMaterial&&(this._cubemapMaterial=Ug(e)):null===this._equirectMaterial&&(this._equirectMaterial=Og(e));const i=s?this._cubemapMaterial:this._equirectMaterial;i.fragmentNode.value=e;const n=this._lodMeshes[0];n.material=i;const o=this._cubeSize;Dg(t,0,0,3*o,2*o),r.setRenderTarget(t),r.render(n,Tg)}_applyPMREM(e){const t=this._renderer,r=t.autoClear;t.autoClear=!1;const s=this._lodPlanes.length;for(let t=1;t<s;t++){const r=Math.sqrt(this._sigmas[t]*this._sigmas[t]-this._sigmas[t-1]*this._sigmas[t-1]),i=Rg[(s-t-1)%Rg.length];this._blur(e,t-1,t,r,i)}t.autoClear=r}_blur(e,t,r,s,i){const n=this._pingPongRenderTarget;this._halfBlur(e,n,t,r,s,"latitudinal",i),this._halfBlur(n,e,r,r,s,"longitudinal",i)}_halfBlur(e,t,r,s,i,n,o){const a=this._renderer,u=this._blurMaterial;"latitudinal"!==n&&"longitudinal"!==n&&console.error("blur direction must be either latitudinal or longitudinal!");const l=this._lodMeshes[s];l.material=u;const d=Mg.get(u),c=this._sizeLods[r]-1,h=isFinite(i)?Math.PI/(2*c):2*Math.PI/39,p=i/h,g=isFinite(i)?1+Math.floor(3*p):bg;g>bg&&console.warn(`sigmaRadians, ${i}, is too large and will clip, as it requested ${g} samples when the maximum is set to 20`);const m=[];let f=0;for(let e=0;e<bg;++e){const t=e/p,r=Math.exp(-t*t/2);m.push(r),0===e?f+=r:e<g&&(f+=2*r)}for(let e=0;e<m.length;e++)m[e]=m[e]/f;e.texture.frame=(e.texture.frame||0)+1,d.envMap.value=e.texture,d.samples.value=g,d.weights.array=m,d.latitudinal.value="latitudinal"===n?1:0,o&&(d.poleAxis.value=o);const{_lodMax:y}=this;d.dTheta.value=h,d.mipInt.value=y-r;const x=this._sizeLods[s];Dg(t,3*x*(s>y-4?s-y+4:0),4*(this._cubeSize-x),3*x,2*x),a.setRenderTarget(t),a.render(l,Tg)}}function Lg(e,t,r){const s=new oe(e,t,r);return s.texture.mapping=ae,s.texture.name="PMREM.cubeUv",s.texture.isPMREMTexture=!0,s.scissorTest=!0,s}function Dg(e,t,r,s,i){e.viewport.set(t,r,s,i),e.scissor.set(t,r,s,i)}function Vg(e){const t=new wh;return t.depthTest=!1,t.depthWrite=!1,t.blending=G,t.name=`PMREM_${e}`,t}function Ug(e){const t=Vg("cubemap");return t.fragmentNode=ed(e,Pg),t}function Og(e){const t=Vg("equirect");return t.fragmentNode=ku(e,Gh(Pg),0),t}const Gg=new WeakMap;function kg(e,t,r){const s=function(e){let t=Gg.get(e);void 0===t&&(t=new WeakMap,Gg.set(e,t));return t}(t);let i=s.get(e);if((void 0!==i?i.pmremVersion:-1)!==e.pmremVersion){const t=e.image;if(e.isCubeTexture){if(!function(e){if(null==e)return!1;let t=0;const r=6;for(let s=0;s<r;s++)void 0!==e[s]&&t++;return t===r}(t))return null;i=r.fromCubemap(e,i)}else{if(!function(e){return null!=e&&e.height>0}(t))return null;i=r.fromEquirectangular(e,i)}i.pmremVersion=e.pmremVersion,s.set(e,i)}return i.texture}class zg extends js{static get type(){return"PMREMNode"}constructor(e,t=null,r=null){super("vec3"),this._value=e,this._pmrem=null,this.uvNode=t,this.levelNode=r,this._generator=null;const s=new pe;s.isRenderTargetTexture=!0,this._texture=ku(s),this._width=bn(0),this._height=bn(0),this._maxMip=bn(0),this.updateBeforeType=Ls.RENDER}set value(e){this._value=e,this._pmrem=null}get value(){return this._value}updateFromTexture(e){const t=function(e){const t=Math.log2(e)-2,r=1/e;return{texelWidth:1/(3*Math.max(Math.pow(2,t),112)),texelHeight:r,maxMip:t}}(e.image.height);this._texture.value=e,this._width.value=t.texelWidth,this._height.value=t.texelHeight,this._maxMip.value=t.maxMip}updateBefore(e){let t=this._pmrem;const r=t?t.pmremVersion:-1,s=this._value;r!==s.pmremVersion&&(t=!0===s.isPMREMTexture?s:kg(s,e.renderer,this._generator),null!==t&&(this._pmrem=t,this.updateFromTexture(t)))}setup(e){null===this._generator&&(this._generator=new Ig(e.renderer)),this.updateBefore(e);let t=this.uvNode;null===t&&e.context.getUV&&(t=e.context.getUV(this)),t=Xl.mul(Yi(t.x,t.y.negate(),t.z));let r=this.levelNode;return null===r&&e.context.getTextureLevel&&(r=e.context.getTextureLevel(this)),gg(this._texture,t,r,this._width,this._height,this._maxMip)}dispose(){super.dispose(),null!==this._generator&&this._generator.dispose()}}const Wg=Ii(zg),$g=new WeakMap;class Hg extends kc{static get type(){return"EnvironmentNode"}constructor(e=null){super(),this.envNode=e}setup(e){const{material:t}=e;let r=this.envNode;if(r.isTextureNode||r.isMaterialReferenceNode){const e=r.isTextureNode?r.value:t[r.property];let s=$g.get(e);void 0===s&&(s=Wg(e),$g.set(e,s)),r=s}const s=!0===t.useAnisotropy||t.anisotropy>0?vd:Ol,i=r.context(jg(En,s)).mul(ql),n=r.context(qg(Gl)).mul(Math.PI).mul(ql),o=vu(i),a=vu(n);e.context.radiance.addAssign(o),e.context.iblIrradiance.addAssign(a);const u=e.context.lightingModel.clearcoatRadiance;if(u){const e=r.context(jg(Rn,kl)).mul(ql),t=vu(e);u.addAssign(t)}}}const jg=(e,t)=>{let r=null;return{getUV:()=>(null===r&&(r=Ml.negate().reflect(t),r=e.mul(e).mix(r,t).normalize(),r=r.transformDirection(Ju)),r),getTextureLevel:()=>e}},qg=e=>({getUV:()=>e,getTextureLevel:()=>zi(1)}),Xg=new ge;class Kg extends wh{static get type(){return"MeshStandardNodeMaterial"}constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.lights=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(Xg),this.setValues(e)}setupEnvironment(e){let t=super.setupEnvironment(e);return null===t&&e.environmentNode&&(t=e.environmentNode),t?new Hg(t):null}setupLightingModel(){return new Qp}setupSpecular(){const e=wa(Yi(.04),Nn.rgb,wn);Un.assign(e),On.assign(1)}setupVariants(){const e=this.metalnessNode?zi(this.metalnessNode):Wd;wn.assign(e);let t=this.roughnessNode?zi(this.roughnessNode):zd;t=lp({roughness:t}),En.assign(t),this.setupSpecular(),Nn.assign(en(Nn.rgb.mul(e.oneMinus()),Nn.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}const Yg=new me;class Qg extends Kg{static get type(){return"MeshPhysicalNodeMaterial"}constructor(e){super(),this.isMeshPhysicalNodeMaterial=!0,this.clearcoatNode=null,this.clearcoatRoughnessNode=null,this.clearcoatNormalNode=null,this.sheenNode=null,this.sheenRoughnessNode=null,this.iridescenceNode=null,this.iridescenceIORNode=null,this.iridescenceThicknessNode=null,this.specularIntensityNode=null,this.specularColorNode=null,this.iorNode=null,this.transmissionNode=null,this.thicknessNode=null,this.attenuationDistanceNode=null,this.attenuationColorNode=null,this.dispersionNode=null,this.anisotropyNode=null,this.setDefaultValues(Yg),this.setValues(e)}get useClearcoat(){return this.clearcoat>0||null!==this.clearcoatNode}get useIridescence(){return this.iridescence>0||null!==this.iridescenceNode}get useSheen(){return this.sheen>0||null!==this.sheenNode}get useAnisotropy(){return this.anisotropy>0||null!==this.anisotropyNode}get useTransmission(){return this.transmission>0||null!==this.transmissionNode}get useDispersion(){return this.dispersion>0||null!==this.dispersionNode}setupSpecular(){const e=this.iorNode?zi(this.iorNode):sc;Hn.assign(e),Un.assign(wa(da(Ta(Hn.sub(1).div(Hn.add(1))).mul(Od),Yi(1)).mul(Ud),Nn.rgb,wn)),On.assign(wa(Ud,1,wn))}setupLightingModel(){return new Qp(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion)}setupVariants(e){if(super.setupVariants(e),this.useClearcoat){const e=this.clearcoatNode?zi(this.clearcoatNode):Hd,t=this.clearcoatRoughnessNode?zi(this.clearcoatRoughnessNode):jd;An.assign(e),Rn.assign(lp({roughness:t}))}if(this.useSheen){const e=this.sheenNode?Yi(this.sheenNode):Kd,t=this.sheenRoughnessNode?zi(this.sheenRoughnessNode):Yd;Cn.assign(e),Mn.assign(t)}if(this.useIridescence){const e=this.iridescenceNode?zi(this.iridescenceNode):Zd,t=this.iridescenceIORNode?zi(this.iridescenceIORNode):Jd,r=this.iridescenceThicknessNode?zi(this.iridescenceThicknessNode):ec;Fn.assign(e),Bn.assign(t),Pn.assign(r)}if(this.useAnisotropy){const e=(this.anisotropyNode?ji(this.anisotropyNode):Qd).toVar();Ln.assign(e.length()),Oi(Ln.equal(0),(()=>{e.assign(ji(1,0))})).Else((()=>{e.divAssign(ji(Ln)),Ln.assign(Ln.saturate())})),In.assign(Ln.pow2().mix(En.pow2(),1)),Dn.assign(Td[0].mul(e.x).add(Td[1].mul(e.y))),Vn.assign(Td[1].mul(e.x).sub(Td[0].mul(e.y)))}if(this.useTransmission){const e=this.transmissionNode?zi(this.transmissionNode):tc,t=this.thicknessNode?zi(this.thicknessNode):rc,r=this.attenuationDistanceNode?zi(this.attenuationDistanceNode):ic,s=this.attenuationColorNode?Yi(this.attenuationColorNode):nc;if(jn.assign(e),qn.assign(t),Xn.assign(r),Kn.assign(s),this.useDispersion){const e=this.dispersionNode?zi(this.dispersionNode):hc;Yn.assign(e)}}}setupClearcoatNormal(){return this.clearcoatNormalNode?Yi(this.clearcoatNormalNode):qd}setup(e){e.context.setupClearcoatNormal=()=>this.setupClearcoatNormal(e),super.setup(e)}copy(e){return this.clearcoatNode=e.clearcoatNode,this.clearcoatRoughnessNode=e.clearcoatRoughnessNode,this.clearcoatNormalNode=e.clearcoatNormalNode,this.sheenNode=e.sheenNode,this.sheenRoughnessNode=e.sheenRoughnessNode,this.iridescenceNode=e.iridescenceNode,this.iridescenceIORNode=e.iridescenceIORNode,this.iridescenceThicknessNode=e.iridescenceThicknessNode,this.specularIntensityNode=e.specularIntensityNode,this.specularColorNode=e.specularColorNode,this.transmissionNode=e.transmissionNode,this.thicknessNode=e.thicknessNode,this.attenuationDistanceNode=e.attenuationDistanceNode,this.attenuationColorNode=e.attenuationColorNode,this.dispersionNode=e.dispersionNode,this.anisotropyNode=e.anisotropyNode,super.copy(e)}}class Zg extends Qp{constructor(e=!1,t=!1,r=!1,s=!1,i=!1,n=!1,o=!1){super(e,t,r,s,i,n),this.useSSS=o}direct({lightDirection:e,lightColor:t,reflectedLight:r},s){if(!0===this.useSSS){const i=s.material,{thicknessColorNode:n,thicknessDistortionNode:o,thicknessAmbientNode:a,thicknessAttenuationNode:u,thicknessPowerNode:l,thicknessScaleNode:d}=i,c=e.add(Ol.mul(o)).normalize(),h=zi(Ml.dot(c.negate()).saturate().pow(l).mul(d)),p=Yi(h.add(a).mul(n));r.directDiffuse.addAssign(p.mul(u.mul(t)))}super.direct({lightDirection:e,lightColor:t,reflectedLight:r},s)}}class Jg extends Qg{static get type(){return"MeshSSSNodeMaterial"}constructor(e){super(e),this.thicknessColorNode=null,this.thicknessDistortionNode=zi(.1),this.thicknessAmbientNode=zi(0),this.thicknessAttenuationNode=zi(.1),this.thicknessPowerNode=zi(2),this.thicknessScaleNode=zi(10)}get useSSS(){return null!==this.thicknessColorNode}setupLightingModel(){return new Zg(this.useClearcoat,this.useSheen,this.useIridescence,this.useAnisotropy,this.useTransmission,this.useDispersion,this.useSSS)}copy(e){return this.thicknessColorNode=e.thicknessColorNode,this.thicknessDistortionNode=e.thicknessDistortionNode,this.thicknessAmbientNode=e.thicknessAmbientNode,this.thicknessAttenuationNode=e.thicknessAttenuationNode,this.thicknessPowerNode=e.thicknessPowerNode,this.thicknessScaleNode=e.thicknessScaleNode,super.copy(e)}}const em=Di((({normal:e,lightDirection:t,builder:r})=>{const s=e.dot(t),i=ji(s.mul(.5).add(.5),0);if(r.material.gradientMap){const e=od("gradientMap","texture").context({getUV:()=>i});return Yi(e.r)}{const e=i.fwidth().mul(.5);return wa(Yi(.7),Yi(1),Ma(zi(.7).sub(e.x),zi(.7).add(e.x),i.x))}}));class tm extends Kh{direct({lightDirection:e,lightColor:t,reflectedLight:r},s){const i=em({normal:Il,lightDirection:e,builder:s}).mul(t);r.directDiffuse.addAssign(i.mul(ep({diffuseColor:Nn.rgb})))}indirect(e){const{ambientOcclusion:t,irradiance:r,reflectedLight:s}=e.context;s.indirectDiffuse.addAssign(r.mul(ep({diffuseColor:Nn}))),s.indirectDiffuse.mulAssign(t)}}const rm=new fe;class sm extends wh{static get type(){return"MeshToonNodeMaterial"}constructor(e){super(),this.isMeshToonNodeMaterial=!0,this.lights=!0,this.setDefaultValues(rm),this.setValues(e)}setupLightingModel(){return new tm}}class im extends js{static get type(){return"MatcapUVNode"}constructor(){super("vec2")}setup(){const e=Yi(Ml.z,0,Ml.x.negate()).normalize(),t=Ml.cross(e);return ji(e.dot(Ol),t.dot(Ol)).mul(.495).add(.5)}}const nm=Li(im),om=new ye;class am extends wh{static get type(){return"MeshMatcapNodeMaterial"}constructor(e){super(),this.isMeshMatcapNodeMaterial=!0,this.setDefaultValues(om),this.setValues(e)}setupVariants(e){const t=nm;let r;r=e.material.matcap?od("matcap","texture").context({getUV:()=>t}):Yi(wa(.2,.8,t.y)),Nn.rgb.mulAssign(r.rgb)}}class um extends js{static get type(){return"RotateNode"}constructor(e,t){super(),this.positionNode=e,this.rotationNode=t}getNodeType(e){return this.positionNode.getNodeType(e)}setup(e){const{rotationNode:t,positionNode:r}=this;if("vec2"===this.getNodeType(e)){const e=t.cos(),s=t.sin();return nn(e,s,s.negate(),e).mul(r)}{const e=t,s=an(en(1,0,0,0),en(0,Ho(e.x),$o(e.x).negate(),0),en(0,$o(e.x),Ho(e.x),0),en(0,0,0,1)),i=an(en(Ho(e.y),0,$o(e.y),0),en(0,1,0,0),en($o(e.y).negate(),0,Ho(e.y),0),en(0,0,0,1)),n=an(en(Ho(e.z),$o(e.z).negate(),0,0),en($o(e.z),Ho(e.z),0,0),en(0,0,1,0),en(0,0,0,1));return s.mul(i).mul(n).mul(en(r,1)).xyz}}}const lm=Ii(um),dm=new xe;class cm extends wh{static get type(){return"SpriteNodeMaterial"}constructor(e){super(),this.isSpriteNodeMaterial=!0,this._useSizeAttenuation=!0,this.positionNode=null,this.rotationNode=null,this.scaleNode=null,this.transparent=!0,this.setDefaultValues(dm),this.setValues(e)}setupPositionView(e){const{object:t,camera:r}=e,s=this.sizeAttenuation,{positionNode:i,rotationNode:n,scaleNode:o}=this,a=Tl.mul(Yi(i||0));let u=ji(pl[0].xyz.length(),pl[1].xyz.length());if(null!==o&&(u=u.mul(ji(o))),!1===s)if(r.isPerspectiveCamera)u=u.mul(a.z.negate());else{const e=zi(2).div(Qu.element(1).element(1));u=u.mul(e.mul(2))}let l=Sl.xy;if(t.center&&!0===t.center.isVector2){const e=((e,t,r)=>Fi(new uu(e,t,r)))("center","vec2",t);l=l.sub(e.sub(.5))}l=l.mul(u);const d=zi(n||Xd),c=lm(l,d);return en(a.xy.add(c),a.zw)}copy(e){return this.positionNode=e.positionNode,this.rotationNode=e.rotationNode,this.scaleNode=e.scaleNode,super.copy(e)}get sizeAttenuation(){return this._useSizeAttenuation}set sizeAttenuation(e){this._useSizeAttenuation!==e&&(this._useSizeAttenuation=e,this.needsUpdate=!0)}}const hm=new be;class pm extends cm{static get type(){return"PointsNodeMaterial"}constructor(e){super(),this.sizeNode=null,this.isPointsNodeMaterial=!0,this.setDefaultValues(hm),this.setValues(e)}setupPositionView(){const{positionNode:e}=this;return Tl.mul(Yi(e||El)).xyz}setupVertex(e){const t=super.setupVertex(e);if(!0!==e.material.isNodeMaterial)return t;const{rotationNode:r,scaleNode:s,sizeNode:i}=this,n=Sl.xy.toVar(),o=Zc.z.div(Zc.w);if(r&&r.isNode){const e=zi(r);n.assign(lm(n,e))}let a=null!==i?ji(i):cc;return!0===this.sizeAttenuation&&(a=a.mul(a.div(Cl.z.negate()))),s&&s.isNode&&(a=a.mul(ji(s))),n.mulAssign(a.mul(2)),n.assign(n.div(Zc.z)),n.y.assign(n.y.mul(o)),n.assign(n.mul(t.w)),t.addAssign(en(n,0,0)),t}get alphaToCoverage(){return this._useAlphaToCoverage}set alphaToCoverage(e){this._useAlphaToCoverage!==e&&(this._useAlphaToCoverage=e,this.needsUpdate=!0)}}class gm extends Kh{constructor(){super(),this.shadowNode=zi(1).toVar("shadowMask")}direct({shadowMask:e}){this.shadowNode.mulAssign(e)}finish(e){Nn.a.mulAssign(this.shadowNode.oneMinus()),e.outgoingLight.rgb.assign(Nn.rgb)}}const mm=new Te;class fm extends wh{static get type(){return"ShadowNodeMaterial"}constructor(e){super(),this.isShadowNodeMaterial=!0,this.lights=!0,this.setDefaultValues(mm),this.setValues(e)}setupLightingModel(){return new gm}}const ym=_n("vec3"),xm=_n("vec3"),bm=_n("vec3");class Tm extends Kh{constructor(){super()}start(e){const{material:t,context:r}=e,s=_n("vec3"),i=_n("vec3");Oi(rl.sub(Al).length().greaterThan(yl.mul(2)),(()=>{s.assign(rl),i.assign(Al)})).Else((()=>{s.assign(Al),i.assign(rl)}));const n=i.sub(s),o=bn("int").onRenderUpdate((({material:e})=>e.steps)),a=n.length().div(o).toVar(),u=n.normalize().toVar(),l=zi(0).toVar(),d=Yi(1).toVar();t.offsetNode&&l.addAssign(t.offsetNode.mul(a)),Ic(o,(()=>{const i=s.add(u.mul(l)),n=Ju.mul(en(i,1)).xyz;let o;null!==t.depthNode&&(xm.assign(bh(gh(n.z,Ku,Yu))),r.sceneDepthNode=bh(t.depthNode).toVar()),r.positionWorld=i,r.shadowPositionWorld=i,r.positionView=n,ym.assign(0),t.scatteringNode&&(o=t.scatteringNode({positionRay:i})),super.start(e),o&&ym.mulAssign(o);const c=ym.mul(.01).negate().mul(a).exp();d.mulAssign(c),l.addAssign(a)})),bm.addAssign(d.saturate().oneMinus())}scatteringLight(e,t){const r=t.context.sceneDepthNode;r?Oi(r.greaterThanEqual(xm),(()=>{ym.addAssign(e)})):ym.addAssign(e)}direct({lightNode:e,lightColor:t},r){if(void 0===e.light.distance)return;const s=t.xyz.toVar();s.mulAssign(e.shadowNode),this.scatteringLight(s,r)}directRectArea({lightColor:e,lightPosition:t,halfWidth:r,halfHeight:s},i){const n=t.add(r).sub(s),o=t.sub(r).sub(s),a=t.sub(r).add(s),u=t.add(r).add(s),l=i.context.positionView,d=e.xyz.mul(wp({P:l,p0:n,p1:o,p2:a,p3:u})).pow(1.5);this.scatteringLight(d,i)}finish(e){e.context.outgoingLight.assign(bm)}}class _m extends wh{static get type(){return"VolumeNodeMaterial"}constructor(e){super(),this.isVolumeNodeMaterial=!0,this.steps=25,this.offsetNode=null,this.scatteringNode=null,this.lights=!0,this.transparent=!0,this.side=N,this.depthTest=!1,this.depthWrite=!1,this.setValues(e)}setupLightingModel(){return new Tm}}class vm{constructor(e,t){this.nodes=e,this.info=t,this._context=self,this._animationLoop=null,this._requestId=null}start(){const e=(t,r)=>{this._requestId=this._context.requestAnimationFrame(e),!0===this.info.autoReset&&this.info.reset(),this.nodes.nodeFrame.update(),this.info.frame=this.nodes.nodeFrame.frameId,null!==this._animationLoop&&this._animationLoop(t,r)};e()}stop(){this._context.cancelAnimationFrame(this._requestId),this._requestId=null}getAnimationLoop(){return this._animationLoop}setAnimationLoop(e){this._animationLoop=e}getContext(){return this._context}setContext(e){this._context=e}dispose(){this.stop()}}class Nm{constructor(){this.weakMap=new WeakMap}get(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return;return t.get(e[e.length-1])}set(e,t){let r=this.weakMap;for(let t=0;t<e.length-1;t++){const s=e[t];!1===r.has(s)&&r.set(s,new WeakMap),r=r.get(s)}return r.set(e[e.length-1],t),this}delete(e){let t=this.weakMap;for(let r=0;r<e.length-1;r++)if(t=t.get(e[r]),void 0===t)return!1;return t.delete(e[e.length-1])}}let Sm=0;class Em{constructor(e,t,r,s,i,n,o,a,u,l){this.id=Sm++,this._nodes=e,this._geometries=t,this.renderer=r,this.object=s,this.material=i,this.scene=n,this.camera=o,this.lightsNode=a,this.context=u,this.geometry=s.geometry,this.version=i.version,this.drawRange=null,this.attributes=null,this.pipeline=null,this.group=null,this.vertexBuffers=null,this.drawParams=null,this.bundle=null,this.clippingContext=l,this.clippingContextCacheKey=null!==l?l.cacheKey:"",this.initialNodesCacheKey=this.getDynamicCacheKey(),this.initialCacheKey=this.getCacheKey(),this._nodeBuilderState=null,this._bindings=null,this._monitor=null,this.onDispose=null,this.isRenderObject=!0,this.onMaterialDispose=()=>{this.dispose()},this.material.addEventListener("dispose",this.onMaterialDispose)}updateClipping(e){this.clippingContext=e}get clippingNeedsUpdate(){return null!==this.clippingContext&&this.clippingContext.cacheKey!==this.clippingContextCacheKey&&(this.clippingContextCacheKey=this.clippingContext.cacheKey,!0)}get hardwareClippingPlanes(){return!0===this.material.hardwareClipping?this.clippingContext.unionClippingCount:0}getNodeBuilderState(){return this._nodeBuilderState||(this._nodeBuilderState=this._nodes.getForRender(this))}getMonitor(){return this._monitor||(this._monitor=this.getNodeBuilderState().observer)}getBindings(){return this._bindings||(this._bindings=this.getNodeBuilderState().createBindings())}getBindingGroup(e){for(const t of this.getBindings())if(t.name===e)return t}getIndex(){return this._geometries.getIndex(this)}getIndirect(){return this._geometries.getIndirect(this)}getChainArray(){return[this.object,this.material,this.context,this.lightsNode]}setGeometry(e){this.geometry=e,this.attributes=null}getAttributes(){if(null!==this.attributes)return this.attributes;const e=this.getNodeBuilderState().nodeAttributes,t=this.geometry,r=[],s=new Set;for(const i of e){const e=i.node&&i.node.attribute?i.node.attribute:t.getAttribute(i.name);if(void 0===e)continue;r.push(e);const n=e.isInterleavedBufferAttribute?e.data:e;s.add(n)}return this.attributes=r,this.vertexBuffers=Array.from(s.values()),r}getVertexBuffers(){return null===this.vertexBuffers&&this.getAttributes(),this.vertexBuffers}getDrawParameters(){const{object:e,material:t,geometry:r,group:s,drawRange:i}=this,n=this.drawParams||(this.drawParams={vertexCount:0,firstVertex:0,instanceCount:0,firstInstance:0}),o=this.getIndex(),a=null!==o,u=r.isInstancedBufferGeometry?r.instanceCount:e.count>1?e.count:1;if(0===u)return null;if(n.instanceCount=u,!0===e.isBatchedMesh)return n;let l=1;!0!==t.wireframe||e.isPoints||e.isLineSegments||e.isLine||e.isLineLoop||(l=2);let d=i.start*l,c=(i.start+i.count)*l;null!==s&&(d=Math.max(d,s.start*l),c=Math.min(c,(s.start+s.count)*l));const h=r.attributes.position;let p=1/0;a?p=o.count:null!=h&&(p=h.count),d=Math.max(d,0),c=Math.min(c,p);const g=c-d;return g<0||g===1/0?null:(n.vertexCount=g,n.firstVertex=d,n)}getGeometryCacheKey(){const{geometry:e}=this;let t="";for(const r of Object.keys(e.attributes).sort()){const s=e.attributes[r];t+=r+",",s.data&&(t+=s.data.stride+","),s.offset&&(t+=s.offset+","),s.itemSize&&(t+=s.itemSize+","),s.normalized&&(t+="n,")}for(const r of Object.keys(e.morphAttributes).sort()){const s=e.morphAttributes[r];t+="morph-"+r+",";for(let e=0,r=s.length;e<r;e++){t+=s[e].id+","}}return e.index&&(t+="index,"),t}getMaterialCacheKey(){const{object:e,material:t}=this;let r=t.customProgramCacheKey();for(const e of function(e){const t=Object.keys(e);let r=Object.getPrototypeOf(e);for(;r;){const e=Object.getOwnPropertyDescriptors(r);for(const r in e)if(void 0!==e[r]){const s=e[r];s&&"function"==typeof s.get&&t.push(r)}r=Object.getPrototypeOf(r)}return t}(t)){if(/^(is[A-Z]|_)|^(visible|version|uuid|name|opacity|userData)$/.test(e))continue;const s=t[e];let i;if(null!==s){const e=typeof s;"number"===e?i=0!==s?"1":"0":"object"===e?(i="{",s.isTexture&&(i+=s.mapping),i+="}"):i=String(s)}else i=String(s);r+=i+","}return r+=this.clippingContextCacheKey+",",e.geometry&&(r+=this.getGeometryCacheKey()),e.skeleton&&(r+=e.skeleton.bones.length+","),e.isBatchedMesh&&(r+=e._matricesTexture.uuid+",",null!==e._colorsTexture&&(r+=e._colorsTexture.uuid+",")),e.count>1&&(r+=e.uuid+","),r+=e.receiveShadow+",",xs(r)}get needsGeometryUpdate(){return this.geometry.id!==this.object.geometry.id}get needsUpdate(){return this.initialNodesCacheKey!==this.getDynamicCacheKey()||this.clippingNeedsUpdate}getDynamicCacheKey(){let e=0;return!0!==this.material.isShadowPassMaterial&&(e=this._nodes.getCacheKey(this.scene,this.lightsNode)),this.camera.isArrayCamera&&(e=Ts(e,this.camera.cameras.length)),this.object.receiveShadow&&(e=Ts(e,1)),e}getCacheKey(){return this.getMaterialCacheKey()+this.getDynamicCacheKey()}dispose(){this.material.removeEventListener("dispose",this.onMaterialDispose),this.onDispose()}}const wm=[];class Am{constructor(e,t,r,s,i,n){this.renderer=e,this.nodes=t,this.geometries=r,this.pipelines=s,this.bindings=i,this.info=n,this.chainMaps={}}get(e,t,r,s,i,n,o,a){const u=this.getChainMap(a);wm[0]=e,wm[1]=t,wm[2]=n,wm[3]=i;let l=u.get(wm);return void 0===l?(l=this.createRenderObject(this.nodes,this.geometries,this.renderer,e,t,r,s,i,n,o,a),u.set(wm,l)):(l.updateClipping(o),l.needsGeometryUpdate&&l.setGeometry(e.geometry),(l.version!==t.version||l.needsUpdate)&&(l.initialCacheKey!==l.getCacheKey()?(l.dispose(),l=this.get(e,t,r,s,i,n,o,a)):l.version=t.version)),wm.length=0,l}getChainMap(e="default"){return this.chainMaps[e]||(this.chainMaps[e]=new Nm)}dispose(){this.chainMaps={}}createRenderObject(e,t,r,s,i,n,o,a,u,l,d){const c=this.getChainMap(d),h=new Em(e,t,r,s,i,n,o,a,u,l);return h.onDispose=()=>{this.pipelines.delete(h),this.bindings.delete(h),this.nodes.delete(h),c.delete(h.getChainArray())},h}}class Rm{constructor(){this.data=new WeakMap}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}delete(e){let t=null;return this.data.has(e)&&(t=this.data.get(e),this.data.delete(e)),t}has(e){return this.data.has(e)}dispose(){this.data=new WeakMap}}const Cm=1,Mm=2,Fm=3,Bm=4,Pm=16;class Im extends Rm{constructor(e){super(),this.backend=e}delete(e){const t=super.delete(e);return null!==t&&this.backend.destroyAttribute(e),t}update(e,t){const r=this.get(e);if(void 0===r.version)t===Cm?this.backend.createAttribute(e):t===Mm?this.backend.createIndexAttribute(e):t===Fm?this.backend.createStorageAttribute(e):t===Bm&&this.backend.createIndirectStorageAttribute(e),r.version=this._getBufferAttribute(e).version;else{const t=this._getBufferAttribute(e);(r.version<t.version||t.usage===y)&&(this.backend.updateAttribute(e),r.version=t.version)}}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}function Lm(e){return null!==e.index?e.index.version:e.attributes.position.version}function Dm(e){const t=[],r=e.index,s=e.attributes.position;if(null!==r){const e=r.array;for(let r=0,s=e.length;r<s;r+=3){const s=e[r+0],i=e[r+1],n=e[r+2];t.push(s,i,i,n,n,s)}}else{for(let e=0,r=s.array.length/3-1;e<r;e+=3){const r=e+0,s=e+1,i=e+2;t.push(r,s,s,i,i,r)}}const i=new(Ne(t)?_e:ve)(t,1);return i.version=Lm(e),i}class Vm extends Rm{constructor(e,t){super(),this.attributes=e,this.info=t,this.wireframes=new WeakMap,this.attributeCall=new WeakMap}has(e){const t=e.geometry;return super.has(t)&&!0===this.get(t).initialized}updateForRender(e){!1===this.has(e)&&this.initGeometry(e),this.updateAttributes(e)}initGeometry(e){const t=e.geometry;this.get(t).initialized=!0,this.info.memory.geometries++;const r=()=>{this.info.memory.geometries--;const s=t.index,i=e.getAttributes();null!==s&&this.attributes.delete(s);for(const e of i)this.attributes.delete(e);const n=this.wireframes.get(t);void 0!==n&&this.attributes.delete(n),t.removeEventListener("dispose",r)};t.addEventListener("dispose",r)}updateAttributes(e){const t=e.getAttributes();for(const e of t)e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute?this.updateAttribute(e,Fm):this.updateAttribute(e,Cm);const r=this.getIndex(e);null!==r&&this.updateAttribute(r,Mm);const s=e.geometry.indirect;null!==s&&this.updateAttribute(s,Bm)}updateAttribute(e,t){const r=this.info.render.calls;e.isInterleavedBufferAttribute?void 0===this.attributeCall.get(e)?(this.attributes.update(e,t),this.attributeCall.set(e,r)):this.attributeCall.get(e.data)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e.data,r),this.attributeCall.set(e,r)):this.attributeCall.get(e)!==r&&(this.attributes.update(e,t),this.attributeCall.set(e,r))}getIndirect(e){return e.geometry.indirect}getIndex(e){const{geometry:t,material:r}=e;let s=t.index;if(!0===r.wireframe){const e=this.wireframes;let r=e.get(t);void 0===r?(r=Dm(t),e.set(t,r)):r.version!==Lm(t)&&(this.attributes.delete(r),r=Dm(t),e.set(t,r)),s=r}return s}}class Um{constructor(){this.autoReset=!0,this.frame=0,this.calls=0,this.render={calls:0,frameCalls:0,drawCalls:0,triangles:0,points:0,lines:0,timestamp:0},this.compute={calls:0,frameCalls:0,timestamp:0},this.memory={geometries:0,textures:0}}update(e,t,r){this.render.drawCalls++,e.isMesh||e.isSprite?this.render.triangles+=r*(t/3):e.isPoints?this.render.points+=r*t:e.isLineSegments?this.render.lines+=r*(t/2):e.isLine?this.render.lines+=r*(t-1):console.error("THREE.WebGPUInfo: Unknown object type.")}reset(){this.render.drawCalls=0,this.render.frameCalls=0,this.compute.frameCalls=0,this.render.triangles=0,this.render.points=0,this.render.lines=0}dispose(){this.reset(),this.calls=0,this.render.calls=0,this.compute.calls=0,this.render.timestamp=0,this.compute.timestamp=0,this.memory.geometries=0,this.memory.textures=0}}class Om{constructor(e){this.cacheKey=e,this.usedTimes=0}}class Gm extends Om{constructor(e,t,r){super(e),this.vertexProgram=t,this.fragmentProgram=r}}class km extends Om{constructor(e,t){super(e),this.computeProgram=t,this.isComputePipeline=!0}}let zm=0;class Wm{constructor(e,t,r,s=null,i=null){this.id=zm++,this.code=e,this.stage=t,this.name=r,this.transforms=s,this.attributes=i,this.usedTimes=0}}class $m extends Rm{constructor(e,t){super(),this.backend=e,this.nodes=t,this.bindings=null,this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}getForCompute(e,t){const{backend:r}=this,s=this.get(e);if(this._needsComputeUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.computeProgram.usedTimes--);const n=this.nodes.getForCompute(e);let o=this.programs.compute.get(n.computeShader);void 0===o&&(i&&0===i.computeProgram.usedTimes&&this._releaseProgram(i.computeProgram),o=new Wm(n.computeShader,"compute",e.name,n.transforms,n.nodeAttributes),this.programs.compute.set(n.computeShader,o),r.createProgram(o));const a=this._getComputeCacheKey(e,o);let u=this.caches.get(a);void 0===u&&(i&&0===i.usedTimes&&this._releasePipeline(i),u=this._getComputePipeline(e,o,a,t)),u.usedTimes++,o.usedTimes++,s.version=e.version,s.pipeline=u}return s.pipeline}getForRender(e,t=null){const{backend:r}=this,s=this.get(e);if(this._needsRenderUpdate(e)){const i=s.pipeline;i&&(i.usedTimes--,i.vertexProgram.usedTimes--,i.fragmentProgram.usedTimes--);const n=e.getNodeBuilderState(),o=e.material?e.material.name:"";let a=this.programs.vertex.get(n.vertexShader);void 0===a&&(i&&0===i.vertexProgram.usedTimes&&this._releaseProgram(i.vertexProgram),a=new Wm(n.vertexShader,"vertex",o),this.programs.vertex.set(n.vertexShader,a),r.createProgram(a));let u=this.programs.fragment.get(n.fragmentShader);void 0===u&&(i&&0===i.fragmentProgram.usedTimes&&this._releaseProgram(i.fragmentProgram),u=new Wm(n.fragmentShader,"fragment",o),this.programs.fragment.set(n.fragmentShader,u),r.createProgram(u));const l=this._getRenderCacheKey(e,a,u);let d=this.caches.get(l);void 0===d?(i&&0===i.usedTimes&&this._releasePipeline(i),d=this._getRenderPipeline(e,a,u,l,t)):e.pipeline=d,d.usedTimes++,a.usedTimes++,u.usedTimes++,s.pipeline=d}return s.pipeline}delete(e){const t=this.get(e).pipeline;return t&&(t.usedTimes--,0===t.usedTimes&&this._releasePipeline(t),t.isComputePipeline?(t.computeProgram.usedTimes--,0===t.computeProgram.usedTimes&&this._releaseProgram(t.computeProgram)):(t.fragmentProgram.usedTimes--,t.vertexProgram.usedTimes--,0===t.vertexProgram.usedTimes&&this._releaseProgram(t.vertexProgram),0===t.fragmentProgram.usedTimes&&this._releaseProgram(t.fragmentProgram))),super.delete(e)}dispose(){super.dispose(),this.caches=new Map,this.programs={vertex:new Map,fragment:new Map,compute:new Map}}updateForRender(e){this.getForRender(e)}_getComputePipeline(e,t,r,s){r=r||this._getComputeCacheKey(e,t);let i=this.caches.get(r);return void 0===i&&(i=new km(r,t),this.caches.set(r,i),this.backend.createComputePipeline(i,s)),i}_getRenderPipeline(e,t,r,s,i){s=s||this._getRenderCacheKey(e,t,r);let n=this.caches.get(s);return void 0===n&&(n=new Gm(s,t,r),this.caches.set(s,n),e.pipeline=n,this.backend.createRenderPipeline(e,i)),n}_getComputeCacheKey(e,t){return e.id+","+t.id}_getRenderCacheKey(e,t,r){return t.id+","+r.id+","+this.backend.getRenderCacheKey(e)}_releasePipeline(e){this.caches.delete(e.cacheKey)}_releaseProgram(e){const t=e.code,r=e.stage;this.programs[r].delete(t)}_needsComputeUpdate(e){const t=this.get(e);return void 0===t.pipeline||t.version!==e.version}_needsRenderUpdate(e){return void 0===this.get(e).pipeline||this.backend.needsRenderUpdate(e)}}class Hm extends Rm{constructor(e,t,r,s,i,n){super(),this.backend=e,this.textures=r,this.pipelines=i,this.attributes=s,this.nodes=t,this.info=n,this.pipelines.bindings=this}getForRender(e){const t=e.getBindings();for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}getForCompute(e){const t=this.nodes.getForCompute(e).bindings;for(const e of t){const r=this.get(e);void 0===r.bindGroup&&(this._init(e),this.backend.createBindings(e,t,0),r.bindGroup=e)}return t}updateForCompute(e){this._updateBindings(this.getForCompute(e))}updateForRender(e){this._updateBindings(this.getForRender(e))}_updateBindings(e){for(const t of e)this._update(t,e)}_init(e){for(const t of e.bindings)if(t.isSampledTexture)this.textures.updateTexture(t.texture);else if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?Bm:Fm;this.attributes.update(e,r)}}_update(e,t){const{backend:r}=this;let s=!1,i=!0,n=0,o=0;for(const t of e.bindings){if(t.isNodeUniformsGroup){if(!1===this.nodes.updateGroup(t))continue}if(t.isStorageBuffer){const e=t.attribute,r=e.isIndirectStorageBufferAttribute?Bm:Fm;this.attributes.update(e,r)}if(t.isUniformBuffer){t.update()&&r.updateBinding(t)}else if(t.isSampler)t.update();else if(t.isSampledTexture){const e=this.textures.get(t.texture);t.needsBindingsUpdate(e.generation)&&(s=!0);const a=t.update(),u=t.texture;a&&this.textures.updateTexture(u);const l=r.get(u);if(void 0!==l.externalTexture||e.isDefaultTexture?i=!1:(n=10*n+u.id,o+=u.version),!0===r.isWebGPUBackend&&void 0===l.texture&&void 0===l.externalTexture&&(console.error("Bindings._update: binding should be available:",t,a,u,t.textureNode.value,s),this.textures.updateTexture(u),s=!0),!0===u.isStorageTexture){const e=this.get(u);!0===t.store?e.needsMipmap=!0:this.textures.needsMipmaps(u)&&!0===e.needsMipmap&&(this.backend.generateMipmaps(u),e.needsMipmap=!1)}}}!0===s&&this.backend.updateBindings(e,t,i?n:0,o)}}function jm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.material.id!==t.material.id?e.material.id-t.material.id:e.z!==t.z?e.z-t.z:e.id-t.id}function qm(e,t){return e.groupOrder!==t.groupOrder?e.groupOrder-t.groupOrder:e.renderOrder!==t.renderOrder?e.renderOrder-t.renderOrder:e.z!==t.z?t.z-e.z:e.id-t.id}function Xm(e){return(e.transmission>0||e.transmissionNode)&&e.side===Se&&!1===e.forceSinglePass}class Km{constructor(e,t,r){this.renderItems=[],this.renderItemsIndex=0,this.opaque=[],this.transparentDoublePass=[],this.transparent=[],this.bundles=[],this.lightsNode=e.getNode(t,r),this.lightsArray=[],this.scene=t,this.camera=r,this.occlusionQueryCount=0}begin(){return this.renderItemsIndex=0,this.opaque.length=0,this.transparentDoublePass.length=0,this.transparent.length=0,this.bundles.length=0,this.lightsArray.length=0,this.occlusionQueryCount=0,this}getNextRenderItem(e,t,r,s,i,n,o){let a=this.renderItems[this.renderItemsIndex];return void 0===a?(a={id:e.id,object:e,geometry:t,material:r,groupOrder:s,renderOrder:e.renderOrder,z:i,group:n,clippingContext:o},this.renderItems[this.renderItemsIndex]=a):(a.id=e.id,a.object=e,a.geometry=t,a.material=r,a.groupOrder=s,a.renderOrder=e.renderOrder,a.z=i,a.group=n,a.clippingContext=o),this.renderItemsIndex++,a}push(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===e.occlusionTest&&this.occlusionQueryCount++,!0===r.transparent||r.transmission>0?(Xm(r)&&this.transparentDoublePass.push(a),this.transparent.push(a)):this.opaque.push(a)}unshift(e,t,r,s,i,n,o){const a=this.getNextRenderItem(e,t,r,s,i,n,o);!0===r.transparent||r.transmission>0?(Xm(r)&&this.transparentDoublePass.unshift(a),this.transparent.unshift(a)):this.opaque.unshift(a)}pushBundle(e){this.bundles.push(e)}pushLight(e){this.lightsArray.push(e)}sort(e,t){this.opaque.length>1&&this.opaque.sort(e||jm),this.transparentDoublePass.length>1&&this.transparentDoublePass.sort(t||qm),this.transparent.length>1&&this.transparent.sort(t||qm)}finish(){this.lightsNode.setLights(this.lightsArray);for(let e=this.renderItemsIndex,t=this.renderItems.length;e<t;e++){const t=this.renderItems[e];if(null===t.id)break;t.id=null,t.object=null,t.geometry=null,t.material=null,t.groupOrder=null,t.renderOrder=null,t.z=null,t.group=null,t.clippingContext=null}}}const Ym=[];class Qm{constructor(e){this.lighting=e,this.lists=new Nm}get(e,t){const r=this.lists;Ym[0]=e,Ym[1]=t;let s=r.get(Ym);return void 0===s&&(s=new Km(this.lighting,e,t),r.set(Ym,s)),Ym.length=0,s}dispose(){this.lists=new Nm}}let Zm=0;class Jm{constructor(){this.id=Zm++,this.color=!0,this.clearColor=!0,this.clearColorValue={r:0,g:0,b:0,a:1},this.depth=!0,this.clearDepth=!0,this.clearDepthValue=1,this.stencil=!1,this.clearStencil=!0,this.clearStencilValue=1,this.viewport=!1,this.viewportValue=new s,this.scissor=!1,this.scissorValue=new s,this.renderTarget=null,this.textures=null,this.depthTexture=null,this.activeCubeFace=0,this.activeMipmapLevel=0,this.sampleCount=1,this.width=0,this.height=0,this.occlusionQueryCount=0,this.clippingContext=null,this.isRenderContext=!0}getCacheKey(){return ef(this)}}function ef(e){const{textures:t,activeCubeFace:r}=e,s=[r];for(const e of t)s.push(e.id);return bs(s)}const tf=[],rf=new j,sf=new Ee;class nf{constructor(){this.chainMaps={}}get(e,t,r=null){let s;if(tf[0]=e,tf[1]=t,null===r)s="default";else{const e=r.texture.format;s=`${r.textures.length}:${e}:${r.samples}:${r.depthBuffer}:${r.stencilBuffer}`}const i=this._getChainMap(s);let n=i.get(tf);return void 0===n&&(n=new Jm,i.set(tf,n)),tf.length=0,null!==r&&(n.sampleCount=0===r.samples?1:r.samples),n}getForClear(e=null){return this.get(rf,sf,e)}_getChainMap(e){return this.chainMaps[e]||(this.chainMaps[e]=new Nm)}dispose(){this.chainMaps={}}}const of=new r;class af extends Rm{constructor(e,t,r){super(),this.renderer=e,this.backend=t,this.info=r}updateRenderTarget(e,t=0){const r=this.get(e),s=0===e.samples?1:e.samples,i=r.depthTextureMips||(r.depthTextureMips={}),n=e.textures,o=this.getSize(n[0]),a=o.width>>t,u=o.height>>t;let l=e.depthTexture||i[t];const d=!0===e.depthBuffer||!0===e.stencilBuffer;let c=!1;void 0===l&&d&&(l=new L,l.format=e.stencilBuffer?we:Ae,l.type=e.stencilBuffer?Re:b,l.image.width=a,l.image.height=u,i[t]=l),r.width===o.width&&o.height===r.height||(c=!0,l&&(l.needsUpdate=!0,l.image.width=a,l.image.height=u)),r.width=o.width,r.height=o.height,r.textures=n,r.depthTexture=l||null,r.depth=e.depthBuffer,r.stencil=e.stencilBuffer,r.renderTarget=e,r.sampleCount!==s&&(c=!0,l&&(l.needsUpdate=!0),r.sampleCount=s);const h={sampleCount:s};if(!0!==e.isXRRenderTarget){for(let e=0;e<n.length;e++){const t=n[e];c&&(t.needsUpdate=!0),this.updateTexture(t,h)}l&&this.updateTexture(l,h)}if(!0!==r.initialized){r.initialized=!0;const t=()=>{e.removeEventListener("dispose",t);for(let e=0;e<n.length;e++)this._destroyTexture(n[e]);l&&this._destroyTexture(l),this.delete(e)};e.addEventListener("dispose",t)}}updateTexture(e,t={}){const r=this.get(e);if(!0===r.initialized&&r.version===e.version)return;const s=e.isRenderTargetTexture||e.isDepthTexture||e.isFramebufferTexture,i=this.backend;if(s&&!0===r.initialized&&(i.destroySampler(e),i.destroyTexture(e)),e.isFramebufferTexture){const t=this.renderer.getRenderTarget();e.type=t?t.texture.type:Ce}const{width:n,height:o,depth:a}=this.getSize(e);if(t.width=n,t.height=o,t.depth=a,t.needsMipmaps=this.needsMipmaps(e),t.levels=t.needsMipmaps?this.getMipLevels(e,n,o):1,s||!0===e.isStorageTexture)i.createSampler(e),i.createTexture(e,t),r.generation=e.version;else{if(!0!==r.initialized&&i.createSampler(e),e.version>0){const s=e.image;if(void 0===s)console.warn("THREE.Renderer: Texture marked for update but image is undefined.");else if(!1===s.complete)console.warn("THREE.Renderer: Texture marked for update but image is incomplete.");else{if(e.images){const r=[];for(const t of e.images)r.push(t);t.images=r}else t.image=s;void 0!==r.isDefaultTexture&&!0!==r.isDefaultTexture||(i.createTexture(e,t),r.isDefaultTexture=!1,r.generation=e.version),!0===e.source.dataReady&&i.updateTexture(e,t),t.needsMipmaps&&0===e.mipmaps.length&&i.generateMipmaps(e)}}else i.createDefaultTexture(e),r.isDefaultTexture=!0,r.generation=e.version}if(!0!==r.initialized){r.initialized=!0,r.generation=e.version,this.info.memory.textures++;const t=()=>{e.removeEventListener("dispose",t),this._destroyTexture(e),this.info.memory.textures--};e.addEventListener("dispose",t)}r.version=e.version}getSize(e,t=of){let r=e.images?e.images[0]:e.image;return r?(void 0!==r.image&&(r=r.image),t.width=r.width||1,t.height=r.height||1,t.depth=e.isCubeTexture?6:r.depth||1):t.width=t.height=t.depth=1,t}getMipLevels(e,t,r){let s;return s=e.isCompressedTexture?e.mipmaps?e.mipmaps.length:1:Math.floor(Math.log2(Math.max(t,r)))+1,s}needsMipmaps(e){return this.isEnvironmentTexture(e)||!0===e.isCompressedTexture||e.generateMipmaps}isEnvironmentTexture(e){const t=e.mapping;return t===Y||t===Q||t===E||t===w}_destroyTexture(e){this.backend.destroySampler(e),this.backend.destroyTexture(e),this.delete(e)}}class uf extends e{constructor(e,t,r,s=1){super(e,t,r),this.a=s}set(e,t,r,s=1){return this.a=s,super.set(e,t,r)}copy(e){return void 0!==e.a&&(this.a=e.a),super.copy(e)}clone(){return new this.constructor(this.r,this.g,this.b,this.a)}}class lf extends Tn{static get type(){return"ParameterNode"}constructor(e,t=null){super(e,t),this.isParameterNode=!0}getHash(){return this.uuid}generate(){return this.name}}class df extends Ws{static get type(){return"StackNode"}constructor(e=null){super(),this.nodes=[],this.outputNode=null,this.parent=e,this._currentCond=null,this.isStackNode=!0}getNodeType(e){return this.outputNode?this.outputNode.getNodeType(e):"void"}getMemberType(e,t){return this.outputNode?this.outputNode.getMemberType(e,t):"void"}add(e){return this.nodes.push(e),this}If(e,t){const r=new Mi(t);return this._currentCond=Oa(e,r),this.add(this._currentCond)}ElseIf(e,t){const r=new Mi(t),s=Oa(e,r);return this._currentCond.elseNode=s,this._currentCond=s,this}Else(e){return this._currentCond.elseNode=new Mi(e),this}build(e,...t){const r=Ui();Vi(this);for(const t of this.nodes)t.build(e,"void");return Vi(r),this.outputNode?this.outputNode.build(e,...t):super.build(e,...t)}else(...e){return console.warn("TSL.StackNode: .else() has been renamed to .Else()."),this.Else(...e)}elseif(...e){return console.warn("TSL.StackNode: .elseif() has been renamed to .ElseIf()."),this.ElseIf(...e)}}const cf=Ii(df);class hf extends Ws{static get type(){return"StructTypeNode"}constructor(e,t=null){var r;super("struct"),this.membersLayout=(r=e,Object.entries(r).map((([e,t])=>"string"==typeof t?{name:e,type:t,atomic:!1}:{name:e,type:t.type,atomic:t.atomic||!1}))),this.name=t,this.isStructLayoutNode=!0}getLength(){let e=0;for(const t of this.membersLayout)e+=As(t.type);return e}getMemberType(e,t){const r=this.membersLayout.find((e=>e.name===t));return r?r.type:"void"}getNodeType(e){return e.getStructTypeFromNode(this,this.membersLayout,this.name).name}setup(e){e.addInclude(this)}generate(e){return this.getNodeType(e)}}class pf extends Ws{static get type(){return"StructNode"}constructor(e,t){super("vec3"),this.structLayoutNode=e,this.values=t,this.isStructNode=!0}getNodeType(e){return this.structLayoutNode.getNodeType(e)}getMemberType(e,t){return this.structLayoutNode.getMemberType(e,t)}generate(e){const t=e.getVarFromNode(this),r=t.type,s=e.getPropertyName(t);return e.addLineFlowCode(`${s} = ${e.generateStruct(r,this.structLayoutNode.membersLayout,this.values)}`,this),t.name}}class gf extends Ws{static get type(){return"OutputStructNode"}constructor(...e){super(),this.members=e,this.isOutputStructNode=!0}getNodeType(e){const t=e.getNodeProperties(this);if(void 0===t.membersLayout){const r=this.members,s=[];for(let t=0;t<r.length;t++){const i="m"+t,n=r[t].getNodeType(e);s.push({name:i,type:n,index:t})}t.membersLayout=s,t.structType=e.getOutputStructTypeFromNode(this,t.membersLayout)}return t.structType.name}generate(e){const t=e.getOutputStructName(),r=this.members,s=""!==t?t+".":"";for(let t=0;t<r.length;t++){const i=r[t].build(e);e.addLineFlowCode(`${s}m${t} = ${i}`,this)}return t}}const mf=Ii(gf);function ff(e,t){for(let r=0;r<e.length;r++)if(e[r].name===t)return r;return-1}class yf extends gf{static get type(){return"MRTNode"}constructor(e){super(),this.outputNodes=e,this.isMRTNode=!0}has(e){return void 0!==this.outputNodes[e]}get(e){return this.outputNodes[e]}merge(e){const t={...this.outputNodes,...e.outputNodes};return xf(t)}setup(e){const t=this.outputNodes,r=[],s=e.renderer.getRenderTarget().textures;for(const e in t){r[ff(s,e)]=en(t[e])}return this.members=r,super.setup(e)}}const xf=Ii(yf),bf=Di((([e])=>{const t=e.toUint().mul(747796405).add(2891336453),r=t.shiftRight(t.shiftRight(28).add(4)).bitXor(t).mul(277803737);return r.shiftRight(22).bitXor(r).toFloat().mul(1/2**32)})),Tf=(e,t)=>ba(io(4,e.mul(so(1,e))),t),_f=Di((([e])=>e.fract().sub(.5).abs())).setLayout({name:"tri",type:"float",inputs:[{name:"x",type:"float"}]}),vf=Di((([e])=>Yi(_f(e.z.add(_f(e.y.mul(1)))),_f(e.z.add(_f(e.x.mul(1)))),_f(e.y.add(_f(e.x.mul(1))))))).setLayout({name:"tri3",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Nf=Di((([e,t,r])=>{const s=Yi(e).toVar(),i=zi(1.4).toVar(),n=zi(0).toVar(),o=Yi(s).toVar();return Ic({start:zi(0),end:zi(3),type:"float",condition:"<="},(()=>{const e=Yi(vf(o.mul(2))).toVar();s.addAssign(e.add(r.mul(zi(.1).mul(t)))),o.mulAssign(1.8),i.mulAssign(1.5),s.mulAssign(1.2);const a=zi(_f(s.z.add(_f(s.x.add(_f(s.y)))))).toVar();n.addAssign(a.div(i)),o.addAssign(.14)})),n})).setLayout({name:"triNoise3D",type:"float",inputs:[{name:"position",type:"vec3"},{name:"speed",type:"float"},{name:"time",type:"float"}]});class Sf extends Ws{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...t){super(),this.functionNodes=e,this.parametersNodes=t,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const t=this.parametersNodes;let r=this._candidateFnCall;if(null===r){let s=null,i=-1;for(const r of this.functionNodes){const n=r.shaderNode.layout;if(null===n)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const o=n.inputs;if(t.length===o.length){let n=0;for(let r=0;r<t.length;r++){const s=t[r],i=o[r];s.getNodeType(e)===i.type?n++:n=0}n>i&&(s=r,i=n)}}this._candidateFnCall=r=s(...t)}return r}}const Ef=Ii(Sf),wf=e=>(...t)=>Ef(e,...t),Af=bn(0).setGroup(fn).onRenderUpdate((e=>e.time)),Rf=bn(0).setGroup(fn).onRenderUpdate((e=>e.deltaTime)),Cf=bn(0,"uint").setGroup(fn).onRenderUpdate((e=>e.frameId)),Mf=Di((([e,t,r=ji(.5)])=>lm(e.sub(r),t).add(r))),Ff=Di((([e,t,r=ji(.5)])=>{const s=e.sub(r),i=s.dot(s),n=i.mul(i).mul(t);return e.add(s.mul(n))})),Bf=Di((({position:e=null,horizontal:t=!0,vertical:r=!1})=>{let s;null!==e?(s=pl.toVar(),s[3][0]=e.x,s[3][1]=e.y,s[3][2]=e.z):s=pl;const i=Ju.mul(s);return Ri(t)&&(i[0][0]=pl[0].length(),i[0][1]=0,i[0][2]=0),Ri(r)&&(i[1][0]=0,i[1][1]=pl[1].length(),i[1][2]=0),i[2][0]=0,i[2][1]=0,i[2][2]=1,Qu.mul(i).mul(El)})),Pf=Di((([e=null])=>{const t=bh();return bh(ch(e)).sub(t).lessThan(0).select(Kc,e)}));class If extends Ws{static get type(){return"SpriteSheetUVNode"}constructor(e,t=Lu(),r=zi(0)){super("vec2"),this.countNode=e,this.uvNode=t,this.frameNode=r}setup(){const{frameNode:e,uvNode:t,countNode:r}=this,{width:s,height:i}=r,n=e.mod(s.mul(i)).floor(),o=n.mod(s),a=i.sub(n.add(1).div(s).ceil()),u=r.reciprocal(),l=ji(o,a);return t.add(l).mul(u)}}const Lf=Ii(If);class Df extends Ws{static get type(){return"TriplanarTexturesNode"}constructor(e,t=null,r=null,s=zi(1),i=El,n=Ll){super("vec4"),this.textureXNode=e,this.textureYNode=t,this.textureZNode=r,this.scaleNode=s,this.positionNode=i,this.normalNode=n}setup(){const{textureXNode:e,textureYNode:t,textureZNode:r,scaleNode:s,positionNode:i,normalNode:n}=this;let o=n.abs().normalize();o=o.div(o.dot(Yi(1)));const a=i.yz.mul(s),u=i.zx.mul(s),l=i.xy.mul(s),d=e.value,c=null!==t?t.value:d,h=null!==r?r.value:d,p=ku(d,a).mul(o.x),g=ku(c,u).mul(o.y),m=ku(h,l).mul(o.z);return ro(p,g,m)}}const Vf=Ii(Df),Uf=new Me,Of=new r,Gf=new r,kf=new r,zf=new o,Wf=new r(0,0,-1),$f=new s,Hf=new r,jf=new r,qf=new s,Xf=new t,Kf=new oe,Yf=Kc.flipX();Kf.depthTexture=new L(1,1);let Qf=!1;class Zf extends Gu{static get type(){return"ReflectorNode"}constructor(e={}){super(e.defaultTexture||Kf.texture,Yf),this._reflectorBaseNode=e.reflector||new Jf(this,e),this._depthNode=null,this.setUpdateMatrix(!1)}get reflector(){return this._reflectorBaseNode}get target(){return this._reflectorBaseNode.target}getDepthNode(){if(null===this._depthNode){if(!0!==this._reflectorBaseNode.depth)throw new Error("THREE.ReflectorNode: Depth node can only be requested when the reflector is created with { depth: true }. ");this._depthNode=Fi(new Zf({defaultTexture:Kf.depthTexture,reflector:this._reflectorBaseNode}))}return this._depthNode}setup(e){return e.object.isQuadMesh||this._reflectorBaseNode.build(e),super.setup(e)}clone(){const e=new this.constructor(this.reflectorNode);return e._reflectorBaseNode=this._reflectorBaseNode,e}}class Jf extends Ws{static get type(){return"ReflectorBaseNode"}constructor(e,t={}){super();const{target:r=new Fe,resolution:s=1,generateMipmaps:i=!1,bounces:n=!0,depth:o=!1}=t;this.textureNode=e,this.target=r,this.resolution=s,this.generateMipmaps=i,this.bounces=n,this.depth=o,this.updateBeforeType=n?Ls.RENDER:Ls.FRAME,this.virtualCameras=new WeakMap,this.renderTargets=new WeakMap,this.forceUpdate=!1}_updateResolution(e,t){const r=this.resolution;t.getDrawingBufferSize(Xf),e.setSize(Math.round(Xf.width*r),Math.round(Xf.height*r))}setup(e){return this._updateResolution(Kf,e.renderer),super.setup(e)}getVirtualCamera(e){let t=this.virtualCameras.get(e);return void 0===t&&(t=e.clone(),this.virtualCameras.set(e,t)),t}getRenderTarget(e){let t=this.renderTargets.get(e);return void 0===t&&(t=new oe(0,0,{type:he}),!0===this.generateMipmaps&&(t.texture.minFilter=Be,t.texture.generateMipmaps=!0),!0===this.depth&&(t.depthTexture=new L),this.renderTargets.set(e,t)),t}updateBefore(e){if(!1===this.bounces&&Qf)return!1;Qf=!0;const{scene:t,camera:r,renderer:s,material:i}=e,{target:n}=this,o=this.getVirtualCamera(r),a=this.getRenderTarget(o);s.getDrawingBufferSize(Xf),this._updateResolution(a,s),Gf.setFromMatrixPosition(n.matrixWorld),kf.setFromMatrixPosition(r.matrixWorld),zf.extractRotation(n.matrixWorld),Of.set(0,0,1),Of.applyMatrix4(zf),Hf.subVectors(Gf,kf);if(!0===Hf.dot(Of)>0&&!1===this.forceUpdate)return;Hf.reflect(Of).negate(),Hf.add(Gf),zf.extractRotation(r.matrixWorld),Wf.set(0,0,-1),Wf.applyMatrix4(zf),Wf.add(kf),jf.subVectors(Gf,Wf),jf.reflect(Of).negate(),jf.add(Gf),o.coordinateSystem=r.coordinateSystem,o.position.copy(Hf),o.up.set(0,1,0),o.up.applyMatrix4(zf),o.up.reflect(Of),o.lookAt(jf),o.near=r.near,o.far=r.far,o.updateMatrixWorld(),o.projectionMatrix.copy(r.projectionMatrix),Uf.setFromNormalAndCoplanarPoint(Of,Gf),Uf.applyMatrix4(o.matrixWorldInverse),$f.set(Uf.normal.x,Uf.normal.y,Uf.normal.z,Uf.constant);const u=o.projectionMatrix;qf.x=(Math.sign($f.x)+u.elements[8])/u.elements[0],qf.y=(Math.sign($f.y)+u.elements[9])/u.elements[5],qf.z=-1,qf.w=(1+u.elements[10])/u.elements[14],$f.multiplyScalar(1/$f.dot(qf));u.elements[2]=$f.x,u.elements[6]=$f.y,u.elements[10]=s.coordinateSystem===d?$f.z-0:$f.z+1-0,u.elements[14]=$f.w,this.textureNode.value=a.texture,!0===this.depth&&(this.textureNode.getDepthNode().value=a.depthTexture),i.visible=!1;const l=s.getRenderTarget(),c=s.getMRT(),h=s.autoClear;s.setMRT(null),s.setRenderTarget(a),s.autoClear=!0,s.render(t,o),s.setMRT(c),s.setRenderTarget(l),s.autoClear=h,i.visible=!0,Qf=!1,this.forceUpdate=!1}}const ey=new ie(-1,1,1,-1,0,1);class ty extends ue{constructor(e=!1){super();const t=!1===e?[0,-1,0,1,2,1]:[0,2,0,0,2,0];this.setAttribute("position",new Pe([-1,3,0,-1,-1,0,3,-1,0],3)),this.setAttribute("uv",new Pe(t,2))}}const ry=new ty;class sy extends H{constructor(e=null){super(ry,e),this.camera=ey,this.isQuadMesh=!0}async renderAsync(e){return e.renderAsync(this,ey)}render(e){e.render(this,ey)}}const iy=new t;class ny extends Gu{static get type(){return"RTTNode"}constructor(e,t=null,r=null,s={type:he}){const i=new oe(t,r,s);super(i.texture,Lu()),this.node=e,this.width=t,this.height=r,this.pixelRatio=1,this.renderTarget=i,this.textureNeedsUpdate=!0,this.autoUpdate=!0,this._rttNode=null,this._quadMesh=new sy(new wh),this.updateBeforeType=Ls.RENDER}get autoSize(){return null===this.width}setup(e){return this._rttNode=this.node.context(e.getSharedContext()),this._quadMesh.material.name="RTT",this._quadMesh.material.needsUpdate=!0,super.setup(e)}setSize(e,t){this.width=e,this.height=t;const r=e*this.pixelRatio,s=t*this.pixelRatio;this.renderTarget.setSize(r,s),this.textureNeedsUpdate=!0}setPixelRatio(e){this.pixelRatio=e,this.setSize(this.width,this.height)}updateBefore({renderer:e}){if(!1===this.textureNeedsUpdate&&!1===this.autoUpdate)return;if(this.textureNeedsUpdate=!1,!0===this.autoSize){this.pixelRatio=e.getPixelRatio();const t=e.getSize(iy);this.setSize(t.width,t.height)}this._quadMesh.material.fragmentNode=this._rttNode;const t=e.getRenderTarget();e.setRenderTarget(this.renderTarget),this._quadMesh.render(e),e.setRenderTarget(t)}clone(){const e=new Gu(this.value,this.uvNode,this.levelNode);return e.sampler=this.sampler,e.referenceNode=this,e}}const oy=(e,...t)=>Fi(new ny(Fi(e),...t)),ay=Di((([e,t,r],s)=>{let i;s.renderer.coordinateSystem===d?(e=ji(e.x,e.y.oneMinus()).mul(2).sub(1),i=en(Yi(e,t),1)):i=en(Yi(e.x,e.y.oneMinus(),t).mul(2).sub(1),1);const n=en(r.mul(i));return n.xyz.div(n.w)})),uy=Di((([e,t])=>{const r=t.mul(en(e,1)),s=r.xy.div(r.w).mul(.5).add(.5).toVar();return ji(s.x,s.y.oneMinus())})),ly=Di((([e,t,r])=>{const s=Vu(zu(t)),i=qi(e.mul(s)).toVar(),n=zu(t,i).toVar(),o=zu(t,i.sub(qi(2,0))).toVar(),a=zu(t,i.sub(qi(1,0))).toVar(),u=zu(t,i.add(qi(1,0))).toVar(),l=zu(t,i.add(qi(2,0))).toVar(),d=zu(t,i.add(qi(0,2))).toVar(),c=zu(t,i.add(qi(0,1))).toVar(),h=zu(t,i.sub(qi(0,1))).toVar(),p=zu(t,i.sub(qi(0,2))).toVar(),g=Yo(so(zi(2).mul(a).sub(o),n)).toVar(),m=Yo(so(zi(2).mul(u).sub(l),n)).toVar(),f=Yo(so(zi(2).mul(c).sub(d),n)).toVar(),y=Yo(so(zi(2).mul(h).sub(p),n)).toVar(),x=ay(e,n,r).toVar(),b=g.lessThan(m).select(x.sub(ay(e.sub(ji(zi(1).div(s.x),0)),a,r)),x.negate().add(ay(e.add(ji(zi(1).div(s.x),0)),u,r))),T=f.lessThan(y).select(x.sub(ay(e.add(ji(0,zi(1).div(s.y))),c,r)),x.negate().add(ay(e.sub(ji(0,zi(1).div(s.y))),h,r)));return zo(xa(b,T))}));class dy extends M{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageInstancedBufferAttribute=!0}}class cy extends le{constructor(e,t,r=Float32Array){super(ArrayBuffer.isView(e)?e:new r(e*t),t),this.isStorageBufferAttribute=!0}}class hy extends $s{static get type(){return"StorageArrayElementNode"}constructor(e,t){super(e,t),this.isStorageArrayElementNode=!0}set storageBufferNode(e){this.node=e}get storageBufferNode(){return this.node}getMemberType(e,t){const r=this.storageBufferNode.structTypeNode;return r?r.getMemberType(e,t):"void"}setup(e){return!1===e.isAvailable("storageBuffer")&&!0===this.node.isPBO&&e.setupPBO(this.node),super.setup(e)}generate(e,t){let r;const s=e.context.assign;if(r=!1===e.isAvailable("storageBuffer")?!0!==this.node.isPBO||!0===s||!this.node.value.isInstancedBufferAttribute&&"compute"===e.shaderStage?this.node.build(e):e.generatePBO(this):super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}const py=Ii(hy);class gy extends Wu{static get type(){return"StorageBufferNode"}constructor(e,t=null,r=0){let s,i=null;t&&t.isStruct?(s="struct",i=t.layout):null===t&&(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute)?(s=Es(e.itemSize),r=e.count):s=t,super(e,s,r),this.isStorageBufferNode=!0,this.structTypeNode=i,this.access=Vs.READ_WRITE,this.isAtomic=!1,this.isPBO=!1,this._attribute=null,this._varying=null,this.global=!0,!0!==e.isStorageBufferAttribute&&!0!==e.isStorageInstancedBufferAttribute&&(e.isInstancedBufferAttribute?e.isStorageInstancedBufferAttribute=!0:e.isStorageBufferAttribute=!0)}getHash(e){if(0===this.bufferCount){let t=e.globalCache.getData(this.value);return void 0===t&&(t={node:this},e.globalCache.setData(this.value,t)),t.node.uuid}return this.uuid}getInputType(){return this.value.isIndirectStorageBufferAttribute?"indirectStorageBuffer":"storageBuffer"}element(e){return py(this,e)}setPBO(e){return this.isPBO=e,this}getPBO(){return this.isPBO}setAccess(e){return this.access=e,this}toReadOnly(){return this.setAccess(Vs.READ_ONLY)}setAtomic(e){return this.isAtomic=e,this}toAtomic(){return this.setAtomic(!0)}getAttributeData(){return null===this._attribute&&(this._attribute=mu(this.value),this._varying=Ya(this._attribute)),{attribute:this._attribute,varying:this._varying}}getNodeType(e){if(null!==this.structTypeNode)return this.structTypeNode.getNodeType(e);if(e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.getNodeType(e);const{attribute:t}=this.getAttributeData();return t.getNodeType(e)}generate(e){if(null!==this.structTypeNode&&this.structTypeNode.build(e),e.isAvailable("storageBuffer")||e.isAvailable("indirectStorageBuffer"))return super.generate(e);const{attribute:t,varying:r}=this.getAttributeData(),s=r.build(e);return e.registerTransform(s,t),s}}const my=(e,t=null,r=0)=>Fi(new gy(e,t,r));class fy extends Pu{static get type(){return"VertexColorNode"}constructor(e=0){super(null,"vec4"),this.isVertexColorNode=!0,this.index=e}getAttributeName(){const e=this.index;return"color"+(e>0?e:"")}generate(e){const t=this.getAttributeName(e);let r;return r=!0===e.hasGeometryAttribute(t)?super.generate(e):e.generateConst(this.nodeType,new s(1,1,1,1)),r}serialize(e){super.serialize(e),e.index=this.index}deserialize(e){super.deserialize(e),this.index=e.index}}class yy extends Ws{static get type(){return"PointUVNode"}constructor(){super("vec2"),this.isPointUVNode=!0}generate(){return"vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y )"}}const xy=Li(yy),by=new S,Ty=new o;class _y extends Ws{static get type(){return"SceneNode"}constructor(e=_y.BACKGROUND_BLURRINESS,t=null){super(),this.scope=e,this.scene=t}setup(e){const t=this.scope,r=null!==this.scene?this.scene:e.scene;let s;return t===_y.BACKGROUND_BLURRINESS?s=sd("backgroundBlurriness","float",r):t===_y.BACKGROUND_INTENSITY?s=sd("backgroundIntensity","float",r):t===_y.BACKGROUND_ROTATION?s=bn("mat4").label("backgroundRotation").setGroup(fn).onRenderUpdate((()=>{const e=r.background;return null!==e&&e.isTexture&&e.mapping!==Ie?(by.copy(r.backgroundRotation),by.x*=-1,by.y*=-1,by.z*=-1,Ty.makeRotationFromEuler(by)):Ty.identity(),Ty})):console.error("THREE.SceneNode: Unknown scope:",t),s}}_y.BACKGROUND_BLURRINESS="backgroundBlurriness",_y.BACKGROUND_INTENSITY="backgroundIntensity",_y.BACKGROUND_ROTATION="backgroundRotation";const vy=Li(_y,_y.BACKGROUND_BLURRINESS),Ny=Li(_y,_y.BACKGROUND_INTENSITY),Sy=Li(_y,_y.BACKGROUND_ROTATION);class Ey extends Gu{static get type(){return"StorageTextureNode"}constructor(e,t,r=null){super(e,t),this.storeNode=r,this.isStorageTextureNode=!0,this.access=Vs.WRITE_ONLY}getInputType(){return"storageTexture"}setup(e){super.setup(e);e.getNodeProperties(this).storeNode=this.storeNode}setAccess(e){return this.access=e,this}generate(e,t){let r;return r=null!==this.storeNode?this.generateStore(e):super.generate(e,t),r}toReadWrite(){return this.setAccess(Vs.READ_WRITE)}toReadOnly(){return this.setAccess(Vs.READ_ONLY)}toWriteOnly(){return this.setAccess(Vs.WRITE_ONLY)}generateStore(e){const t=e.getNodeProperties(this),{uvNode:r,storeNode:s}=t,i=super.generate(e,"property"),n=r.build(e,"uvec2"),o=s.build(e,"vec4"),a=e.generateTextureStore(e,i,n,o);e.addLineFlowCode(a,this)}}const wy=Ii(Ey),Ay=Di((({texture:e,uv:t})=>{const r=1e-4,s=Yi().toVar();return Oi(t.x.lessThan(r),(()=>{s.assign(Yi(1,0,0))})).ElseIf(t.y.lessThan(r),(()=>{s.assign(Yi(0,1,0))})).ElseIf(t.z.lessThan(r),(()=>{s.assign(Yi(0,0,1))})).ElseIf(t.x.greaterThan(.9999),(()=>{s.assign(Yi(-1,0,0))})).ElseIf(t.y.greaterThan(.9999),(()=>{s.assign(Yi(0,-1,0))})).ElseIf(t.z.greaterThan(.9999),(()=>{s.assign(Yi(0,0,-1))})).Else((()=>{const r=.01,i=e.sample(t.add(Yi(-.01,0,0))).r.sub(e.sample(t.add(Yi(r,0,0))).r),n=e.sample(t.add(Yi(0,-.01,0))).r.sub(e.sample(t.add(Yi(0,r,0))).r),o=e.sample(t.add(Yi(0,0,-.01))).r.sub(e.sample(t.add(Yi(0,0,r))).r);s.assign(Yi(i,n,o))})),s.normalize()}));class Ry extends Gu{static get type(){return"Texture3DNode"}constructor(e,t=null,r=null){super(e,t,r),this.isTexture3DNode=!0}getInputType(){return"texture3D"}getDefaultUV(){return Yi(.5,.5,.5)}setUpdateMatrix(){}setupUV(e,t){const r=this.value;return!e.isFlipY()||!0!==r.isRenderTargetTexture&&!0!==r.isFramebufferTexture||(t=this.sampler?t.flipY():t.setY(Wi(Vu(this,this.levelNode).y).sub(t.y).sub(1))),t}generateUV(e,t){return t.build(e,"vec3")}normal(e){return Ay({texture:this,uv:e})}}const Cy=Ii(Ry);class My extends rd{static get type(){return"UserDataNode"}constructor(e,t,r=null){super(e,t,r),this.userData=r}updateReference(e){return this.reference=null!==this.userData?this.userData:e.object.userData,this.reference}}const Fy=new WeakMap;class By extends js{static get type(){return"VelocityNode"}constructor(){super("vec2"),this.projectionMatrix=null,this.updateType=Ls.OBJECT,this.updateAfterType=Ls.OBJECT,this.previousModelWorldMatrix=bn(new o),this.previousProjectionMatrix=bn(new o).setGroup(fn),this.previousCameraViewMatrix=bn(new o)}setProjectionMatrix(e){this.projectionMatrix=e}update({frameId:e,camera:t,object:r}){const s=Iy(r);this.previousModelWorldMatrix.value.copy(s);const i=Py(t);i.frameId!==e&&(i.frameId=e,void 0===i.previousProjectionMatrix?(i.previousProjectionMatrix=new o,i.previousCameraViewMatrix=new o,i.currentProjectionMatrix=new o,i.currentCameraViewMatrix=new o,i.previousProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.previousCameraViewMatrix.copy(t.matrixWorldInverse)):(i.previousProjectionMatrix.copy(i.currentProjectionMatrix),i.previousCameraViewMatrix.copy(i.currentCameraViewMatrix)),i.currentProjectionMatrix.copy(this.projectionMatrix||t.projectionMatrix),i.currentCameraViewMatrix.copy(t.matrixWorldInverse),this.previousProjectionMatrix.value.copy(i.previousProjectionMatrix),this.previousCameraViewMatrix.value.copy(i.previousCameraViewMatrix))}updateAfter({object:e}){Iy(e).copy(e.matrixWorld)}setup(){const e=null===this.projectionMatrix?Qu:bn(this.projectionMatrix),t=this.previousCameraViewMatrix.mul(this.previousModelWorldMatrix),r=e.mul(Tl).mul(El),s=this.previousProjectionMatrix.mul(t).mul(wl),i=r.xy.div(r.w),n=s.xy.div(s.w);return so(i,n)}}function Py(e){let t=Fy.get(e);return void 0===t&&(t={},Fy.set(e,t)),t}function Iy(e,t=0){const r=Py(e);let s=r[t];return void 0===s&&(r[t]=s=new o),s}const Ly=Li(By),Dy=Di((([e,t])=>da(1,e.oneMinus().div(t)).oneMinus())).setLayout({name:"blendBurn",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Vy=Di((([e,t])=>da(e.div(t.oneMinus()),1))).setLayout({name:"blendDodge",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Uy=Di((([e,t])=>e.oneMinus().mul(t.oneMinus()).oneMinus())).setLayout({name:"blendScreen",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Oy=Di((([e,t])=>wa(e.mul(2).mul(t),e.oneMinus().mul(2).mul(t.oneMinus()).oneMinus(),pa(.5,e)))).setLayout({name:"blendOverlay",type:"vec3",inputs:[{name:"base",type:"vec3"},{name:"blend",type:"vec3"}]}),Gy=Di((([e,t])=>{const r=t.a.add(e.a.mul(t.a.oneMinus()));return en(t.rgb.mul(t.a).add(e.rgb.mul(e.a).mul(t.a.oneMinus())).div(r),r)})).setLayout({name:"blendColor",type:"vec4",inputs:[{name:"base",type:"vec4"},{name:"blend",type:"vec4"}]}),ky=Di((([e])=>Hy(e.rgb))),zy=Di((([e,t=zi(1)])=>t.mix(Hy(e.rgb),e.rgb))),Wy=Di((([e,t=zi(1)])=>{const r=ro(e.r,e.g,e.b).div(3),s=e.r.max(e.g.max(e.b)),i=s.sub(r).mul(t).mul(-3);return wa(e.rgb,s,i)})),$y=Di((([e,t=zi(1)])=>{const r=Yi(.57735,.57735,.57735),s=t.cos();return Yi(e.rgb.mul(s).add(r.cross(e.rgb).mul(t.sin()).add(r.mul(ya(r,e.rgb).mul(s.oneMinus())))))})),Hy=(e,t=Yi(c.getLuminanceCoefficients(new r)))=>ya(e,t),jy=Di((([e,t=Yi(1),s=Yi(0),i=Yi(1),n=zi(1),o=Yi(c.getLuminanceCoefficients(new r,de))])=>{const a=e.rgb.dot(Yi(o)),u=ca(e.rgb.mul(t).add(s),0).toVar(),l=u.pow(i).toVar();return Oi(u.r.greaterThan(0),(()=>{u.r.assign(l.r)})),Oi(u.g.greaterThan(0),(()=>{u.g.assign(l.g)})),Oi(u.b.greaterThan(0),(()=>{u.b.assign(l.b)})),u.assign(a.add(u.sub(a).mul(n))),en(u.rgb,e.a)}));class qy extends js{static get type(){return"PosterizeNode"}constructor(e,t){super(),this.sourceNode=e,this.stepsNode=t}setup(){const{sourceNode:e,stepsNode:t}=this;return e.mul(t).floor().div(t)}}const Xy=Ii(qy),Ky=new t;class Yy extends Gu{static get type(){return"PassTextureNode"}constructor(e,t){super(t),this.passNode=e,this.setUpdateMatrix(!1)}setup(e){return e.object.isQuadMesh&&this.passNode.build(e),super.setup(e)}clone(){return new this.constructor(this.passNode,this.value)}}class Qy extends Yy{static get type(){return"PassMultipleTextureNode"}constructor(e,t,r=!1){super(e,null),this.textureName=t,this.previousTexture=r}updateTexture(){this.value=this.previousTexture?this.passNode.getPreviousTexture(this.textureName):this.passNode.getTexture(this.textureName)}setup(e){return this.updateTexture(),super.setup(e)}clone(){return new this.constructor(this.passNode,this.textureName,this.previousTexture)}}class Zy extends js{static get type(){return"PassNode"}constructor(e,t,r,s={}){super("vec4"),this.scope=e,this.scene=t,this.camera=r,this.options=s,this._pixelRatio=1,this._width=1,this._height=1;const i=new L;i.isRenderTargetTexture=!0,i.name="depth";const n=new oe(this._width*this._pixelRatio,this._height*this._pixelRatio,{type:he,...s});n.texture.name="output",n.depthTexture=i,this.renderTarget=n,this._textures={output:n.texture,depth:i},this._textureNodes={},this._linearDepthNodes={},this._viewZNodes={},this._previousTextures={},this._previousTextureNodes={},this._cameraNear=bn(0),this._cameraFar=bn(0),this._mrt=null,this._layers=null,this._resolution=1,this.isPassNode=!0,this.updateBeforeType=Ls.FRAME}setResolution(e){return this._resolution=e,this}getResolution(){return this._resolution}setLayers(e){return this._layers=e,this}getLayers(){return this._layers}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}isGlobal(){return!0}getTexture(e){let t=this._textures[e];if(void 0===t){t=this.renderTarget.texture.clone(),t.name=e,this._textures[e]=t,this.renderTarget.textures.push(t)}return t}getPreviousTexture(e){let t=this._previousTextures[e];return void 0===t&&(t=this.getTexture(e).clone(),this._previousTextures[e]=t),t}toggleTexture(e){const t=this._previousTextures[e];if(void 0!==t){const r=this._textures[e],s=this.renderTarget.textures.indexOf(r);this.renderTarget.textures[s]=t,this._textures[e]=t,this._previousTextures[e]=r,this._textureNodes[e].updateTexture(),this._previousTextureNodes[e].updateTexture()}}getTextureNode(e="output"){let t=this._textureNodes[e];return void 0===t&&(t=Fi(new Qy(this,e)),t.updateTexture(),this._textureNodes[e]=t),t}getPreviousTextureNode(e="output"){let t=this._previousTextureNodes[e];return void 0===t&&(void 0===this._textureNodes[e]&&this.getTextureNode(e),t=Fi(new Qy(this,e,!0)),t.updateTexture(),this._previousTextureNodes[e]=t),t}getViewZNode(e="depth"){let t=this._viewZNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar;this._viewZNodes[e]=t=mh(this.getTextureNode(e),r,s)}return t}getLinearDepthNode(e="depth"){let t=this._linearDepthNodes[e];if(void 0===t){const r=this._cameraNear,s=this._cameraFar,i=this.getViewZNode(e);this._linearDepthNodes[e]=t=ph(i,r,s)}return t}setup({renderer:e}){return this.renderTarget.samples=void 0===this.options.samples?e.samples:this.options.samples,!0===e.backend.isWebGLBackend&&(this.renderTarget.samples=0),this.renderTarget.texture.type=e.getColorBufferType(),this.scope===Zy.COLOR?this.getTextureNode():this.getLinearDepthNode()}updateBefore(e){const{renderer:t}=e,{scene:r}=this;let s,i;const n=t.getOutputRenderTarget();n&&!0===n.isXRRenderTarget?(i=1,s=t.xr.getCamera(),t.xr.updateCamera(s),Ky.set(n.width,n.height)):(s=this.camera,i=t.getPixelRatio(),t.getSize(Ky)),this._pixelRatio=i,this.setSize(Ky.width,Ky.height);const o=t.getRenderTarget(),a=t.getMRT(),u=s.layers.mask;this._cameraNear.value=s.near,this._cameraFar.value=s.far,null!==this._layers&&(s.layers.mask=this._layers.mask);for(const e in this._previousTextures)this.toggleTexture(e);t.setRenderTarget(this.renderTarget),t.setMRT(this._mrt),t.render(r,s),t.setRenderTarget(o),t.setMRT(a),s.layers.mask=u}setSize(e,t){this._width=e,this._height=t;const r=this._width*this._pixelRatio*this._resolution,s=this._height*this._pixelRatio*this._resolution;this.renderTarget.setSize(r,s)}setPixelRatio(e){this._pixelRatio=e,this.setSize(this._width,this._height)}dispose(){this.renderTarget.dispose()}}Zy.COLOR="color",Zy.DEPTH="depth";class Jy extends Zy{static get type(){return"ToonOutlinePassNode"}constructor(e,t,r,s,i){super(Zy.COLOR,e,t),this.colorNode=r,this.thicknessNode=s,this.alphaNode=i,this._materialCache=new WeakMap}updateBefore(e){const{renderer:t}=e,r=t.getRenderObjectFunction();t.setRenderObjectFunction(((e,r,s,i,n,o,a,u)=>{if((n.isMeshToonMaterial||n.isMeshToonNodeMaterial)&&!1===n.wireframe){const l=this._getOutlineMaterial(n);t.renderObject(e,r,s,i,l,o,a,u)}t.renderObject(e,r,s,i,n,o,a,u)})),super.updateBefore(e),t.setRenderObjectFunction(r)}_createMaterial(){const e=new wh;e.isMeshToonOutlineMaterial=!0,e.name="Toon_Outline",e.side=N;const t=Ll.negate(),r=Qu.mul(Tl),s=zi(1),i=r.mul(en(El,1)),n=r.mul(en(El.add(t),1)),o=zo(i.sub(n));return e.vertexNode=i.add(o.mul(this.thicknessNode).mul(i.w).mul(s)),e.colorNode=en(this.colorNode,this.alphaNode),e}_getOutlineMaterial(e){let t=this._materialCache.get(e);return void 0===t&&(t=this._createMaterial(),this._materialCache.set(e,t)),t}}const ex=Di((([e,t])=>e.mul(t).clamp())).setLayout({name:"linearToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),tx=Di((([e,t])=>(e=e.mul(t)).div(e.add(1)).clamp())).setLayout({name:"reinhardToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),rx=Di((([e,t])=>{const r=(e=(e=e.mul(t)).sub(.004).max(0)).mul(e.mul(6.2).add(.5)),s=e.mul(e.mul(6.2).add(1.7)).add(.06);return r.div(s).pow(2.2)})).setLayout({name:"cineonToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),sx=Di((([e])=>{const t=e.mul(e.add(.0245786)).sub(90537e-9),r=e.mul(e.add(.432951).mul(.983729)).add(.238081);return t.div(r)})),ix=Di((([e,t])=>{const r=on(.59719,.35458,.04823,.076,.90834,.01566,.0284,.13383,.83777),s=on(1.60475,-.53108,-.07367,-.10208,1.10813,-.00605,-.00327,-.07276,1.07602);return e=e.mul(t).div(.6),e=r.mul(e),e=sx(e),(e=s.mul(e)).clamp()})).setLayout({name:"acesFilmicToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),nx=on(Yi(1.6605,-.1246,-.0182),Yi(-.5876,1.1329,-.1006),Yi(-.0728,-.0083,1.1187)),ox=on(Yi(.6274,.0691,.0164),Yi(.3293,.9195,.088),Yi(.0433,.0113,.8956)),ax=Di((([e])=>{const t=Yi(e).toVar(),r=Yi(t.mul(t)).toVar(),s=Yi(r.mul(r)).toVar();return zi(15.5).mul(s.mul(r)).sub(io(40.14,s.mul(t))).add(io(31.96,s).sub(io(6.868,r.mul(t))).add(io(.4298,r).add(io(.1191,t).sub(.00232))))})),ux=Di((([e,t])=>{const r=Yi(e).toVar(),s=on(Yi(.856627153315983,.137318972929847,.11189821299995),Yi(.0951212405381588,.761241990602591,.0767994186031903),Yi(.0482516061458583,.101439036467562,.811302368396859)),i=on(Yi(1.1271005818144368,-.1413297634984383,-.14132976349843826),Yi(-.11060664309660323,1.157823702216272,-.11060664309660294),Yi(-.016493938717834573,-.016493938717834257,1.2519364065950405)),n=zi(-12.47393),o=zi(4.026069);return r.mulAssign(t),r.assign(ox.mul(r)),r.assign(s.mul(r)),r.assign(ca(r,1e-10)),r.assign(Vo(r)),r.assign(r.sub(n).div(o.sub(n))),r.assign(Aa(r,0,1)),r.assign(ax(r)),r.assign(i.mul(r)),r.assign(ba(ca(Yi(0),r),Yi(2.2))),r.assign(nx.mul(r)),r.assign(Aa(r,0,1)),r})).setLayout({name:"agxToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]}),lx=Di((([e,t])=>{const r=zi(.76),s=zi(.15);e=e.mul(t);const i=da(e.r,da(e.g,e.b)),n=Oa(i.lessThan(.08),i.sub(io(6.25,i.mul(i))),.04);e.subAssign(n);const o=ca(e.r,ca(e.g,e.b));Oi(o.lessThan(r),(()=>e));const a=so(1,r),u=so(1,a.mul(a).div(o.add(a.sub(r))));e.mulAssign(u.div(o));const l=so(1,no(1,s.mul(o.sub(u)).add(1)));return wa(e,Yi(u),l)})).setLayout({name:"neutralToneMapping",type:"vec3",inputs:[{name:"color",type:"vec3"},{name:"exposure",type:"float"}]});class dx extends Ws{static get type(){return"CodeNode"}constructor(e="",t=[],r=""){super("code"),this.isCodeNode=!0,this.code=e,this.includes=t,this.language=r}isGlobal(){return!0}setIncludes(e){return this.includes=e,this}getIncludes(){return this.includes}generate(e){const t=this.getIncludes(e);for(const r of t)r.build(e);const r=e.getCodeFromNode(this,this.getNodeType(e));return r.code=this.code,r.code}serialize(e){super.serialize(e),e.code=this.code,e.language=this.language}deserialize(e){super.deserialize(e),this.code=e.code,this.language=e.language}}const cx=Ii(dx);class hx extends dx{static get type(){return"FunctionNode"}constructor(e="",t=[],r=""){super(e,t,r)}getNodeType(e){return this.getNodeFunction(e).type}getInputs(e){return this.getNodeFunction(e).inputs}getNodeFunction(e){const t=e.getDataFromNode(this);let r=t.nodeFunction;return void 0===r&&(r=e.parser.parseFunction(this.code),t.nodeFunction=r),r}generate(e,t){super.generate(e);const r=this.getNodeFunction(e),s=r.name,i=r.type,n=e.getCodeFromNode(this,i);""!==s&&(n.name=s);const o=e.getPropertyName(n),a=this.getNodeFunction(e).getCode(o);return n.code=a+"\n","property"===t?o:e.format(`${o}()`,i,t)}}const px=(e,t=[],r="")=>{for(let e=0;e<t.length;e++){const r=t[e];"function"==typeof r&&(t[e]=r.functionNode)}const s=Fi(new hx(e,t,r)),i=(...e)=>s.call(...e);return i.functionNode=s,i};class gx extends Ws{static get type(){return"ScriptableValueNode"}constructor(e=null){super(),this._value=e,this._cache=null,this.inputType=null,this.outputType=null,this.events=new a,this.isScriptableValueNode=!0}get isScriptableOutputNode(){return null!==this.outputType}set value(e){this._value!==e&&(this._cache&&"URL"===this.inputType&&this.value.value instanceof ArrayBuffer&&(URL.revokeObjectURL(this._cache),this._cache=null),this._value=e,this.events.dispatchEvent({type:"change"}),this.refresh())}get value(){return this._value}refresh(){this.events.dispatchEvent({type:"refresh"})}getValue(){const e=this.value;if(e&&null===this._cache&&"URL"===this.inputType&&e.value instanceof ArrayBuffer)this._cache=URL.createObjectURL(new Blob([e.value]));else if(e&&null!==e.value&&void 0!==e.value&&(("URL"===this.inputType||"String"===this.inputType)&&"string"==typeof e.value||"Number"===this.inputType&&"number"==typeof e.value||"Vector2"===this.inputType&&e.value.isVector2||"Vector3"===this.inputType&&e.value.isVector3||"Vector4"===this.inputType&&e.value.isVector4||"Color"===this.inputType&&e.value.isColor||"Matrix3"===this.inputType&&e.value.isMatrix3||"Matrix4"===this.inputType&&e.value.isMatrix4))return e.value;return this._cache||e}getNodeType(e){return this.value&&this.value.isNode?this.value.getNodeType(e):"float"}setup(){return this.value&&this.value.isNode?this.value:zi()}serialize(e){super.serialize(e),null!==this.value?"ArrayBuffer"===this.inputType?e.value=Fs(this.value):e.value=this.value?this.value.toJSON(e.meta).uuid:null:e.value=null,e.inputType=this.inputType,e.outputType=this.outputType}deserialize(e){super.deserialize(e);let t=null;null!==e.value&&(t="ArrayBuffer"===e.inputType?Bs(e.value):"Texture"===e.inputType?e.meta.textures[e.value]:e.meta.nodes[e.value]||null),this.value=t,this.inputType=e.inputType,this.outputType=e.outputType}}const mx=Ii(gx);class fx extends Map{get(e,t=null,...r){if(this.has(e))return super.get(e);if(null!==t){const s=t(...r);return this.set(e,s),s}}}class yx{constructor(e){this.scriptableNode=e}get parameters(){return this.scriptableNode.parameters}get layout(){return this.scriptableNode.getLayout()}getInputLayout(e){return this.scriptableNode.getInputLayout(e)}get(e){const t=this.parameters[e];return t?t.getValue():null}}const xx=new fx;class bx extends Ws{static get type(){return"ScriptableNode"}constructor(e=null,t={}){super(),this.codeNode=e,this.parameters=t,this._local=new fx,this._output=mx(),this._outputs={},this._source=this.source,this._method=null,this._object=null,this._value=null,this._needsOutputUpdate=!0,this.onRefresh=this.onRefresh.bind(this),this.isScriptableNode=!0}get source(){return this.codeNode?this.codeNode.code:""}setLocal(e,t){return this._local.set(e,t)}getLocal(e){return this._local.get(e)}onRefresh(){this._refresh()}getInputLayout(e){for(const t of this.getLayout())if(t.inputType&&(t.id===e||t.name===e))return t}getOutputLayout(e){for(const t of this.getLayout())if(t.outputType&&(t.id===e||t.name===e))return t}setOutput(e,t){const r=this._outputs;return void 0===r[e]?r[e]=mx(t):r[e].value=t,this}getOutput(e){return this._outputs[e]}getParameter(e){return this.parameters[e]}setParameter(e,t){const r=this.parameters;return t&&t.isScriptableNode?(this.deleteParameter(e),r[e]=t,r[e].getDefaultOutput().events.addEventListener("refresh",this.onRefresh)):t&&t.isScriptableValueNode?(this.deleteParameter(e),r[e]=t,r[e].events.addEventListener("refresh",this.onRefresh)):void 0===r[e]?(r[e]=mx(t),r[e].events.addEventListener("refresh",this.onRefresh)):r[e].value=t,this}getValue(){return this.getDefaultOutput().getValue()}deleteParameter(e){let t=this.parameters[e];return t&&(t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.removeEventListener("refresh",this.onRefresh)),this}clearParameters(){for(const e of Object.keys(this.parameters))this.deleteParameter(e);return this.needsUpdate=!0,this}call(e,...t){const r=this.getObject()[e];if("function"==typeof r)return r(...t)}async callAsync(e,...t){const r=this.getObject()[e];if("function"==typeof r)return"AsyncFunction"===r.constructor.name?await r(...t):r(...t)}getNodeType(e){return this.getDefaultOutputNode().getNodeType(e)}refresh(e=null){null!==e?this.getOutput(e).refresh():this._refresh()}getObject(){if(this.needsUpdate&&this.dispose(),null!==this._object)return this._object;const e=new yx(this),t=xx.get("THREE"),r=xx.get("TSL"),s=this.getMethod(),i=[e,this._local,xx,()=>this.refresh(),(e,t)=>this.setOutput(e,t),t,r];this._object=s(...i);const n=this._object.layout;if(n&&(!1===n.cache&&this._local.clear(),this._output.outputType=n.outputType||null,Array.isArray(n.elements)))for(const e of n.elements){const t=e.id||e.name;e.inputType&&(void 0===this.getParameter(t)&&this.setParameter(t,null),this.getParameter(t).inputType=e.inputType),e.outputType&&(void 0===this.getOutput(t)&&this.setOutput(t,null),this.getOutput(t).outputType=e.outputType)}return this._object}deserialize(e){super.deserialize(e);for(const e in this.parameters){let t=this.parameters[e];t.isScriptableNode&&(t=t.getDefaultOutput()),t.events.addEventListener("refresh",this.onRefresh)}}getLayout(){return this.getObject().layout}getDefaultOutputNode(){const e=this.getDefaultOutput().value;return e&&e.isNode?e:zi()}getDefaultOutput(){return this._exec()._output}getMethod(){if(this.needsUpdate&&this.dispose(),null!==this._method)return this._method;const e=["layout","init","main","dispose"].join(", "),t="\nreturn { ...output, "+e+" };",r="var "+e+"; var output = {};\n"+this.codeNode.code+t;return this._method=new Function(...["parameters","local","global","refresh","setOutput","THREE","TSL"],r),this._method}dispose(){null!==this._method&&(this._object&&"function"==typeof this._object.dispose&&this._object.dispose(),this._method=null,this._object=null,this._source=null,this._value=null,this._needsOutputUpdate=!0,this._output.value=null,this._outputs={})}setup(){return this.getDefaultOutputNode()}getCacheKey(e){const t=[xs(this.source),this.getDefaultOutputNode().getCacheKey(e)];for(const r in this.parameters)t.push(this.parameters[r].getCacheKey(e));return bs(t)}set needsUpdate(e){!0===e&&this.dispose()}get needsUpdate(){return this.source!==this._source}_exec(){return null===this.codeNode||(!0===this._needsOutputUpdate&&(this._value=this.call("main"),this._needsOutputUpdate=!1),this._output.value=this._value),this}_refresh(){this.needsUpdate=!0,this._exec(),this._output.refresh()}}const Tx=Ii(bx);function _x(e){let t;const r=e.context.getViewZ;return void 0!==r&&(t=r(this)),(t||Cl.z).negate()}const vx=Di((([e,t],r)=>{const s=_x(r);return Ma(e,t,s)})),Nx=Di((([e],t)=>{const r=_x(t);return e.mul(e,r,r).negate().exp().oneMinus()})),Sx=Di((([e,t])=>en(t.toFloat().mix(kn.rgb,e.toVec3()),kn.a)));let Ex=null,wx=null;class Ax extends Ws{static get type(){return"RangeNode"}constructor(e=zi(),t=zi()){super(),this.minNode=e,this.maxNode=t}getVectorLength(e){const t=e.getTypeLength(Rs(this.minNode.value)),r=e.getTypeLength(Rs(this.maxNode.value));return t>r?t:r}getNodeType(e){return e.object.count>1?e.getTypeFromLength(this.getVectorLength(e)):"float"}setup(e){const t=e.object;let r=null;if(t.count>1){const i=this.minNode.value,n=this.maxNode.value,o=e.getTypeLength(Rs(i)),a=e.getTypeLength(Rs(n));Ex=Ex||new s,wx=wx||new s,Ex.setScalar(0),wx.setScalar(0),1===o?Ex.setScalar(i):i.isColor?Ex.set(i.r,i.g,i.b,1):Ex.set(i.x,i.y,i.z||0,i.w||0),1===a?wx.setScalar(n):n.isColor?wx.set(n.r,n.g,n.b,1):wx.set(n.x,n.y,n.z||0,n.w||0);const l=4,d=l*t.count,c=new Float32Array(d);for(let e=0;e<d;e++){const t=e%l,r=Ex.getComponent(t),s=wx.getComponent(t);c[e]=u.lerp(r,s,Math.random())}const h=this.getNodeType(e);if(t.count<=4096)r=$u(c,"vec4",t.count).element(bc).convert(h);else{const t=new M(c,4);e.geometry.setAttribute("__range"+this.id,t),r=yu(t).convert(h)}}else r=zi(0);return r}}const Rx=Ii(Ax);class Cx extends Ws{static get type(){return"ComputeBuiltinNode"}constructor(e,t){super(t),this._builtinName=e}getHash(e){return this.getBuiltinName(e)}getNodeType(){return this.nodeType}setBuiltinName(e){return this._builtinName=e,this}getBuiltinName(){return this._builtinName}hasBuiltin(e){return e.hasBuiltin(this._builtinName)}generate(e,t){const r=this.getBuiltinName(e),s=this.getNodeType(e);return"compute"===e.shaderStage?e.format(r,s,t):(console.warn(`ComputeBuiltinNode: Compute built-in value ${r} can not be accessed in the ${e.shaderStage} stage`),e.generateConst(s))}serialize(e){super.serialize(e),e.global=this.global,e._builtinName=this._builtinName}deserialize(e){super.deserialize(e),this.global=e.global,this._builtinName=e._builtinName}}const Mx=(e,t)=>Fi(new Cx(e,t)),Fx=Mx("numWorkgroups","uvec3"),Bx=Mx("workgroupId","uvec3"),Px=Mx("globalId","uvec3"),Ix=Mx("localId","uvec3"),Lx=Mx("subgroupSize","uint");const Dx=Ii(class extends Ws{constructor(e){super(),this.scope=e}generate(e){const{scope:t}=this,{renderer:r}=e;!0===r.backend.isWebGLBackend?e.addFlowCode(`\t// ${t}Barrier \n`):e.addLineFlowCode(`${t}Barrier()`,this)}});class Vx extends $s{constructor(e,t){super(e,t),this.isWorkgroupInfoElementNode=!0}generate(e,t){let r;const s=e.context.assign;if(r=super.generate(e),!0!==s){const s=this.getNodeType(e);r=e.format(r,s,t)}return r}}class Ux extends Ws{constructor(e,t,r=0){super(t),this.bufferType=t,this.bufferCount=r,this.isWorkgroupInfoNode=!0,this.elementType=t,this.scope=e}label(e){return this.name=e,this}setScope(e){return this.scope=e,this}getElementType(){return this.elementType}getInputType(){return`${this.scope}Array`}element(e){return Fi(new Vx(this,e))}generate(e){return e.getScopedArray(this.name||`${this.scope}Array_${this.id}`,this.scope.toLowerCase(),this.bufferType,this.bufferCount)}}class Ox extends js{static get type(){return"AtomicFunctionNode"}constructor(e,t,r){super("uint"),this.method=e,this.pointerNode=t,this.valueNode=r}getInputType(e){return this.pointerNode.getNodeType(e)}getNodeType(e){return this.getInputType(e)}generate(e){const t=this.method,r=this.getNodeType(e),s=this.getInputType(e),i=this.pointerNode,n=this.valueNode,o=[];o.push(`&${i.build(e,s)}`),null!==n&&o.push(n.build(e,s));const a=`${e.getMethod(t,r)}( ${o.join(", ")} )`;return null!==n&&e.addLineFlowCode(a,this),a}}Ox.ATOMIC_LOAD="atomicLoad",Ox.ATOMIC_STORE="atomicStore",Ox.ATOMIC_ADD="atomicAdd",Ox.ATOMIC_SUB="atomicSub",Ox.ATOMIC_MAX="atomicMax",Ox.ATOMIC_MIN="atomicMin",Ox.ATOMIC_AND="atomicAnd",Ox.ATOMIC_OR="atomicOr",Ox.ATOMIC_XOR="atomicXor";const Gx=Ii(Ox),kx=(e,t,r)=>{const s=Gx(e,t,r);return s.append(),s};let zx;function Wx(e){zx=zx||new WeakMap;let t=zx.get(e);return void 0===t&&zx.set(e,t={}),t}function $x(e){const t=Wx(e);return t.shadowMatrix||(t.shadowMatrix=bn("mat4").setGroup(fn).onRenderUpdate((()=>(!0!==e.castShadow&&e.shadow.updateMatrices(e),e.shadow.matrix))))}function Hx(e,t=Al){const r=$x(e).mul(t);return r.xyz.div(r.w)}function jx(e){const t=Wx(e);return t.position||(t.position=bn(new r).setGroup(fn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.matrixWorld))))}function qx(e){const t=Wx(e);return t.targetPosition||(t.targetPosition=bn(new r).setGroup(fn).onRenderUpdate(((t,r)=>r.value.setFromMatrixPosition(e.target.matrixWorld))))}function Xx(e){const t=Wx(e);return t.viewPosition||(t.viewPosition=bn(new r).setGroup(fn).onRenderUpdate((({camera:t},s)=>{s.value=s.value||new r,s.value.setFromMatrixPosition(e.matrixWorld),s.value.applyMatrix4(t.matrixWorldInverse)})))}const Kx=e=>Ju.transformDirection(jx(e).sub(qx(e))),Yx=(e,t)=>{for(const r of t)if(r.isAnalyticLightNode&&r.light.id===e)return r;return null},Qx=new WeakMap;class Zx extends Ws{static get type(){return"LightsNode"}constructor(){super("vec3"),this.totalDiffuseNode=Yi().toVar("totalDiffuse"),this.totalSpecularNode=Yi().toVar("totalSpecular"),this.outgoingLightNode=Yi().toVar("outgoingLight"),this._lights=[],this._lightNodes=null,this._lightNodesHash=null,this.global=!0}customCacheKey(){const e=[],t=this._lights;for(let r=0;r<t.length;r++)e.push(t[r].id);return bs(e)}getHash(e){if(null===this._lightNodesHash){null===this._lightNodes&&this.setupLightsNode(e);const t=[];for(const e of this._lightNodes)t.push(e.getSelf().getHash());this._lightNodesHash="lights-"+t.join(",")}return this._lightNodesHash}analyze(e){const t=e.getDataFromNode(this);for(const r of t.nodes)r.build(e)}setupLightsNode(e){const t=[],r=this._lightNodes,s=(e=>e.sort(((e,t)=>e.id-t.id)))(this._lights),i=e.renderer.library;for(const e of s)if(e.isNode)t.push(Fi(e));else{let s=null;if(null!==r&&(s=Yx(e.id,r)),null===s){const r=i.getLightNodeClass(e.constructor);if(null===r){console.warn(`LightsNode.setupNodeLights: Light node not found for ${e.constructor.name}`);continue}let s=null;Qx.has(e)?s=Qx.get(e):(s=Fi(new r(e)),Qx.set(e,s)),t.push(s)}}this._lightNodes=t}setupDirectLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.direct({...r,lightNode:t,reflectedLight:i},e)}setupDirectRectAreaLight(e,t,r){const{lightingModel:s,reflectedLight:i}=e.context;s.directRectArea({...r,lightNode:t,reflectedLight:i},e)}setupLights(e,t){for(const r of t)r.build(e)}getLightNodes(e){return null===this._lightNodes&&this.setupLightsNode(e),this._lightNodes}setup(e){const t=e.lightsNode;e.lightsNode=this;let r=this.outgoingLightNode;const s=e.context,i=s.lightingModel,n=e.getDataFromNode(this);if(i){const{totalDiffuseNode:t,totalSpecularNode:o}=this;s.outgoingLight=r;const a=e.addStack();n.nodes=a.nodes,i.start(e);const{backdrop:u,backdropAlpha:l}=s,{directDiffuse:d,directSpecular:c,indirectDiffuse:h,indirectSpecular:p}=s.reflectedLight;let g=d.add(h);null!==u&&(g=Yi(null!==l?l.mix(g,u):u),s.material.transparent=!0),t.assign(g),o.assign(c.add(p)),r.assign(t.add(o)),i.finish(e),r=r.bypass(e.removeStack())}else n.nodes=[];return e.lightsNode=t,r}setLights(e){return this._lights=e,this._lightNodes=null,this._lightNodesHash=null,this}getLights(){return this._lights}get hasLights(){return this._lights.length>0}}class Jx extends Ws{static get type(){return"ShadowBaseNode"}constructor(e){super(),this.light=e,this.updateBeforeType=Ls.RENDER,this.isShadowBaseNode=!0}setupShadowPosition({context:e,material:t}){eb.assign(t.shadowPositionNode||e.shadowPositionWorld||Al)}dispose(){this.updateBeforeType=Ls.NONE}}const eb=_n("vec3","shadowPositionWorld");function tb(t,r={}){return r.toneMapping=t.toneMapping,r.toneMappingExposure=t.toneMappingExposure,r.outputColorSpace=t.outputColorSpace,r.renderTarget=t.getRenderTarget(),r.activeCubeFace=t.getActiveCubeFace(),r.activeMipmapLevel=t.getActiveMipmapLevel(),r.renderObjectFunction=t.getRenderObjectFunction(),r.pixelRatio=t.getPixelRatio(),r.mrt=t.getMRT(),r.clearColor=t.getClearColor(r.clearColor||new e),r.clearAlpha=t.getClearAlpha(),r.autoClear=t.autoClear,r.scissorTest=t.getScissorTest(),r}function rb(e,t){return t=tb(e,t),e.setMRT(null),e.setRenderObjectFunction(null),e.setClearColor(0,1),e.autoClear=!0,t}function sb(e,t){e.toneMapping=t.toneMapping,e.toneMappingExposure=t.toneMappingExposure,e.outputColorSpace=t.outputColorSpace,e.setRenderTarget(t.renderTarget,t.activeCubeFace,t.activeMipmapLevel),e.setRenderObjectFunction(t.renderObjectFunction),e.setPixelRatio(t.pixelRatio),e.setMRT(t.mrt),e.setClearColor(t.clearColor,t.clearAlpha),e.autoClear=t.autoClear,e.setScissorTest(t.scissorTest)}function ib(e,t={}){return t.background=e.background,t.backgroundNode=e.backgroundNode,t.overrideMaterial=e.overrideMaterial,t}function nb(e,t){return t=ib(e,t),e.background=null,e.backgroundNode=null,e.overrideMaterial=null,t}function ob(e,t){e.background=t.background,e.backgroundNode=t.backgroundNode,e.overrideMaterial=t.overrideMaterial}function ab(e,t,r){return r=nb(t,r=rb(e,r))}function ub(e,t,r){sb(e,r),ob(t,r)}var lb=Object.freeze({__proto__:null,resetRendererAndSceneState:ab,resetRendererState:rb,resetSceneState:nb,restoreRendererAndSceneState:ub,restoreRendererState:sb,restoreSceneState:ob,saveRendererAndSceneState:function(e,t,r={}){return r=ib(t,r=tb(e,r))},saveRendererState:tb,saveSceneState:ib});const db=new WeakMap,cb=Di((([e,t,r])=>{let s=Al.sub(e).length();return s=s.sub(t).div(r.sub(t)),s=s.saturate(),s})),hb=e=>{let t=db.get(e);if(void 0===t){const r=e.isPointLight?(e=>{const t=e.shadow.camera,r=sd("near","float",t).setGroup(fn),s=sd("far","float",t).setGroup(fn),i=al(e);return cb(i,r,s)})(e):null;t=new wh,t.colorNode=en(0,0,0,1),t.depthNode=r,t.isShadowPassMaterial=!0,t.name="ShadowMaterial",t.fog=!1,db.set(e,t)}return t},pb=Di((({depthTexture:e,shadowCoord:t})=>ku(e,t.xy).compare(t.z))),gb=Di((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>ku(e,t).compare(r),i=sd("mapSize","vec2",r).setGroup(fn),n=sd("radius","float",r).setGroup(fn),o=ji(1).div(i),a=o.x.negate().mul(n),u=o.y.negate().mul(n),l=o.x.mul(n),d=o.y.mul(n),c=a.div(2),h=u.div(2),p=l.div(2),g=d.div(2);return ro(s(t.xy.add(ji(a,u)),t.z),s(t.xy.add(ji(0,u)),t.z),s(t.xy.add(ji(l,u)),t.z),s(t.xy.add(ji(c,h)),t.z),s(t.xy.add(ji(0,h)),t.z),s(t.xy.add(ji(p,h)),t.z),s(t.xy.add(ji(a,0)),t.z),s(t.xy.add(ji(c,0)),t.z),s(t.xy,t.z),s(t.xy.add(ji(p,0)),t.z),s(t.xy.add(ji(l,0)),t.z),s(t.xy.add(ji(c,g)),t.z),s(t.xy.add(ji(0,g)),t.z),s(t.xy.add(ji(p,g)),t.z),s(t.xy.add(ji(a,d)),t.z),s(t.xy.add(ji(0,d)),t.z),s(t.xy.add(ji(l,d)),t.z)).mul(1/17)})),mb=Di((({depthTexture:e,shadowCoord:t,shadow:r})=>{const s=(t,r)=>ku(e,t).compare(r),i=sd("mapSize","vec2",r).setGroup(fn),n=ji(1).div(i),o=n.x,a=n.y,u=t.xy,l=Wo(u.mul(i).add(.5));return u.subAssign(l.mul(n)),ro(s(u,t.z),s(u.add(ji(o,0)),t.z),s(u.add(ji(0,a)),t.z),s(u.add(n),t.z),wa(s(u.add(ji(o.negate(),0)),t.z),s(u.add(ji(o.mul(2),0)),t.z),l.x),wa(s(u.add(ji(o.negate(),a)),t.z),s(u.add(ji(o.mul(2),a)),t.z),l.x),wa(s(u.add(ji(0,a.negate())),t.z),s(u.add(ji(0,a.mul(2))),t.z),l.y),wa(s(u.add(ji(o,a.negate())),t.z),s(u.add(ji(o,a.mul(2))),t.z),l.y),wa(wa(s(u.add(ji(o.negate(),a.negate())),t.z),s(u.add(ji(o.mul(2),a.negate())),t.z),l.x),wa(s(u.add(ji(o.negate(),a.mul(2))),t.z),s(u.add(ji(o.mul(2),a.mul(2))),t.z),l.x),l.y)).mul(1/9)})),fb=Di((({depthTexture:e,shadowCoord:t})=>{const r=zi(1).toVar(),s=ku(e).sample(t.xy).rg,i=pa(t.z,s.x);return Oi(i.notEqual(zi(1)),(()=>{const e=t.z.sub(s.x),n=ca(0,s.y.mul(s.y));let o=n.div(n.add(e.mul(e)));o=Aa(so(o,.3).div(.95-.3)),r.assign(Aa(ca(i,o)))})),r})),yb=Di((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=zi(0).toVar(),n=zi(0).toVar(),o=e.lessThanEqual(zi(1)).select(zi(0),zi(2).div(e.sub(1))),a=e.lessThanEqual(zi(1)).select(zi(0),zi(-1));Ic({start:Wi(0),end:Wi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(zi(e).mul(o)),l=s.sample(ro(Qc.xy,ji(0,u).mul(t)).div(r)).x;i.addAssign(l),n.addAssign(l.mul(l))})),i.divAssign(e),n.divAssign(e);const u=Uo(n.sub(i.mul(i)));return ji(i,u)})),xb=Di((({samples:e,radius:t,size:r,shadowPass:s})=>{const i=zi(0).toVar(),n=zi(0).toVar(),o=e.lessThanEqual(zi(1)).select(zi(0),zi(2).div(e.sub(1))),a=e.lessThanEqual(zi(1)).select(zi(0),zi(-1));Ic({start:Wi(0),end:Wi(e),type:"int",condition:"<"},(({i:e})=>{const u=a.add(zi(e).mul(o)),l=s.sample(ro(Qc.xy,ji(u,0).mul(t)).div(r));i.addAssign(l.x),n.addAssign(ro(l.y.mul(l.y),l.x.mul(l.x)))})),i.divAssign(e),n.divAssign(e);const u=Uo(n.sub(i.mul(i)));return ji(i,u)})),bb=[pb,gb,mb,fb];let Tb;const _b=new sy;class vb extends Jx{static get type(){return"ShadowNode"}constructor(e,t=null){super(e),this.shadow=t||e.shadow,this.shadowMap=null,this.vsmShadowMapVertical=null,this.vsmShadowMapHorizontal=null,this.vsmMaterialVertical=null,this.vsmMaterialHorizontal=null,this._node=null,this._cameraFrameId=new WeakMap,this.isShadowNode=!0}setupShadowFilter(e,{filterFn:t,depthTexture:r,shadowCoord:s,shadow:i}){const n=s.x.greaterThanEqual(0).and(s.x.lessThanEqual(1)).and(s.y.greaterThanEqual(0)).and(s.y.lessThanEqual(1)).and(s.z.lessThanEqual(1)),o=t({depthTexture:r,shadowCoord:s,shadow:i});return n.select(o,zi(1))}setupShadowCoord(e,t){const{shadow:r}=this,{renderer:s}=e,i=sd("bias","float",r).setGroup(fn);let n,o=t;if(r.camera.isOrthographicCamera||!0!==s.logarithmicDepthBuffer)o=o.xyz.div(o.w),n=o.z,s.coordinateSystem===d&&(n=n.mul(2).sub(1));else{const e=o.w;o=o.xy.div(e);const t=sd("near","float",r.camera).setGroup(fn),s=sd("far","float",r.camera).setGroup(fn);n=fh(e.negate(),t,s)}return o=Yi(o.x,o.y.oneMinus(),n.add(i)),o}getShadowFilterFn(e){return bb[e]}setupShadow(e){const{renderer:t}=e,{light:r,shadow:s}=this,i=t.shadowMap.type,n=new L(s.mapSize.width,s.mapSize.height);n.compareFunction=Le;const o=e.createRenderTarget(s.mapSize.width,s.mapSize.height);if(o.depthTexture=n,s.camera.updateProjectionMatrix(),i===De){n.compareFunction=null,this.vsmShadowMapVertical=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ve,type:he}),this.vsmShadowMapHorizontal=e.createRenderTarget(s.mapSize.width,s.mapSize.height,{format:Ve,type:he});const t=ku(n),r=ku(this.vsmShadowMapVertical.texture),i=sd("blurSamples","float",s).setGroup(fn),o=sd("radius","float",s).setGroup(fn),a=sd("mapSize","vec2",s).setGroup(fn);let u=this.vsmMaterialVertical||(this.vsmMaterialVertical=new wh);u.fragmentNode=yb({samples:i,radius:o,size:a,shadowPass:t}).context(e.getSharedContext()),u.name="VSMVertical",u=this.vsmMaterialHorizontal||(this.vsmMaterialHorizontal=new wh),u.fragmentNode=xb({samples:i,radius:o,size:a,shadowPass:r}).context(e.getSharedContext()),u.name="VSMHorizontal"}const a=sd("intensity","float",s).setGroup(fn),u=sd("normalBias","float",s).setGroup(fn),l=$x(r).mul(eb.add(Gl.mul(u))),d=this.setupShadowCoord(e,l),c=s.filterNode||this.getShadowFilterFn(t.shadowMap.type)||null;if(null===c)throw new Error("THREE.WebGPURenderer: Shadow map type not supported yet.");const h=i===De?this.vsmShadowMapHorizontal.texture:n,p=this.setupShadowFilter(e,{filterFn:c,shadowTexture:o.texture,depthTexture:h,shadowCoord:d,shadow:s}),g=ku(o.texture,d),m=wa(1,p.rgb.mix(g,1),a.mul(g.a)).toVar();return this.shadowMap=o,this.shadow.map=o,m}setup(e){if(!1!==e.renderer.shadowMap.enabled)return Di((()=>{let t=this._node;return this.setupShadowPosition(e),null===t&&(this._node=t=this.setupShadow(e)),e.material.shadowNode&&console.warn('THREE.NodeMaterial: ".shadowNode" is deprecated. Use ".castShadowNode" instead.'),e.material.receivedShadowNode&&(t=e.material.receivedShadowNode(t)),t}))()}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e;t.updateMatrices(s),r.setSize(t.mapSize.width,t.mapSize.height),i.render(n,t.camera)}updateShadow(e){const{shadowMap:t,light:r,shadow:s}=this,{renderer:i,scene:n,camera:o}=e,a=i.shadowMap.type,u=t.depthTexture.version;this._depthVersionCached=u,s.camera.layers.mask=o.layers.mask;const l=i.getRenderObjectFunction(),d=i.getMRT(),c=!!d&&d.has("velocity");Tb=ab(i,n,Tb),n.overrideMaterial=hb(r),i.setRenderObjectFunction(((e,t,r,n,u,l,...d)=>{(!0===e.castShadow||e.receiveShadow&&a===De)&&(c&&(Ms(e).useVelocity=!0),e.onBeforeShadow(i,e,o,s.camera,n,t.overrideMaterial,l),i.renderObject(e,t,r,n,u,l,...d),e.onAfterShadow(i,e,o,s.camera,n,t.overrideMaterial,l))})),i.setRenderTarget(t),this.renderShadow(e),i.setRenderObjectFunction(l),!0!==r.isPointLight&&a===De&&this.vsmPass(i),ub(i,n,Tb)}vsmPass(e){const{shadow:t}=this;this.vsmShadowMapVertical.setSize(t.mapSize.width,t.mapSize.height),this.vsmShadowMapHorizontal.setSize(t.mapSize.width,t.mapSize.height),e.setRenderTarget(this.vsmShadowMapVertical),_b.material=this.vsmMaterialVertical,_b.render(e),e.setRenderTarget(this.vsmShadowMapHorizontal),_b.material=this.vsmMaterialHorizontal,_b.render(e)}dispose(){this.shadowMap.dispose(),this.shadowMap=null,null!==this.vsmShadowMapVertical&&(this.vsmShadowMapVertical.dispose(),this.vsmShadowMapVertical=null,this.vsmMaterialVertical.dispose(),this.vsmMaterialVertical=null),null!==this.vsmShadowMapHorizontal&&(this.vsmShadowMapHorizontal.dispose(),this.vsmShadowMapHorizontal=null,this.vsmMaterialHorizontal.dispose(),this.vsmMaterialHorizontal=null),super.dispose()}updateBefore(e){const{shadow:t}=this;let r=t.needsUpdate||t.autoUpdate;r&&(this._cameraFrameId[e.camera]===e.frameId&&(r=!1),this._cameraFrameId[e.camera]=e.frameId),r&&(this.updateShadow(e),this.shadowMap.depthTexture.version===this._depthVersionCached&&(t.needsUpdate=!1))}}const Nb=(e,t)=>Fi(new vb(e,t)),Sb=new e,Eb=Di((([e,t])=>{const r=e.toVar(),s=Yo(r),i=no(1,ca(s.x,ca(s.y,s.z)));s.mulAssign(i),r.mulAssign(i.mul(t.mul(2).oneMinus()));const n=ji(r.xy).toVar(),o=t.mul(1.5).oneMinus();return Oi(s.z.greaterThanEqual(o),(()=>{Oi(r.z.greaterThan(0),(()=>{n.x.assign(so(4,r.x))}))})).ElseIf(s.x.greaterThanEqual(o),(()=>{const e=Qo(r.x);n.x.assign(r.z.mul(e).add(e.mul(2)))})).ElseIf(s.y.greaterThanEqual(o),(()=>{const e=Qo(r.y);n.x.assign(r.x.add(e.mul(2)).add(2)),n.y.assign(r.z.mul(e).sub(2))})),ji(.125,.25).mul(n).add(ji(.375,.75)).flipY()})).setLayout({name:"cubeToUV",type:"vec2",inputs:[{name:"pos",type:"vec3"},{name:"texelSizeY",type:"float"}]}),wb=Di((({depthTexture:e,bd3D:t,dp:r,texelSize:s})=>ku(e,Eb(t,s.y)).compare(r))),Ab=Di((({depthTexture:e,bd3D:t,dp:r,texelSize:s,shadow:i})=>{const n=sd("radius","float",i).setGroup(fn),o=ji(-1,1).mul(n).mul(s.y);return ku(e,Eb(t.add(o.xyy),s.y)).compare(r).add(ku(e,Eb(t.add(o.yyy),s.y)).compare(r)).add(ku(e,Eb(t.add(o.xyx),s.y)).compare(r)).add(ku(e,Eb(t.add(o.yyx),s.y)).compare(r)).add(ku(e,Eb(t,s.y)).compare(r)).add(ku(e,Eb(t.add(o.xxy),s.y)).compare(r)).add(ku(e,Eb(t.add(o.yxy),s.y)).compare(r)).add(ku(e,Eb(t.add(o.xxx),s.y)).compare(r)).add(ku(e,Eb(t.add(o.yxx),s.y)).compare(r)).mul(1/9)})),Rb=Di((({filterFn:e,depthTexture:t,shadowCoord:r,shadow:s})=>{const i=r.xyz.toVar(),n=i.length(),o=bn("float").setGroup(fn).onRenderUpdate((()=>s.camera.near)),a=bn("float").setGroup(fn).onRenderUpdate((()=>s.camera.far)),u=sd("bias","float",s).setGroup(fn),l=bn(s.mapSize).setGroup(fn),d=zi(1).toVar();return Oi(n.sub(a).lessThanEqual(0).and(n.sub(o).greaterThanEqual(0)),(()=>{const r=n.sub(o).div(a.sub(o)).toVar();r.addAssign(u);const c=i.normalize(),h=ji(1).div(l.mul(ji(4,2)));d.assign(e({depthTexture:t,bd3D:c,dp:r,texelSize:h,shadow:s}))})),d})),Cb=new s,Mb=new t,Fb=new t;class Bb extends vb{static get type(){return"PointShadowNode"}constructor(e,t=null){super(e,t)}getShadowFilterFn(e){return e===Ue?wb:Ab}setupShadowCoord(e,t){return t}setupShadowFilter(e,{filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n}){return Rb({filterFn:t,shadowTexture:r,depthTexture:s,shadowCoord:i,shadow:n})}renderShadow(e){const{shadow:t,shadowMap:r,light:s}=this,{renderer:i,scene:n}=e,o=t.getFrameExtents();Fb.copy(t.mapSize),Fb.multiply(o),r.setSize(Fb.width,Fb.height),Mb.copy(t.mapSize);const a=i.autoClear,u=i.getClearColor(Sb),l=i.getClearAlpha();i.autoClear=!1,i.setClearColor(t.clearColor,t.clearAlpha),i.clear();const d=t.getViewportCount();for(let e=0;e<d;e++){const o=t.getViewport(e),a=Mb.x*o.x,u=Fb.y-Mb.y-Mb.y*o.y;Cb.set(a,u,Mb.x*o.z,Mb.y*o.w),r.viewport.copy(Cb),t.updateMatrices(s,e),i.render(n,t.camera)}i.autoClear=a,i.setClearColor(u,l)}}const Pb=(e,t)=>Fi(new Bb(e,t));class Ib extends kc{static get type(){return"AnalyticLightNode"}constructor(t=null){super(),this.light=t,this.color=new e,this.colorNode=t&&t.colorNode||bn(this.color).setGroup(fn),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0,this.updateType=Ls.FRAME}customCacheKey(){return Ts(this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}getLightVector(e){return Xx(this.light).sub(e.context.positionView||Cl)}setupDirect(){}setupDirectRectArea(){}setupShadowNode(){return Nb(this.light)}setupShadow(e){const{renderer:t}=e;if(!1===t.shadowMap.enabled)return;let r=this.shadowColorNode;if(null===r){const e=this.light.shadow.shadowNode;let t;t=void 0!==e?Fi(e):this.setupShadowNode(),this.shadowNode=t,this.shadowColorNode=r=this.colorNode.mul(t),this.baseColorNode=this.colorNode}this.colorNode=r}setup(e){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?e.object.receiveShadow&&this.setupShadow(e):null!==this.shadowNode&&(this.shadowNode.dispose(),this.shadowNode=null,this.shadowColorNode=null);const t=this.setupDirect(e),r=this.setupDirectRectArea(e);t&&e.lightsNode.setupDirectLight(e,this,t),r&&e.lightsNode.setupDirectRectAreaLight(e,this,r)}update(){const{light:e}=this;this.color.copy(e.color).multiplyScalar(e.intensity)}}const Lb=Di((({lightDistance:e,cutoffDistance:t,decayExponent:r})=>{const s=e.pow(r).max(.01).reciprocal();return t.greaterThan(0).select(s.mul(e.div(t).pow4().oneMinus().clamp().pow2()),s)})),Db=({color:e,lightVector:t,cutoffDistance:r,decayExponent:s})=>{const i=t.normalize(),n=t.length(),o=Lb({lightDistance:n,cutoffDistance:r,decayExponent:s});return{lightDirection:i,lightColor:e.mul(o)}};class Vb extends Ib{static get type(){return"PointLightNode"}constructor(e=null){super(e),this.cutoffDistanceNode=bn(0).setGroup(fn),this.decayExponentNode=bn(2).setGroup(fn)}update(e){const{light:t}=this;super.update(e),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}setupShadowNode(){return Pb(this.light)}setupDirect(e){return Db({color:this.colorNode,lightVector:this.getLightVector(e),cutoffDistance:this.cutoffDistanceNode,decayExponent:this.decayExponentNode})}}const Ub=Di((([e=t()])=>{const t=e.mul(2),r=t.x.floor(),s=t.y.floor();return r.add(s).mod(2).sign()})),Ob=Di((([e=Lu()],{renderer:t,material:r})=>{const s=zi(1).toVar(),i=Ea(e.mul(2).sub(1));if(r.alphaToCoverage&&t.samples>1){const e=zi(i.fwidth()).toVar();s.assign(Ma(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();return s})),Gb=Di((([e,t,r])=>{const s=zi(r).toVar(),i=zi(t).toVar(),n=Hi(e).toVar();return Oa(n,i,s)})).setLayout({name:"mx_select",type:"float",inputs:[{name:"b",type:"bool"},{name:"t",type:"float"},{name:"f",type:"float"}]}),kb=Di((([e,t])=>{const r=Hi(t).toVar(),s=zi(e).toVar();return Oa(r,s.negate(),s)})).setLayout({name:"mx_negate_if",type:"float",inputs:[{name:"val",type:"float"},{name:"b",type:"bool"}]}),zb=Di((([e])=>{const t=zi(e).toVar();return Wi(Go(t))})).setLayout({name:"mx_floor",type:"int",inputs:[{name:"x",type:"float"}]}),Wb=Di((([e,t])=>{const r=zi(e).toVar();return t.assign(zb(r)),r.sub(zi(t))})),$b=wf([Di((([e,t,r,s,i,n])=>{const o=zi(n).toVar(),a=zi(i).toVar(),u=zi(s).toVar(),l=zi(r).toVar(),d=zi(t).toVar(),c=zi(e).toVar(),h=zi(so(1,a)).toVar();return so(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"}]}),Di((([e,t,r,s,i,n])=>{const o=zi(n).toVar(),a=zi(i).toVar(),u=Yi(s).toVar(),l=Yi(r).toVar(),d=Yi(t).toVar(),c=Yi(e).toVar(),h=zi(so(1,a)).toVar();return so(1,o).mul(c.mul(h).add(d.mul(a))).add(o.mul(l.mul(h).add(u.mul(a))))})).setLayout({name:"mx_bilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"}]})]),Hb=wf([Di((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=zi(d).toVar(),h=zi(l).toVar(),p=zi(u).toVar(),g=zi(a).toVar(),m=zi(o).toVar(),f=zi(n).toVar(),y=zi(i).toVar(),x=zi(s).toVar(),b=zi(r).toVar(),T=zi(t).toVar(),_=zi(e).toVar(),v=zi(so(1,p)).toVar(),N=zi(so(1,h)).toVar();return zi(so(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_0",type:"float",inputs:[{name:"v0",type:"float"},{name:"v1",type:"float"},{name:"v2",type:"float"},{name:"v3",type:"float"},{name:"v4",type:"float"},{name:"v5",type:"float"},{name:"v6",type:"float"},{name:"v7",type:"float"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]}),Di((([e,t,r,s,i,n,o,a,u,l,d])=>{const c=zi(d).toVar(),h=zi(l).toVar(),p=zi(u).toVar(),g=Yi(a).toVar(),m=Yi(o).toVar(),f=Yi(n).toVar(),y=Yi(i).toVar(),x=Yi(s).toVar(),b=Yi(r).toVar(),T=Yi(t).toVar(),_=Yi(e).toVar(),v=zi(so(1,p)).toVar(),N=zi(so(1,h)).toVar();return zi(so(1,c)).toVar().mul(N.mul(_.mul(v).add(T.mul(p))).add(h.mul(b.mul(v).add(x.mul(p))))).add(c.mul(N.mul(y.mul(v).add(f.mul(p))).add(h.mul(m.mul(v).add(g.mul(p))))))})).setLayout({name:"mx_trilerp_1",type:"vec3",inputs:[{name:"v0",type:"vec3"},{name:"v1",type:"vec3"},{name:"v2",type:"vec3"},{name:"v3",type:"vec3"},{name:"v4",type:"vec3"},{name:"v5",type:"vec3"},{name:"v6",type:"vec3"},{name:"v7",type:"vec3"},{name:"s",type:"float"},{name:"t",type:"float"},{name:"r",type:"float"}]})]),jb=Di((([e,t,r])=>{const s=zi(r).toVar(),i=zi(t).toVar(),n=$i(e).toVar(),o=$i(n.bitAnd($i(7))).toVar(),a=zi(Gb(o.lessThan($i(4)),i,s)).toVar(),u=zi(io(2,Gb(o.lessThan($i(4)),s,i))).toVar();return kb(a,Hi(o.bitAnd($i(1)))).add(kb(u,Hi(o.bitAnd($i(2)))))})).setLayout({name:"mx_gradient_float_0",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"}]}),qb=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=zi(t).toVar(),a=$i(e).toVar(),u=$i(a.bitAnd($i(15))).toVar(),l=zi(Gb(u.lessThan($i(8)),o,n)).toVar(),d=zi(Gb(u.lessThan($i(4)),n,Gb(u.equal($i(12)).or(u.equal($i(14))),o,i))).toVar();return kb(l,Hi(u.bitAnd($i(1)))).add(kb(d,Hi(u.bitAnd($i(2)))))})).setLayout({name:"mx_gradient_float_1",type:"float",inputs:[{name:"hash",type:"uint"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Xb=wf([jb,qb]),Kb=Di((([e,t,r])=>{const s=zi(r).toVar(),i=zi(t).toVar(),n=Zi(e).toVar();return Yi(Xb(n.x,i,s),Xb(n.y,i,s),Xb(n.z,i,s))})).setLayout({name:"mx_gradient_vec3_0",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"}]}),Yb=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=zi(t).toVar(),a=Zi(e).toVar();return Yi(Xb(a.x,o,n,i),Xb(a.y,o,n,i),Xb(a.z,o,n,i))})).setLayout({name:"mx_gradient_vec3_1",type:"vec3",inputs:[{name:"hash",type:"uvec3"},{name:"x",type:"float"},{name:"y",type:"float"},{name:"z",type:"float"}]}),Qb=wf([Kb,Yb]),Zb=Di((([e])=>{const t=zi(e).toVar();return io(.6616,t)})).setLayout({name:"mx_gradient_scale2d_0",type:"float",inputs:[{name:"v",type:"float"}]}),Jb=Di((([e])=>{const t=zi(e).toVar();return io(.982,t)})).setLayout({name:"mx_gradient_scale3d_0",type:"float",inputs:[{name:"v",type:"float"}]}),eT=wf([Zb,Di((([e])=>{const t=Yi(e).toVar();return io(.6616,t)})).setLayout({name:"mx_gradient_scale2d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),tT=wf([Jb,Di((([e])=>{const t=Yi(e).toVar();return io(.982,t)})).setLayout({name:"mx_gradient_scale3d_1",type:"vec3",inputs:[{name:"v",type:"vec3"}]})]),rT=Di((([e,t])=>{const r=Wi(t).toVar(),s=$i(e).toVar();return s.shiftLeft(r).bitOr(s.shiftRight(Wi(32).sub(r)))})).setLayout({name:"mx_rotl32",type:"uint",inputs:[{name:"x",type:"uint"},{name:"k",type:"int"}]}),sT=Di((([e,t,r])=>{e.subAssign(r),e.bitXorAssign(rT(r,Wi(4))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(rT(e,Wi(6))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(rT(t,Wi(8))),t.addAssign(e),e.subAssign(r),e.bitXorAssign(rT(r,Wi(16))),r.addAssign(t),t.subAssign(e),t.bitXorAssign(rT(e,Wi(19))),e.addAssign(r),r.subAssign(t),r.bitXorAssign(rT(t,Wi(4))),t.addAssign(e)})),iT=Di((([e,t,r])=>{const s=$i(r).toVar(),i=$i(t).toVar(),n=$i(e).toVar();return s.bitXorAssign(i),s.subAssign(rT(i,Wi(14))),n.bitXorAssign(s),n.subAssign(rT(s,Wi(11))),i.bitXorAssign(n),i.subAssign(rT(n,Wi(25))),s.bitXorAssign(i),s.subAssign(rT(i,Wi(16))),n.bitXorAssign(s),n.subAssign(rT(s,Wi(4))),i.bitXorAssign(n),i.subAssign(rT(n,Wi(14))),s.bitXorAssign(i),s.subAssign(rT(i,Wi(24))),s})).setLayout({name:"mx_bjfinal",type:"uint",inputs:[{name:"a",type:"uint"},{name:"b",type:"uint"},{name:"c",type:"uint"}]}),nT=Di((([e])=>{const t=$i(e).toVar();return zi(t).div(zi($i(Wi(4294967295))))})).setLayout({name:"mx_bits_to_01",type:"float",inputs:[{name:"bits",type:"uint"}]}),oT=Di((([e])=>{const t=zi(e).toVar();return t.mul(t).mul(t).mul(t.mul(t.mul(6).sub(15)).add(10))})).setLayout({name:"mx_fade",type:"float",inputs:[{name:"t",type:"float"}]}),aT=wf([Di((([e])=>{const t=Wi(e).toVar(),r=$i($i(1)).toVar(),s=$i($i(Wi(3735928559)).add(r.shiftLeft($i(2))).add($i(13))).toVar();return iT(s.add($i(t)),s,s)})).setLayout({name:"mx_hash_int_0",type:"uint",inputs:[{name:"x",type:"int"}]}),Di((([e,t])=>{const r=Wi(t).toVar(),s=Wi(e).toVar(),i=$i($i(2)).toVar(),n=$i().toVar(),o=$i().toVar(),a=$i().toVar();return n.assign(o.assign(a.assign($i(Wi(3735928559)).add(i.shiftLeft($i(2))).add($i(13))))),n.addAssign($i(s)),o.addAssign($i(r)),iT(n,o,a)})).setLayout({name:"mx_hash_int_1",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Di((([e,t,r])=>{const s=Wi(r).toVar(),i=Wi(t).toVar(),n=Wi(e).toVar(),o=$i($i(3)).toVar(),a=$i().toVar(),u=$i().toVar(),l=$i().toVar();return a.assign(u.assign(l.assign($i(Wi(3735928559)).add(o.shiftLeft($i(2))).add($i(13))))),a.addAssign($i(n)),u.addAssign($i(i)),l.addAssign($i(s)),iT(a,u,l)})).setLayout({name:"mx_hash_int_2",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]}),Di((([e,t,r,s])=>{const i=Wi(s).toVar(),n=Wi(r).toVar(),o=Wi(t).toVar(),a=Wi(e).toVar(),u=$i($i(4)).toVar(),l=$i().toVar(),d=$i().toVar(),c=$i().toVar();return l.assign(d.assign(c.assign($i(Wi(3735928559)).add(u.shiftLeft($i(2))).add($i(13))))),l.addAssign($i(a)),d.addAssign($i(o)),c.addAssign($i(n)),sT(l,d,c),l.addAssign($i(i)),iT(l,d,c)})).setLayout({name:"mx_hash_int_3",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"}]}),Di((([e,t,r,s,i])=>{const n=Wi(i).toVar(),o=Wi(s).toVar(),a=Wi(r).toVar(),u=Wi(t).toVar(),l=Wi(e).toVar(),d=$i($i(5)).toVar(),c=$i().toVar(),h=$i().toVar(),p=$i().toVar();return c.assign(h.assign(p.assign($i(Wi(3735928559)).add(d.shiftLeft($i(2))).add($i(13))))),c.addAssign($i(l)),h.addAssign($i(u)),p.addAssign($i(a)),sT(c,h,p),c.addAssign($i(o)),h.addAssign($i(n)),iT(c,h,p)})).setLayout({name:"mx_hash_int_4",type:"uint",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xx",type:"int"},{name:"yy",type:"int"}]})]),uT=wf([Di((([e,t])=>{const r=Wi(t).toVar(),s=Wi(e).toVar(),i=$i(aT(s,r)).toVar(),n=Zi().toVar();return n.x.assign(i.bitAnd(Wi(255))),n.y.assign(i.shiftRight(Wi(8)).bitAnd(Wi(255))),n.z.assign(i.shiftRight(Wi(16)).bitAnd(Wi(255))),n})).setLayout({name:"mx_hash_vec3_0",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"}]}),Di((([e,t,r])=>{const s=Wi(r).toVar(),i=Wi(t).toVar(),n=Wi(e).toVar(),o=$i(aT(n,i,s)).toVar(),a=Zi().toVar();return a.x.assign(o.bitAnd(Wi(255))),a.y.assign(o.shiftRight(Wi(8)).bitAnd(Wi(255))),a.z.assign(o.shiftRight(Wi(16)).bitAnd(Wi(255))),a})).setLayout({name:"mx_hash_vec3_1",type:"uvec3",inputs:[{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"}]})]),lT=wf([Di((([e])=>{const t=ji(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=zi(Wb(t.x,r)).toVar(),n=zi(Wb(t.y,s)).toVar(),o=zi(oT(i)).toVar(),a=zi(oT(n)).toVar(),u=zi($b(Xb(aT(r,s),i,n),Xb(aT(r.add(Wi(1)),s),i.sub(1),n),Xb(aT(r,s.add(Wi(1))),i,n.sub(1)),Xb(aT(r.add(Wi(1)),s.add(Wi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return eT(u)})).setLayout({name:"mx_perlin_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"}]}),Di((([e])=>{const t=Yi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Wi().toVar(),n=zi(Wb(t.x,r)).toVar(),o=zi(Wb(t.y,s)).toVar(),a=zi(Wb(t.z,i)).toVar(),u=zi(oT(n)).toVar(),l=zi(oT(o)).toVar(),d=zi(oT(a)).toVar(),c=zi(Hb(Xb(aT(r,s,i),n,o,a),Xb(aT(r.add(Wi(1)),s,i),n.sub(1),o,a),Xb(aT(r,s.add(Wi(1)),i),n,o.sub(1),a),Xb(aT(r.add(Wi(1)),s.add(Wi(1)),i),n.sub(1),o.sub(1),a),Xb(aT(r,s,i.add(Wi(1))),n,o,a.sub(1)),Xb(aT(r.add(Wi(1)),s,i.add(Wi(1))),n.sub(1),o,a.sub(1)),Xb(aT(r,s.add(Wi(1)),i.add(Wi(1))),n,o.sub(1),a.sub(1)),Xb(aT(r.add(Wi(1)),s.add(Wi(1)),i.add(Wi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return tT(c)})).setLayout({name:"mx_perlin_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"}]})]),dT=wf([Di((([e])=>{const t=ji(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=zi(Wb(t.x,r)).toVar(),n=zi(Wb(t.y,s)).toVar(),o=zi(oT(i)).toVar(),a=zi(oT(n)).toVar(),u=Yi($b(Qb(uT(r,s),i,n),Qb(uT(r.add(Wi(1)),s),i.sub(1),n),Qb(uT(r,s.add(Wi(1))),i,n.sub(1)),Qb(uT(r.add(Wi(1)),s.add(Wi(1))),i.sub(1),n.sub(1)),o,a)).toVar();return eT(u)})).setLayout({name:"mx_perlin_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Di((([e])=>{const t=Yi(e).toVar(),r=Wi().toVar(),s=Wi().toVar(),i=Wi().toVar(),n=zi(Wb(t.x,r)).toVar(),o=zi(Wb(t.y,s)).toVar(),a=zi(Wb(t.z,i)).toVar(),u=zi(oT(n)).toVar(),l=zi(oT(o)).toVar(),d=zi(oT(a)).toVar(),c=Yi(Hb(Qb(uT(r,s,i),n,o,a),Qb(uT(r.add(Wi(1)),s,i),n.sub(1),o,a),Qb(uT(r,s.add(Wi(1)),i),n,o.sub(1),a),Qb(uT(r.add(Wi(1)),s.add(Wi(1)),i),n.sub(1),o.sub(1),a),Qb(uT(r,s,i.add(Wi(1))),n,o,a.sub(1)),Qb(uT(r.add(Wi(1)),s,i.add(Wi(1))),n.sub(1),o,a.sub(1)),Qb(uT(r,s.add(Wi(1)),i.add(Wi(1))),n,o.sub(1),a.sub(1)),Qb(uT(r.add(Wi(1)),s.add(Wi(1)),i.add(Wi(1))),n.sub(1),o.sub(1),a.sub(1)),u,l,d)).toVar();return tT(c)})).setLayout({name:"mx_perlin_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"}]})]),cT=wf([Di((([e])=>{const t=zi(e).toVar(),r=Wi(zb(t)).toVar();return nT(aT(r))})).setLayout({name:"mx_cell_noise_float_0",type:"float",inputs:[{name:"p",type:"float"}]}),Di((([e])=>{const t=ji(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar();return nT(aT(r,s))})).setLayout({name:"mx_cell_noise_float_1",type:"float",inputs:[{name:"p",type:"vec2"}]}),Di((([e])=>{const t=Yi(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar(),i=Wi(zb(t.z)).toVar();return nT(aT(r,s,i))})).setLayout({name:"mx_cell_noise_float_2",type:"float",inputs:[{name:"p",type:"vec3"}]}),Di((([e])=>{const t=en(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar(),i=Wi(zb(t.z)).toVar(),n=Wi(zb(t.w)).toVar();return nT(aT(r,s,i,n))})).setLayout({name:"mx_cell_noise_float_3",type:"float",inputs:[{name:"p",type:"vec4"}]})]),hT=wf([Di((([e])=>{const t=zi(e).toVar(),r=Wi(zb(t)).toVar();return Yi(nT(aT(r,Wi(0))),nT(aT(r,Wi(1))),nT(aT(r,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"float"}]}),Di((([e])=>{const t=ji(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar();return Yi(nT(aT(r,s,Wi(0))),nT(aT(r,s,Wi(1))),nT(aT(r,s,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec2"}]}),Di((([e])=>{const t=Yi(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar(),i=Wi(zb(t.z)).toVar();return Yi(nT(aT(r,s,i,Wi(0))),nT(aT(r,s,i,Wi(1))),nT(aT(r,s,i,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_2",type:"vec3",inputs:[{name:"p",type:"vec3"}]}),Di((([e])=>{const t=en(e).toVar(),r=Wi(zb(t.x)).toVar(),s=Wi(zb(t.y)).toVar(),i=Wi(zb(t.z)).toVar(),n=Wi(zb(t.w)).toVar();return Yi(nT(aT(r,s,i,n,Wi(0))),nT(aT(r,s,i,n,Wi(1))),nT(aT(r,s,i,n,Wi(2))))})).setLayout({name:"mx_cell_noise_vec3_3",type:"vec3",inputs:[{name:"p",type:"vec4"}]})]),pT=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=Wi(t).toVar(),a=Yi(e).toVar(),u=zi(0).toVar(),l=zi(1).toVar();return Ic(o,(()=>{u.addAssign(l.mul(lT(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_float",type:"float",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),gT=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=Wi(t).toVar(),a=Yi(e).toVar(),u=Yi(0).toVar(),l=zi(1).toVar();return Ic(o,(()=>{u.addAssign(l.mul(dT(a))),l.mulAssign(i),a.mulAssign(n)})),u})).setLayout({name:"mx_fractal_noise_vec3",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),mT=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=Wi(t).toVar(),a=Yi(e).toVar();return ji(pT(a,o,n,i),pT(a.add(Yi(Wi(19),Wi(193),Wi(17))),o,n,i))})).setLayout({name:"mx_fractal_noise_vec2",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),fT=Di((([e,t,r,s])=>{const i=zi(s).toVar(),n=zi(r).toVar(),o=Wi(t).toVar(),a=Yi(e).toVar(),u=Yi(gT(a,o,n,i)).toVar(),l=zi(pT(a.add(Yi(Wi(19),Wi(193),Wi(17))),o,n,i)).toVar();return en(u,l)})).setLayout({name:"mx_fractal_noise_vec4",type:"vec4",inputs:[{name:"p",type:"vec3"},{name:"octaves",type:"int"},{name:"lacunarity",type:"float"},{name:"diminish",type:"float"}]}),yT=wf([Di((([e,t,r,s,i,n,o])=>{const a=Wi(o).toVar(),u=zi(n).toVar(),l=Wi(i).toVar(),d=Wi(s).toVar(),c=Wi(r).toVar(),h=Wi(t).toVar(),p=ji(e).toVar(),g=Yi(hT(ji(h.add(d),c.add(l)))).toVar(),m=ji(g.x,g.y).toVar();m.subAssign(.5),m.mulAssign(u),m.addAssign(.5);const f=ji(ji(zi(h),zi(c)).add(m)).toVar(),y=ji(f.sub(p)).toVar();return Oi(a.equal(Wi(2)),(()=>Yo(y.x).add(Yo(y.y)))),Oi(a.equal(Wi(3)),(()=>ca(Yo(y.x),Yo(y.y)))),ya(y,y)})).setLayout({name:"mx_worley_distance_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),Di((([e,t,r,s,i,n,o,a,u])=>{const l=Wi(u).toVar(),d=zi(a).toVar(),c=Wi(o).toVar(),h=Wi(n).toVar(),p=Wi(i).toVar(),g=Wi(s).toVar(),m=Wi(r).toVar(),f=Wi(t).toVar(),y=Yi(e).toVar(),x=Yi(hT(Yi(f.add(p),m.add(h),g.add(c)))).toVar();x.subAssign(.5),x.mulAssign(d),x.addAssign(.5);const b=Yi(Yi(zi(f),zi(m),zi(g)).add(x)).toVar(),T=Yi(b.sub(y)).toVar();return Oi(l.equal(Wi(2)),(()=>Yo(T.x).add(Yo(T.y)).add(Yo(T.z)))),Oi(l.equal(Wi(3)),(()=>ca(ca(Yo(T.x),Yo(T.y)),Yo(T.z)))),ya(T,T)})).setLayout({name:"mx_worley_distance_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"x",type:"int"},{name:"y",type:"int"},{name:"z",type:"int"},{name:"xoff",type:"int"},{name:"yoff",type:"int"},{name:"zoff",type:"int"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),xT=Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=ji(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=ji(Wb(n.x,o),Wb(n.y,a)).toVar(),l=zi(1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=zi(yT(u,e,t,o,a,i,s)).toVar();l.assign(da(l,r))}))})),Oi(s.equal(Wi(0)),(()=>{l.assign(Uo(l))})),l})).setLayout({name:"mx_worley_noise_float_0",type:"float",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),bT=Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=ji(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=ji(Wb(n.x,o),Wb(n.y,a)).toVar(),l=ji(1e6,1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=zi(yT(u,e,t,o,a,i,s)).toVar();Oi(r.lessThan(l.x),(()=>{l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.y.assign(r)}))}))})),Oi(s.equal(Wi(0)),(()=>{l.assign(Uo(l))})),l})).setLayout({name:"mx_worley_noise_vec2_0",type:"vec2",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),TT=Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=ji(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=ji(Wb(n.x,o),Wb(n.y,a)).toVar(),l=Yi(1e6,1e6,1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{const r=zi(yT(u,e,t,o,a,i,s)).toVar();Oi(r.lessThan(l.x),(()=>{l.z.assign(l.y),l.y.assign(l.x),l.x.assign(r)})).ElseIf(r.lessThan(l.y),(()=>{l.z.assign(l.y),l.y.assign(r)})).ElseIf(r.lessThan(l.z),(()=>{l.z.assign(r)}))}))})),Oi(s.equal(Wi(0)),(()=>{l.assign(Uo(l))})),l})).setLayout({name:"mx_worley_noise_vec3_0",type:"vec3",inputs:[{name:"p",type:"vec2"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]}),_T=wf([xT,Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=Yi(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=Wi().toVar(),l=Yi(Wb(n.x,o),Wb(n.y,a),Wb(n.z,u)).toVar(),d=zi(1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Ic({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=zi(yT(l,e,t,r,o,a,u,i,s)).toVar();d.assign(da(d,n))}))}))})),Oi(s.equal(Wi(0)),(()=>{d.assign(Uo(d))})),d})).setLayout({name:"mx_worley_noise_float_1",type:"float",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),vT=wf([bT,Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=Yi(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=Wi().toVar(),l=Yi(Wb(n.x,o),Wb(n.y,a),Wb(n.z,u)).toVar(),d=ji(1e6,1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Ic({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=zi(yT(l,e,t,r,o,a,u,i,s)).toVar();Oi(n.lessThan(d.x),(()=>{d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.y.assign(n)}))}))}))})),Oi(s.equal(Wi(0)),(()=>{d.assign(Uo(d))})),d})).setLayout({name:"mx_worley_noise_vec2_1",type:"vec2",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),NT=wf([TT,Di((([e,t,r])=>{const s=Wi(r).toVar(),i=zi(t).toVar(),n=Yi(e).toVar(),o=Wi().toVar(),a=Wi().toVar(),u=Wi().toVar(),l=Yi(Wb(n.x,o),Wb(n.y,a),Wb(n.z,u)).toVar(),d=Yi(1e6,1e6,1e6).toVar();return Ic({start:-1,end:Wi(1),name:"x",condition:"<="},(({x:e})=>{Ic({start:-1,end:Wi(1),name:"y",condition:"<="},(({y:t})=>{Ic({start:-1,end:Wi(1),name:"z",condition:"<="},(({z:r})=>{const n=zi(yT(l,e,t,r,o,a,u,i,s)).toVar();Oi(n.lessThan(d.x),(()=>{d.z.assign(d.y),d.y.assign(d.x),d.x.assign(n)})).ElseIf(n.lessThan(d.y),(()=>{d.z.assign(d.y),d.y.assign(n)})).ElseIf(n.lessThan(d.z),(()=>{d.z.assign(n)}))}))}))})),Oi(s.equal(Wi(0)),(()=>{d.assign(Uo(d))})),d})).setLayout({name:"mx_worley_noise_vec3_1",type:"vec3",inputs:[{name:"p",type:"vec3"},{name:"jitter",type:"float"},{name:"metric",type:"int"}]})]),ST=Di((([e])=>{const t=e.y,r=e.z,s=Yi().toVar();return Oi(t.lessThan(1e-4),(()=>{s.assign(Yi(r,r,r))})).Else((()=>{let i=e.x;i=i.sub(Go(i)).mul(6).toVar();const n=Wi(na(i)),o=i.sub(zi(n)),a=r.mul(t.oneMinus()),u=r.mul(t.mul(o).oneMinus()),l=r.mul(t.mul(o.oneMinus()).oneMinus());Oi(n.equal(Wi(0)),(()=>{s.assign(Yi(r,l,a))})).ElseIf(n.equal(Wi(1)),(()=>{s.assign(Yi(u,r,a))})).ElseIf(n.equal(Wi(2)),(()=>{s.assign(Yi(a,r,l))})).ElseIf(n.equal(Wi(3)),(()=>{s.assign(Yi(a,u,r))})).ElseIf(n.equal(Wi(4)),(()=>{s.assign(Yi(l,a,r))})).Else((()=>{s.assign(Yi(r,a,u))}))})),s})).setLayout({name:"mx_hsvtorgb",type:"vec3",inputs:[{name:"hsv",type:"vec3"}]}),ET=Di((([e])=>{const t=Yi(e).toVar(),r=zi(t.x).toVar(),s=zi(t.y).toVar(),i=zi(t.z).toVar(),n=zi(da(r,da(s,i))).toVar(),o=zi(ca(r,ca(s,i))).toVar(),a=zi(o.sub(n)).toVar(),u=zi().toVar(),l=zi().toVar(),d=zi().toVar();return d.assign(o),Oi(o.greaterThan(0),(()=>{l.assign(a.div(o))})).Else((()=>{l.assign(0)})),Oi(l.lessThanEqual(0),(()=>{u.assign(0)})).Else((()=>{Oi(r.greaterThanEqual(o),(()=>{u.assign(s.sub(i).div(a))})).ElseIf(s.greaterThanEqual(o),(()=>{u.assign(ro(2,i.sub(r).div(a)))})).Else((()=>{u.assign(ro(4,r.sub(s).div(a)))})),u.mulAssign(1/6),Oi(u.lessThan(0),(()=>{u.addAssign(1)}))})),Yi(u,l,d)})).setLayout({name:"mx_rgbtohsv",type:"vec3",inputs:[{name:"c",type:"vec3"}]}),wT=Di((([e])=>{const t=Yi(e).toVar(),r=Ji(co(t,Yi(.04045))).toVar(),s=Yi(t.div(12.92)).toVar(),i=Yi(ba(ca(t.add(Yi(.055)),Yi(0)).div(1.055),Yi(2.4))).toVar();return wa(s,i,r)})).setLayout({name:"mx_srgb_texture_to_lin_rec709",type:"vec3",inputs:[{name:"color",type:"vec3"}]}),AT=(e,t)=>{e=zi(e),t=zi(t);const r=ji(t.dFdx(),t.dFdy()).length().mul(.7071067811865476);return Ma(e.sub(r),e.add(r),t)},RT=(e,t,r,s)=>wa(e,t,r[s].clamp()),CT=(e,t,r,s,i)=>wa(e,t,AT(r,s[i])),MT=Di((([e,t,r])=>{const s=zo(e).toVar("nDir"),i=so(zi(.5).mul(t.sub(r)),Al).div(s).toVar("rbmax"),n=so(zi(-.5).mul(t.sub(r)),Al).div(s).toVar("rbmin"),o=Yi().toVar("rbminmax");o.x=s.x.greaterThan(zi(0)).select(i.x,n.x),o.y=s.y.greaterThan(zi(0)).select(i.y,n.y),o.z=s.z.greaterThan(zi(0)).select(i.z,n.z);const a=da(da(o.x,o.y),o.z).toVar("correction");return Al.add(s.mul(a)).toVar("boxIntersection").sub(r)})),FT=Di((([e,t])=>{const r=e.x,s=e.y,i=e.z;let n=t.element(0).mul(.886227);return n=n.add(t.element(1).mul(1.023328).mul(s)),n=n.add(t.element(2).mul(1.023328).mul(i)),n=n.add(t.element(3).mul(1.023328).mul(r)),n=n.add(t.element(4).mul(.858086).mul(r).mul(s)),n=n.add(t.element(5).mul(.858086).mul(s).mul(i)),n=n.add(t.element(6).mul(i.mul(i).mul(.743125).sub(.247708))),n=n.add(t.element(7).mul(.858086).mul(r).mul(i)),n=n.add(t.element(8).mul(.429043).mul(io(r,r).sub(io(s,s)))),n}));var BT=Object.freeze({__proto__:null,BRDF_GGX:mp,BRDF_Lambert:ep,BasicPointShadowFilter:wb,BasicShadowFilter:pb,Break:Lc,Const:qa,Continue:()=>Cu("continue").append(),DFGApprox:fp,D_GGX:hp,Discard:Mu,EPSILON:wo,F_Schlick:Jh,Fn:Di,INFINITY:Ao,If:Oi,Loop:Ic,NodeAccess:Vs,NodeShaderStage:Is,NodeType:Ds,NodeUpdateType:Ls,PCFShadowFilter:gb,PCFSoftShadowFilter:mb,PI:Ro,PI2:Co,PointShadowFilter:Ab,Return:()=>Cu("return").append(),Schlick_to_F0:xp,ScriptableNodeResources:xx,ShaderNode:Mi,TBNViewMatrix:Td,VSMShadowFilter:fb,V_GGX_SmithCorrelated:dp,Var:ja,abs:Yo,acesFilmicToneMapping:ix,acos:Xo,add:ro,addMethodChaining:ii,addNodeElement:function(e){console.warn("THREE.TSLBase: AddNodeElement has been removed in favor of tree-shaking. Trying add",e)},agxToneMapping:ux,all:Mo,alphaT:In,and:go,anisotropy:Ln,anisotropyB:Vn,anisotropyT:Dn,any:Fo,append:Gi,array:cn,arrayBuffer:e=>Fi(new ei(e,"ArrayBuffer")),asin:qo,assign:Zn,atan:Ko,atan2:La,atomicAdd:(e,t)=>kx(Ox.ATOMIC_ADD,e,t),atomicAnd:(e,t)=>kx(Ox.ATOMIC_AND,e,t),atomicFunc:kx,atomicLoad:e=>kx(Ox.ATOMIC_LOAD,e,null),atomicMax:(e,t)=>kx(Ox.ATOMIC_MAX,e,t),atomicMin:(e,t)=>kx(Ox.ATOMIC_MIN,e,t),atomicOr:(e,t)=>kx(Ox.ATOMIC_OR,e,t),atomicStore:(e,t)=>kx(Ox.ATOMIC_STORE,e,t),atomicSub:(e,t)=>kx(Ox.ATOMIC_SUB,e,t),atomicXor:(e,t)=>kx(Ox.ATOMIC_XOR,e,t),attenuationColor:Kn,attenuationDistance:Xn,attribute:Iu,attributeArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=ws("float")):(r=As(t),s=ws(t));const i=new cy(e,r,s);return my(i,t,e)},backgroundBlurriness:vy,backgroundIntensity:Ny,backgroundRotation:Sy,batch:Cc,billboarding:Bf,bitAnd:xo,bitNot:bo,bitOr:To,bitXor:_o,bitangentGeometry:gd,bitangentLocal:md,bitangentView:fd,bitangentWorld:yd,bitcast:ua,blendBurn:Dy,blendColor:Gy,blendDodge:Vy,blendOverlay:Oy,blendScreen:Uy,blur:yg,bool:Hi,buffer:$u,bufferAttribute:mu,bumpMap:Cd,burn:(...e)=>(console.warn('THREE.TSL: "burn" has been renamed. Use "blendBurn" instead.'),Dy(e)),bvec2:Ki,bvec3:Ji,bvec4:sn,bypass:Su,cache:vu,call:eo,cameraFar:Yu,cameraIndex:Xu,cameraNear:Ku,cameraNormalMatrix:tl,cameraPosition:rl,cameraProjectionMatrix:Qu,cameraProjectionMatrixInverse:Zu,cameraViewMatrix:Ju,cameraWorldMatrix:el,cbrt:Sa,cdl:jy,ceil:ko,checker:Ub,cineonToneMapping:rx,clamp:Aa,clearcoat:An,clearcoatRoughness:Rn,code:cx,color:ki,colorSpaceToWorking:ou,colorToDirection:e=>Fi(e).mul(2).sub(1),compute:Tu,cond:Ga,context:za,convert:ln,convertColorSpace:(e,t,r)=>Fi(new ru(Fi(e),t,r)),convertToTexture:(e,...t)=>e.isTextureNode?e:e.isPassNode?e.getTextureNode():oy(e,...t),cos:Ho,cross:xa,cubeTexture:ed,cubeToUV:Eb,dFdx:ta,dFdy:ra,dashSize:zn,defaultBuildStages:Os,defaultShaderStages:Us,defined:Ri,degrees:Po,deltaTime:Rf,densityFog:function(e,t){return console.warn('THREE.TSL: "densityFog( color, density )" is deprecated. Use "fog( color, densityFogFactor( density ) )" instead.'),Sx(e,Nx(t))},densityFogFactor:Nx,depth:xh,depthPass:(e,t,r)=>Fi(new Zy(Zy.DEPTH,e,t,r)),difference:fa,diffuseColor:Nn,directPointLight:Db,directionToColor:Dh,dispersion:Yn,distance:ma,div:no,dodge:(...e)=>(console.warn('THREE.TSL: "dodge" has been renamed. Use "blendDodge" instead.'),Vy(e)),dot:ya,drawIndex:Nc,dynamicBufferAttribute:fu,element:un,emissive:Sn,equal:ao,equals:la,equirectUV:Gh,exp:Io,exp2:Lo,expression:Cu,faceDirection:Pl,faceForward:Fa,faceforward:Da,float:zi,floor:Go,fog:Sx,fract:Wo,frameGroup:mn,frameId:Cf,frontFacing:Bl,fwidth:oa,gain:(e,t)=>e.lessThan(.5)?Tf(e.mul(2),t).div(2):so(1,Tf(io(so(1,e),2),t).div(2)),gapSize:Wn,getConstNodeType:Ci,getCurrentStack:Ui,getDirection:pg,getDistanceAttenuation:Lb,getGeometryRoughness:up,getNormalFromDepth:ly,getParallaxCorrectNormal:MT,getRoughness:lp,getScreenPosition:uy,getShIrradianceAt:FT,getTextureIndex:ff,getViewPosition:ay,globalId:Px,glsl:(e,t)=>cx(e,t,"glsl"),glslFn:(e,t)=>px(e,t,"glsl"),grayscale:ky,greaterThan:co,greaterThanEqual:po,hash:bf,highpModelNormalViewMatrix:Nl,highpModelViewMatrix:vl,hue:$y,instance:Ec,instanceIndex:bc,instancedArray:(e,t="float")=>{let r,s;!0===t.isStruct?(r=t.layout.getLength(),s=ws("float")):(r=As(t),s=ws(t));const i=new dy(e,r,s);return my(i,t,e)},instancedBufferAttribute:yu,instancedDynamicBufferAttribute:xu,instancedMesh:Ac,int:Wi,inverseSqrt:Oo,inversesqrt:Va,invocationLocalIndex:vc,invocationSubgroupIndex:_c,ior:Hn,iridescence:Fn,iridescenceIOR:Bn,iridescenceThickness:Pn,ivec2:qi,ivec3:Qi,ivec4:tn,js:(e,t)=>cx(e,t,"js"),label:Wa,length:Zo,lengthSq:Ea,lessThan:lo,lessThanEqual:ho,lightPosition:jx,lightProjectionUV:Hx,lightShadowMatrix:$x,lightTargetDirection:Kx,lightTargetPosition:qx,lightViewPosition:Xx,lightingContext:$c,lights:(e=[])=>Fi(new Zx).setLights(e),linearDepth:bh,linearToneMapping:ex,localId:Ix,log:Do,log2:Vo,logarithmicDepthToViewZ:(e,t,r)=>{const s=e.mul(Do(r.div(t)));return zi(Math.E).pow(s).mul(t).negate()},loop:(...e)=>(console.warn("TSL.LoopNode: loop() has been renamed to Loop()."),Ic(...e)),luminance:Hy,mat2:nn,mat3:on,mat4:an,matcapUV:nm,materialAO:gc,materialAlphaTest:Bd,materialAnisotropy:Qd,materialAnisotropyVector:mc,materialAttenuationColor:nc,materialAttenuationDistance:ic,materialClearcoat:Hd,materialClearcoatNormal:qd,materialClearcoatRoughness:jd,materialColor:Pd,materialDispersion:hc,materialEmissive:Ld,materialEnvIntensity:ql,materialEnvRotation:Xl,materialIOR:sc,materialIridescence:Zd,materialIridescenceIOR:Jd,materialIridescenceThickness:ec,materialLightMap:pc,materialLineDashOffset:dc,materialLineDashSize:ac,materialLineGapSize:uc,materialLineScale:oc,materialLineWidth:lc,materialMetalness:Wd,materialNormal:$d,materialOpacity:Dd,materialPointSize:cc,materialReference:od,materialReflectivity:kd,materialRefractionRatio:jl,materialRotation:Xd,materialRoughness:zd,materialSheen:Kd,materialSheenRoughness:Yd,materialShininess:Id,materialSpecular:Vd,materialSpecularColor:Od,materialSpecularIntensity:Ud,materialSpecularStrength:Gd,materialThickness:rc,materialTransmission:tc,max:ca,maxMipLevel:Ou,mediumpModelViewMatrix:_l,metalness:wn,min:da,mix:wa,mixElement:Pa,mod:ha,modInt:oo,modelDirection:hl,modelNormalMatrix:xl,modelPosition:gl,modelRadius:yl,modelScale:ml,modelViewMatrix:Tl,modelViewPosition:fl,modelViewProjection:fc,modelWorldMatrix:pl,modelWorldMatrixInverse:bl,morphReference:Gc,mrt:xf,mul:io,mx_aastep:AT,mx_cell_noise_float:(e=Lu())=>cT(e.convert("vec2|vec3")),mx_contrast:(e,t=1,r=.5)=>zi(e).sub(r).mul(t).add(r),mx_fractal_noise_float:(e=Lu(),t=3,r=2,s=.5,i=1)=>pT(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec2:(e=Lu(),t=3,r=2,s=.5,i=1)=>mT(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec3:(e=Lu(),t=3,r=2,s=.5,i=1)=>gT(e,Wi(t),r,s).mul(i),mx_fractal_noise_vec4:(e=Lu(),t=3,r=2,s=.5,i=1)=>fT(e,Wi(t),r,s).mul(i),mx_hsvtorgb:ST,mx_noise_float:(e=Lu(),t=1,r=0)=>lT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec3:(e=Lu(),t=1,r=0)=>dT(e.convert("vec2|vec3")).mul(t).add(r),mx_noise_vec4:(e=Lu(),t=1,r=0)=>{e=e.convert("vec2|vec3");return en(dT(e),lT(e.add(ji(19,73)))).mul(t).add(r)},mx_ramplr:(e,t,r=Lu())=>RT(e,t,r,"x"),mx_ramptb:(e,t,r=Lu())=>RT(e,t,r,"y"),mx_rgbtohsv:ET,mx_safepower:(e,t=1)=>(e=zi(e)).abs().pow(t).mul(e.sign()),mx_splitlr:(e,t,r,s=Lu())=>CT(e,t,r,s,"x"),mx_splittb:(e,t,r,s=Lu())=>CT(e,t,r,s,"y"),mx_srgb_texture_to_lin_rec709:wT,mx_transform_uv:(e=1,t=0,r=Lu())=>r.mul(e).add(t),mx_worley_noise_float:(e=Lu(),t=1)=>_T(e.convert("vec2|vec3"),t,Wi(1)),mx_worley_noise_vec2:(e=Lu(),t=1)=>vT(e.convert("vec2|vec3"),t,Wi(1)),mx_worley_noise_vec3:(e=Lu(),t=1)=>NT(e.convert("vec2|vec3"),t,Wi(1)),negate:Jo,neutralToneMapping:lx,nodeArray:Pi,nodeImmutable:Li,nodeObject:Fi,nodeObjects:Bi,nodeProxy:Ii,normalFlat:Dl,normalGeometry:Il,normalLocal:Ll,normalMap:Ed,normalView:Vl,normalWorld:Ul,normalize:zo,not:fo,notEqual:uo,numWorkgroups:Fx,objectDirection:nl,objectGroup:yn,objectPosition:al,objectRadius:dl,objectScale:ul,objectViewPosition:ll,objectWorldMatrix:ol,oneMinus:ea,or:mo,orthographicDepthToViewZ:(e,t,r)=>t.sub(r).mul(e).sub(t),oscSawtooth:(e=Af)=>e.fract(),oscSine:(e=Af)=>e.add(.75).mul(2*Math.PI).sin().mul(.5).add(.5),oscSquare:(e=Af)=>e.fract().round(),oscTriangle:(e=Af)=>e.add(.5).fract().mul(2).sub(1).abs(),output:kn,outputStruct:mf,overlay:(...e)=>(console.warn('THREE.TSL: "overlay" has been renamed. Use "blendOverlay" instead.'),Oy(e)),overloadingFn:wf,parabola:Tf,parallaxDirection:_d,parallaxUV:(e,t)=>e.sub(_d.mul(t)),parameter:(e,t)=>Fi(new lf(e,t)),pass:(e,t,r)=>Fi(new Zy(Zy.COLOR,e,t,r)),passTexture:(e,t)=>Fi(new Yy(e,t)),pcurve:(e,t,r)=>ba(no(ba(e,t),ro(ba(e,t),ba(so(1,e),r))),1/t),perspectiveDepthToViewZ:mh,pmremTexture:Wg,pointShadow:Pb,pointUV:xy,pointWidth:$n,positionGeometry:Sl,positionLocal:El,positionPrevious:wl,positionView:Cl,positionViewDirection:Ml,positionWorld:Al,positionWorldDirection:Rl,posterize:Xy,pow:ba,pow2:Ta,pow3:_a,pow4:va,property:_n,radians:Bo,rand:Ba,range:Rx,rangeFog:function(e,t,r){return console.warn('THREE.TSL: "rangeFog( color, near, far )" is deprecated. Use "fog( color, rangeFogFactor( near, far ) )" instead.'),Sx(e,vx(t,r))},rangeFogFactor:vx,reciprocal:ia,reference:sd,referenceBuffer:id,reflect:ga,reflectVector:Ql,reflectView:Kl,reflector:e=>Fi(new Zf(e)),refract:Ca,refractVector:Zl,refractView:Yl,reinhardToneMapping:tx,remainder:So,remap:wu,remapClamp:Au,renderGroup:fn,renderOutput:Bu,rendererReference:du,rotate:lm,rotateUV:Mf,roughness:En,round:sa,rtt:oy,sRGBTransferEOTF:Za,sRGBTransferOETF:Ja,sampler:e=>(!0===e.isNode?e:ku(e)).convert("sampler"),samplerComparison:e=>(!0===e.isNode?e:ku(e)).convert("samplerComparison"),saturate:Ra,saturation:zy,screen:(...e)=>(console.warn('THREE.TSL: "screen" has been renamed. Use "blendScreen" instead.'),Uy(e)),screenCoordinate:Qc,screenSize:Yc,screenUV:Kc,scriptable:Tx,scriptableValue:mx,select:Oa,setCurrentStack:Vi,shaderStages:Gs,shadow:Nb,shadowPositionWorld:eb,shapeCircle:Ob,sharedUniformGroup:gn,sheen:Cn,sheenRoughness:Mn,shiftLeft:vo,shiftRight:No,shininess:Gn,sign:Qo,sin:$o,sinc:(e,t)=>$o(Ro.mul(t.mul(e).sub(1))).div(Ro.mul(t.mul(e).sub(1))),skinning:e=>Fi(new Fc(e)),skinningReference:Bc,smoothstep:Ma,smoothstepElement:Ia,specularColor:Un,specularF90:On,spherizeUV:Ff,split:(e,t)=>Fi(new Ks(Fi(e),t)),spritesheetUV:Lf,sqrt:Uo,stack:cf,step:pa,storage:my,storageBarrier:()=>Dx("storage").append(),storageObject:(e,t,r)=>(console.warn('THREE.TSL: "storageObject()" is deprecated. Use "storage().setPBO( true )" instead.'),my(e,t,r).setPBO(!0)),storageTexture:wy,string:(e="")=>Fi(new ei(e,"string")),struct:(e,t=null)=>{const r=new hf(e,t),s=(...t)=>{let s=null;if(t.length>0)if(t[0].isNode){s={};const r=Object.keys(e);for(let e=0;e<t.length;e++)s[r[e]]=t[e]}else s=t[0];return Fi(new pf(r,s))};return s.layout=r,s.isStruct=!0,s},sub:so,subgroupIndex:Tc,subgroupSize:Lx,tan:jo,tangentGeometry:ad,tangentLocal:ud,tangentView:ld,tangentWorld:dd,temp:Xa,texture:ku,texture3D:Cy,textureBarrier:()=>Dx("texture").append(),textureBicubic:Vp,textureCubeUV:gg,textureLoad:zu,textureSize:Vu,textureStore:(e,t,r)=>{const s=wy(e,t,r);return null!==r&&s.append(),s},thickness:qn,time:Af,timerDelta:(e=1)=>(console.warn('TSL: timerDelta() is deprecated. Use "deltaTime" instead.'),Rf.mul(e)),timerGlobal:(e=1)=>(console.warn('TSL: timerGlobal() is deprecated. Use "time" instead.'),Af.mul(e)),timerLocal:(e=1)=>(console.warn('TSL: timerLocal() is deprecated. Use "time" instead.'),Af.mul(e)),toOutputColorSpace:su,toWorkingColorSpace:iu,toneMapping:hu,toneMappingExposure:pu,toonOutlinePass:(t,r,s=new e(0,0,0),i=.003,n=1)=>Fi(new Jy(t,r,Fi(s),Fi(i),Fi(n))),transformDirection:Na,transformNormal:zl,transformNormalToView:Wl,transformedBentNormalView:vd,transformedBitangentView:xd,transformedBitangentWorld:bd,transformedClearcoatNormalView:kl,transformedNormalView:Ol,transformedNormalWorld:Gl,transformedTangentView:cd,transformedTangentWorld:hd,transmission:jn,transpose:aa,triNoise3D:Nf,triplanarTexture:(...e)=>Vf(...e),triplanarTextures:Vf,trunc:na,tslFn:(...e)=>(console.warn("TSL.ShaderNode: tslFn() has been renamed to Fn()."),Di(...e)),uint:$i,uniform:bn,uniformArray:qu,uniformGroup:pn,uniforms:(e,t)=>(console.warn("TSL.UniformArrayNode: uniforms() has been renamed to uniformArray()."),Fi(new ju(e,t))),userData:(e,t,r)=>Fi(new My(e,t,r)),uv:Lu,uvec2:Xi,uvec3:Zi,uvec4:rn,varying:Ya,varyingProperty:vn,vec2:ji,vec3:Yi,vec4:en,vectorComponents:ks,velocity:Ly,vertexColor:e=>Fi(new fy(e)),vertexIndex:xc,vertexStage:Qa,vibrance:Wy,viewZToLogarithmicDepth:fh,viewZToOrthographicDepth:ph,viewZToPerspectiveDepth:gh,viewport:Zc,viewportBottomLeft:ih,viewportCoordinate:eh,viewportDepthTexture:ch,viewportLinearDepth:Th,viewportMipTexture:uh,viewportResolution:rh,viewportSafeUV:Pf,viewportSharedTexture:Ph,viewportSize:Jc,viewportTexture:ah,viewportTopLeft:sh,viewportUV:th,wgsl:(e,t)=>cx(e,t,"wgsl"),wgslFn:(e,t)=>px(e,t,"wgsl"),workgroupArray:(e,t)=>Fi(new Ux("Workgroup",e,t)),workgroupBarrier:()=>Dx("workgroup").append(),workgroupId:Bx,workingToColorSpace:nu,xor:yo});const PT=new uf;class IT extends Rm{constructor(e,t){super(),this.renderer=e,this.nodes=t}update(e,t,r){const s=this.renderer,i=this.nodes.getBackgroundNode(e)||e.background;let n=!1;if(null===i)s._clearColor.getRGB(PT),PT.a=s._clearColor.a;else if(!0===i.isColor)i.getRGB(PT),PT.a=1,n=!0;else if(!0===i.isNode){const r=this.get(e),n=i;PT.copy(s._clearColor);let o=r.backgroundMesh;if(void 0===o){const e=za(en(n).mul(Ny),{getUV:()=>Sy.mul(Ul),getTextureLevel:()=>vy});let t=fc;t=t.setZ(t.w);const s=new wh;s.name="Background.material",s.side=N,s.depthTest=!1,s.depthWrite=!1,s.fog=!1,s.lights=!1,s.vertexNode=t,s.colorNode=e,r.backgroundMeshNode=e,r.backgroundMesh=o=new H(new Oe(1,32,32),s),o.frustumCulled=!1,o.name="Background.mesh",o.onBeforeRender=function(e,t,r){this.matrixWorld.copyPosition(r.matrixWorld)}}const a=n.getCacheKey();r.backgroundCacheKey!==a&&(r.backgroundMeshNode.node=en(n).mul(Ny),r.backgroundMeshNode.needsUpdate=!0,o.material.needsUpdate=!0,r.backgroundCacheKey=a),t.unshift(o,o.geometry,o.material,0,0,null,null)}else console.error("THREE.Renderer: Unsupported background configuration.",i);const o=s.xr.getEnvironmentBlendMode();if("additive"===o?PT.set(0,0,0,1):"alpha-blend"===o&&PT.set(0,0,0,0),!0===s.autoClear||!0===n){const e=r.clearColorValue;e.r=PT.r,e.g=PT.g,e.b=PT.b,e.a=PT.a,!0!==s.backend.isWebGLBackend&&!0!==s.alpha||(e.r*=e.a,e.g*=e.a,e.b*=e.a),r.depthClearValue=s._clearDepth,r.stencilClearValue=s._clearStencil,r.clearColor=!0===s.autoClearColor,r.clearDepth=!0===s.autoClearDepth,r.clearStencil=!0===s.autoClearStencil}else r.clearColor=!1,r.clearDepth=!1,r.clearStencil=!1}}let LT=0;class DT{constructor(e="",t=[],r=0,s=[]){this.name=e,this.bindings=t,this.index=r,this.bindingsReference=s,this.id=LT++}}class VT{constructor(e,t,r,s,i,n,o,a,u,l=[]){this.vertexShader=e,this.fragmentShader=t,this.computeShader=r,this.transforms=l,this.nodeAttributes=s,this.bindings=i,this.updateNodes=n,this.updateBeforeNodes=o,this.updateAfterNodes=a,this.observer=u,this.usedTimes=0}createBindings(){const e=[];for(const t of this.bindings){if(!0!==t.bindings[0].groupNode.shared){const r=new DT(t.name,[],t.index,t);e.push(r);for(const e of t.bindings)r.bindings.push(e.clone())}else e.push(t)}return e}}class UT{constructor(e,t,r=null){this.isNodeAttribute=!0,this.name=e,this.type=t,this.node=r}}class OT{constructor(e,t,r){this.isNodeUniform=!0,this.name=e,this.type=t,this.node=r.getSelf()}get value(){return this.node.value}set value(e){this.node.value=e}get id(){return this.node.id}get groupNode(){return this.node.groupNode}}class GT{constructor(e,t,r=!1,s=null){this.isNodeVar=!0,this.name=e,this.type=t,this.readOnly=r,this.count=s}}class kT extends GT{constructor(e,t){super(e,t),this.needsInterpolation=!1,this.isNodeVarying=!0}}class zT{constructor(e,t,r=""){this.name=e,this.type=t,this.code=r,Object.defineProperty(this,"isNodeCode",{value:!0})}}let WT=0;class $T{constructor(e=null){this.id=WT++,this.nodesData=new WeakMap,this.parent=e}getData(e){let t=this.nodesData.get(e);return void 0===t&&null!==this.parent&&(t=this.parent.getData(e)),t}setData(e,t){this.nodesData.set(e,t)}}class HT{constructor(e,t){this.name=e,this.members=t,this.output=!1}}class jT{constructor(e,t){this.name=e,this.value=t,this.boundary=0,this.itemSize=0,this.offset=0}setValue(e){this.value=e}getValue(){return this.value}}class qT extends jT{constructor(e,t=0){super(e,t),this.isNumberUniform=!0,this.boundary=4,this.itemSize=1}}class XT extends jT{constructor(e,r=new t){super(e,r),this.isVector2Uniform=!0,this.boundary=8,this.itemSize=2}}class KT extends jT{constructor(e,t=new r){super(e,t),this.isVector3Uniform=!0,this.boundary=16,this.itemSize=3}}class YT extends jT{constructor(e,t=new s){super(e,t),this.isVector4Uniform=!0,this.boundary=16,this.itemSize=4}}class QT extends jT{constructor(t,r=new e){super(t,r),this.isColorUniform=!0,this.boundary=16,this.itemSize=3}}class ZT extends jT{constructor(e,t=new i){super(e,t),this.isMatrix2Uniform=!0,this.boundary=16,this.itemSize=4}}class JT extends jT{constructor(e,t=new n){super(e,t),this.isMatrix3Uniform=!0,this.boundary=48,this.itemSize=12}}class e_ extends jT{constructor(e,t=new o){super(e,t),this.isMatrix4Uniform=!0,this.boundary=64,this.itemSize=16}}class t_ extends qT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class r_ extends XT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class s_ extends KT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class i_ extends YT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class n_ extends QT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class o_ extends ZT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class a_ extends JT{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}class u_ extends e_{constructor(e){super(e.name,e.value),this.nodeUniform=e}getValue(){return this.nodeUniform.value}getType(){return this.nodeUniform.type}}const l_=new WeakMap,d_=new Map([[Int8Array,"int"],[Int16Array,"int"],[Int32Array,"int"],[Uint8Array,"uint"],[Uint16Array,"uint"],[Uint32Array,"uint"],[Float32Array,"float"]]),c_=e=>/e/g.test(e)?String(e).replace(/\+/g,""):(e=Number(e))+(e%1?"":".0");class h_{constructor(e,t,r){this.object=e,this.material=e&&e.material||null,this.geometry=e&&e.geometry||null,this.renderer=t,this.parser=r,this.scene=null,this.camera=null,this.nodes=[],this.sequentialNodes=[],this.updateNodes=[],this.updateBeforeNodes=[],this.updateAfterNodes=[],this.hashNodes={},this.observer=null,this.lightsNode=null,this.environmentNode=null,this.fogNode=null,this.clippingContext=null,this.vertexShader=null,this.fragmentShader=null,this.computeShader=null,this.flowNodes={vertex:[],fragment:[],compute:[]},this.flowCode={vertex:"",fragment:"",compute:""},this.uniforms={vertex:[],fragment:[],compute:[],index:0},this.structs={vertex:[],fragment:[],compute:[],index:0},this.bindings={vertex:{},fragment:{},compute:{}},this.bindingsIndexes={},this.bindGroups=null,this.attributes=[],this.bufferAttributes=[],this.varyings=[],this.codes={},this.vars={},this.flow={code:""},this.chaining=[],this.stack=cf(),this.stacks=[],this.tab="\t",this.currentFunctionNode=null,this.context={material:this.material},this.cache=new $T,this.globalCache=this.cache,this.flowsData=new WeakMap,this.shaderStage=null,this.buildStage=null,this.useComparisonMethod=!1}getBindGroupsCache(){let e=l_.get(this.renderer);return void 0===e&&(e=new Nm,l_.set(this.renderer,e)),e}createRenderTarget(e,t,r){return new oe(e,t,r)}createCubeRenderTarget(e,t){return new kh(e,t)}includes(e){return this.nodes.includes(e)}getOutputStructName(){}_getBindGroup(e,t){const r=this.getBindGroupsCache(),s=[];let i,n=!0;for(const e of t)s.push(e),n=n&&!0!==e.groupNode.shared;return n?(i=r.get(s),void 0===i&&(i=new DT(e,s,this.bindingsIndexes[e].group,s),r.set(s,i))):i=new DT(e,s,this.bindingsIndexes[e].group,s),i}getBindGroupArray(e,t){const r=this.bindings[t];let s=r[e];return void 0===s&&(void 0===this.bindingsIndexes[e]&&(this.bindingsIndexes[e]={binding:0,group:Object.keys(this.bindingsIndexes).length}),r[e]=s=[]),s}getBindings(){let e=this.bindGroups;if(null===e){const t={},r=this.bindings;for(const e of Gs)for(const s in r[e]){const i=r[e][s];(t[s]||(t[s]=[])).push(...i)}e=[];for(const r in t){const s=t[r],i=this._getBindGroup(r,s);e.push(i)}this.bindGroups=e}return e}sortBindingGroups(){const e=this.getBindings();e.sort(((e,t)=>e.bindings[0].groupNode.order-t.bindings[0].groupNode.order));for(let t=0;t<e.length;t++){const r=e[t];this.bindingsIndexes[r.name].group=t,r.index=t}}setHashNode(e,t){this.hashNodes[t]=e}addNode(e){!1===this.nodes.includes(e)&&(this.nodes.push(e),this.setHashNode(e,e.getHash(this)))}addSequentialNode(e){!1===this.sequentialNodes.includes(e)&&this.sequentialNodes.push(e)}buildUpdateNodes(){for(const e of this.nodes){e.getUpdateType()!==Ls.NONE&&this.updateNodes.push(e.getSelf())}for(const e of this.sequentialNodes){const t=e.getUpdateBeforeType(),r=e.getUpdateAfterType();t!==Ls.NONE&&this.updateBeforeNodes.push(e.getSelf()),r!==Ls.NONE&&this.updateAfterNodes.push(e.getSelf())}}get currentNode(){return this.chaining[this.chaining.length-1]}isFilteredTexture(e){return e.magFilter===q||e.magFilter===Ge||e.magFilter===ke||e.magFilter===I||e.minFilter===q||e.minFilter===Ge||e.minFilter===ke||e.minFilter===I}addChain(e){this.chaining.push(e)}removeChain(e){if(this.chaining.pop()!==e)throw new Error("NodeBuilder: Invalid node chaining!")}getMethod(e){return e}getNodeFromHash(e){return this.hashNodes[e]}addFlow(e,t){return this.flowNodes[e].push(t),t}setContext(e){this.context=e}getContext(){return this.context}getSharedContext(){return this.context,this.context}setCache(e){this.cache=e}getCache(){return this.cache}getCacheFromNode(e,t=!0){const r=this.getDataFromNode(e);return void 0===r.cache&&(r.cache=new $T(t?this.getCache():null)),r.cache}isAvailable(){return!1}getVertexIndex(){console.warn("Abstract function.")}getInstanceIndex(){console.warn("Abstract function.")}getDrawIndex(){console.warn("Abstract function.")}getFrontFacing(){console.warn("Abstract function.")}getFragCoord(){console.warn("Abstract function.")}isFlipY(){return!1}increaseUsage(e){const t=this.getDataFromNode(e);return t.usageCount=void 0===t.usageCount?1:t.usageCount+1,t.usageCount}generateTexture(){console.warn("Abstract function.")}generateTextureLod(){console.warn("Abstract function.")}generateArrayDeclaration(e,t){return this.getType(e)+"[ "+t+" ]"}generateArray(e,t,r=null){let s=this.generateArrayDeclaration(e,t)+"( ";for(let i=0;i<t;i++){const n=r?r[i]:null;s+=null!==n?n.build(this,e):this.generateConst(e),i<t-1&&(s+=", ")}return s+=" )",s}generateStruct(e,t,r=null){const s=[];for(const e of t){const{name:t,type:i}=e;r&&r[t]&&r[t].isNode?s.push(r[t].build(this,i)):s.push(this.generateConst(i))}return e+"( "+s.join(", ")+" )"}generateConst(i,n=null){if(null===n&&("float"===i||"int"===i||"uint"===i?n=0:"bool"===i?n=!1:"color"===i?n=new e:"vec2"===i?n=new t:"vec3"===i?n=new r:"vec4"===i&&(n=new s)),"float"===i)return c_(n);if("int"===i)return`${Math.round(n)}`;if("uint"===i)return n>=0?`${Math.round(n)}u`:"0u";if("bool"===i)return n?"true":"false";if("color"===i)return`${this.getType("vec3")}( ${c_(n.r)}, ${c_(n.g)}, ${c_(n.b)} )`;const o=this.getTypeLength(i),a=this.getComponentType(i),u=e=>this.generateConst(a,e);if(2===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)} )`;if(3===o)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)} )`;if(4===o&&"mat2"!==i)return`${this.getType(i)}( ${u(n.x)}, ${u(n.y)}, ${u(n.z)}, ${u(n.w)} )`;if(o>=4&&n&&(n.isMatrix2||n.isMatrix3||n.isMatrix4))return`${this.getType(i)}( ${n.elements.map(u).join(", ")} )`;if(o>4)return`${this.getType(i)}()`;throw new Error(`NodeBuilder: Type '${i}' not found in generate constant attempt.`)}getType(e){return"color"===e?"vec3":e}hasGeometryAttribute(e){return this.geometry&&void 0!==this.geometry.getAttribute(e)}getAttribute(e,t){const r=this.attributes;for(const t of r)if(t.name===e)return t;const s=new UT(e,t);return r.push(s),s}getPropertyName(e){return e.name}isVector(e){return/vec\d/.test(e)}isMatrix(e){return/mat\d/.test(e)}isReference(e){return"void"===e||"property"===e||"sampler"===e||"samplerComparison"===e||"texture"===e||"cubeTexture"===e||"storageTexture"===e||"depthTexture"===e||"texture3D"===e}needsToWorkingColorSpace(){return!1}getComponentTypeFromTexture(e){const t=e.type;if(e.isDataTexture){if(t===T)return"int";if(t===b)return"uint"}return"float"}getElementType(e){return"mat2"===e?"vec2":"mat3"===e?"vec3":"mat4"===e?"vec4":this.getComponentType(e)}getComponentType(e){if("float"===(e=this.getVectorType(e))||"bool"===e||"int"===e||"uint"===e)return e;const t=/(b|i|u|)(vec|mat)([2-4])/.exec(e);return null===t?null:"b"===t[1]?"bool":"i"===t[1]?"int":"u"===t[1]?"uint":"float"}getVectorType(e){return"color"===e?"vec3":"texture"===e||"cubeTexture"===e||"storageTexture"===e||"texture3D"===e?"vec4":e}getTypeFromLength(e,t="float"){if(1===e)return t;let r=Es(e);const s="float"===t?"":t[0];return!0===/mat2/.test(t)&&(r=r.replace("vec","mat")),s+r}getTypeFromArray(e){return d_.get(e.constructor)}getTypeFromAttribute(e){let t=e;e.isInterleavedBufferAttribute&&(t=e.data);const r=t.array,s=e.itemSize,i=e.normalized;let n;return e instanceof ze||!0===i||(n=this.getTypeFromArray(r)),this.getTypeFromLength(s,n)}getTypeLength(e){const t=this.getVectorType(e),r=/vec([2-4])/.exec(t);return null!==r?Number(r[1]):"float"===t||"bool"===t||"int"===t||"uint"===t?1:!0===/mat2/.test(e)?4:!0===/mat3/.test(e)?9:!0===/mat4/.test(e)?16:0}getVectorFromMatrix(e){return e.replace("mat","vec")}changeComponentType(e,t){return this.getTypeFromLength(this.getTypeLength(e),t)}getIntegerType(e){const t=this.getComponentType(e);return"int"===t||"uint"===t?e:this.changeComponentType(e,"int")}addStack(){return this.stack=cf(this.stack),this.stacks.push(Ui()||this.stack),Vi(this.stack),this.stack}removeStack(){const e=this.stack;return this.stack=e.parent,Vi(this.stacks.pop()),e}getDataFromNode(e,t=this.shaderStage,r=null){let s=(r=null===r?e.isGlobal(this)?this.globalCache:this.cache:r).getData(e);return void 0===s&&(s={},r.setData(e,s)),void 0===s[t]&&(s[t]={}),s[t]}getNodeProperties(e,t="any"){const r=this.getDataFromNode(e,t);return r.properties||(r.properties={outputNode:null})}getBufferAttributeFromNode(e,t){const r=this.getDataFromNode(e);let s=r.bufferAttribute;if(void 0===s){const i=this.uniforms.index++;s=new UT("nodeAttribute"+i,t,e),this.bufferAttributes.push(s),r.bufferAttribute=s}return s}getStructTypeFromNode(e,t,r=null,s=this.shaderStage){const i=this.getDataFromNode(e,s,this.globalCache);let n=i.structType;if(void 0===n){const e=this.structs.index++;null===r&&(r="StructType"+e),n=new HT(r,t),this.structs[s].push(n),i.structType=n}return n}getOutputStructTypeFromNode(e,t){const r=this.getStructTypeFromNode(e,t,"OutputType","fragment");return r.output=!0,r}getUniformFromNode(e,t,r=this.shaderStage,s=null){const i=this.getDataFromNode(e,r,this.globalCache);let n=i.uniform;if(void 0===n){const o=this.uniforms.index++;n=new OT(s||"nodeUniform"+o,t,e),this.uniforms[r].push(n),i.uniform=n}return n}getArrayCount(e){let t=null;return e.isArrayNode?t=e.count:e.isVarNode&&e.node.isArrayNode&&(t=e.node.count),t}getVarFromNode(e,t=null,r=e.getNodeType(this),s=this.shaderStage,i=!1){const n=this.getDataFromNode(e,s);let o=n.variable;if(void 0===o){const a=i?"_const":"_var",u=this.vars[s]||(this.vars[s]=[]),l=this.vars[a]||(this.vars[a]=0);null===t&&(t=(i?"nodeConst":"nodeVar")+l,this.vars[a]++);const d=this.getArrayCount(e);o=new GT(t,r,i,d),i||u.push(o),n.variable=o}return o}isDeterministic(e){if(e.isMathNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode))&&(!e.cNode||this.isDeterministic(e.cNode));if(e.isOperatorNode)return this.isDeterministic(e.aNode)&&(!e.bNode||this.isDeterministic(e.bNode));if(e.isArrayNode){if(null!==e.values)for(const t of e.values)if(!this.isDeterministic(t))return!1;return!0}return!!e.isConstNode}getVaryingFromNode(e,t=null,r=e.getNodeType(this)){const s=this.getDataFromNode(e,"any");let i=s.varying;if(void 0===i){const e=this.varyings,n=e.length;null===t&&(t="nodeVarying"+n),i=new kT(t,r),e.push(i),s.varying=i}return i}getCodeFromNode(e,t,r=this.shaderStage){const s=this.getDataFromNode(e);let i=s.code;if(void 0===i){const e=this.codes[r]||(this.codes[r]=[]),n=e.length;i=new zT("nodeCode"+n,t),e.push(i),s.code=i}return i}addFlowCodeHierarchy(e,t){const{flowCodes:r,flowCodeBlock:s}=this.getDataFromNode(e);let i=!0,n=t;for(;n;){if(!0===s.get(n)){i=!1;break}n=this.getDataFromNode(n).parentNodeBlock}if(i)for(const e of r)this.addLineFlowCode(e)}addLineFlowCodeBlock(e,t,r){const s=this.getDataFromNode(e),i=s.flowCodes||(s.flowCodes=[]),n=s.flowCodeBlock||(s.flowCodeBlock=new WeakMap);i.push(t),n.set(r,!0)}addLineFlowCode(e,t=null){return""===e||(null!==t&&this.context.nodeBlock&&this.addLineFlowCodeBlock(t,e,this.context.nodeBlock),e=this.tab+e,/;\s*$/.test(e)||(e+=";\n"),this.flow.code+=e),this}addFlowCode(e){return this.flow.code+=e,this}addFlowTab(){return this.tab+="\t",this}removeFlowTab(){return this.tab=this.tab.slice(0,-1),this}getFlowData(e){return this.flowsData.get(e)}flowNode(e){const t=e.getNodeType(this),r=this.flowChildNode(e,t);return this.flowsData.set(e,r),r}addInclude(e){null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(e)}buildFunctionNode(e){const t=new hx,r=this.currentFunctionNode;return this.currentFunctionNode=t,t.code=this.buildFunctionCode(e),this.currentFunctionNode=r,t}flowShaderNode(e){const t=e.layout,r={[Symbol.iterator](){let e=0;const t=Object.values(this);return{next:()=>({value:t[e],done:e++>=t.length})}}};for(const e of t.inputs)r[e.name]=new lf(e.type,e.name);e.layout=null;const s=e.call(r),i=this.flowStagesNode(s,t.type);return e.layout=t,i}flowStagesNode(e,t=null){const r=this.flow,s=this.vars,i=this.cache,n=this.buildStage,o=this.stack,a={code:""};this.flow=a,this.vars={},this.cache=new $T,this.stack=cf();for(const r of Os)this.setBuildStage(r),a.result=e.build(this,t);return a.vars=this.getVars(this.shaderStage),this.flow=r,this.vars=s,this.cache=i,this.stack=o,this.setBuildStage(n),a}getFunctionOperator(){return null}buildFunctionCode(){console.warn("Abstract function.")}flowChildNode(e,t=null){const r=this.flow,s={code:""};return this.flow=s,s.result=e.build(this,t),this.flow=r,s}flowNodeFromShaderStage(e,t,r=null,s=null){const i=this.shaderStage;this.setShaderStage(e);const n=this.flowChildNode(t,r);return null!==s&&(n.code+=`${this.tab+s} = ${n.result};\n`),this.flowCode[e]=this.flowCode[e]+n.code,this.setShaderStage(i),n}getAttributesArray(){return this.attributes.concat(this.bufferAttributes)}getAttributes(){console.warn("Abstract function.")}getVaryings(){console.warn("Abstract function.")}getVar(e,t,r=null){return`${null!==r?this.generateArrayDeclaration(e,r):this.getType(e)} ${t}`}getVars(e){let t="";const r=this.vars[e];if(void 0!==r)for(const e of r)t+=`${this.getVar(e.type,e.name)}; `;return t}getUniforms(){console.warn("Abstract function.")}getCodes(e){const t=this.codes[e];let r="";if(void 0!==t)for(const e of t)r+=e.code+"\n";return r}getHash(){return this.vertexShader+this.fragmentShader+this.computeShader}setShaderStage(e){this.shaderStage=e}getShaderStage(){return this.shaderStage}setBuildStage(e){this.buildStage=e}getBuildStage(){return this.buildStage}buildCode(){console.warn("Abstract function.")}build(){const{object:e,material:t,renderer:r}=this;if(null!==t){let e=r.library.fromMaterial(t);null===e&&(console.error(`NodeMaterial: Material "${t.type}" is not compatible.`),e=new wh),e.build(this)}else this.addFlow("compute",e);for(const e of Os){this.setBuildStage(e),this.context.vertex&&this.context.vertex.isNode&&this.flowNodeFromShaderStage("vertex",this.context.vertex);for(const t of Gs){this.setShaderStage(t);const r=this.flowNodes[t];for(const t of r)"generate"===e?this.flowNode(t):t.build(this)}}return this.setBuildStage(null),this.setShaderStage(null),this.buildCode(),this.buildUpdateNodes(),this}getNodeUniform(e,t){if("float"===t||"int"===t||"uint"===t)return new t_(e);if("vec2"===t||"ivec2"===t||"uvec2"===t)return new r_(e);if("vec3"===t||"ivec3"===t||"uvec3"===t)return new s_(e);if("vec4"===t||"ivec4"===t||"uvec4"===t)return new i_(e);if("color"===t)return new n_(e);if("mat2"===t)return new o_(e);if("mat3"===t)return new a_(e);if("mat4"===t)return new u_(e);throw new Error(`Uniform "${t}" not declared.`)}format(e,t,r){if((t=this.getVectorType(t))===(r=this.getVectorType(r))||null===r||this.isReference(r))return e;const s=this.getTypeLength(t),i=this.getTypeLength(r);return 16===s&&9===i?`${this.getType(r)}(${e}[0].xyz, ${e}[1].xyz, ${e}[2].xyz)`:9===s&&4===i?`${this.getType(r)}(${e}[0].xy, ${e}[1].xy)`:s>4||i>4||0===i?e:s===i?`${this.getType(r)}( ${e} )`:s>i?this.format(`${e}.${"xyz".slice(0,i)}`,this.getTypeFromLength(i,this.getComponentType(t)),r):4===i&&s>1?`${this.getType(r)}( ${this.format(e,t,"vec3")}, 1.0 )`:2===s?`${this.getType(r)}( ${this.format(e,t,"vec2")}, 0.0 )`:(1===s&&i>1&&t!==this.getComponentType(r)&&(e=`${this.getType(this.getComponentType(r))}( ${e} )`),`${this.getType(r)}( ${e} )`)}getSignature(){return`// Three.js r${We} - Node System\n`}createNodeMaterial(e="NodeMaterial"){throw new Error(`THREE.NodeBuilder: createNodeMaterial() was deprecated. Use new ${e}() instead.`)}}class p_{constructor(){this.time=0,this.deltaTime=0,this.frameId=0,this.renderId=0,this.updateMap=new WeakMap,this.updateBeforeMap=new WeakMap,this.updateAfterMap=new WeakMap,this.renderer=null,this.material=null,this.camera=null,this.object=null,this.scene=null}_getMaps(e,t){let r=e.get(t);return void 0===r&&(r={renderMap:new WeakMap,frameMap:new WeakMap},e.set(t,r)),r}updateBeforeNode(e){const t=e.getUpdateBeforeType(),r=e.updateReference(this);if(t===Ls.FRAME){const{frameMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.frameId&&!1!==e.updateBefore(this)&&t.set(r,this.frameId)}else if(t===Ls.RENDER){const{renderMap:t}=this._getMaps(this.updateBeforeMap,r);t.get(r)!==this.renderId&&!1!==e.updateBefore(this)&&t.set(r,this.renderId)}else t===Ls.OBJECT&&e.updateBefore(this)}updateAfterNode(e){const t=e.getUpdateAfterType(),r=e.updateReference(this);if(t===Ls.FRAME){const{frameMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.frameId&&!1!==e.updateAfter(this)&&t.set(r,this.frameId)}else if(t===Ls.RENDER){const{renderMap:t}=this._getMaps(this.updateAfterMap,r);t.get(r)!==this.renderId&&!1!==e.updateAfter(this)&&t.set(r,this.renderId)}else t===Ls.OBJECT&&e.updateAfter(this)}updateNode(e){const t=e.getUpdateType(),r=e.updateReference(this);if(t===Ls.FRAME){const{frameMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.frameId&&!1!==e.update(this)&&t.set(r,this.frameId)}else if(t===Ls.RENDER){const{renderMap:t}=this._getMaps(this.updateMap,r);t.get(r)!==this.renderId&&!1!==e.update(this)&&t.set(r,this.renderId)}else t===Ls.OBJECT&&e.update(this)}update(){this.frameId++,void 0===this.lastTime&&(this.lastTime=performance.now()),this.deltaTime=(performance.now()-this.lastTime)/1e3,this.lastTime=performance.now(),this.time+=this.deltaTime}}class g_{constructor(e,t,r=null,s="",i=!1){this.type=e,this.name=t,this.count=r,this.qualifier=s,this.isConst=i}}g_.isNodeFunctionInput=!0;class m_ extends Ib{static get type(){return"DirectionalLightNode"}constructor(e=null){super(e)}setupDirect(){const e=this.colorNode;return{lightDirection:Kx(this.light),lightColor:e}}}const f_=new o,y_=new o;let x_=null;class b_ extends Ib{static get type(){return"RectAreaLightNode"}constructor(e=null){super(e),this.halfHeight=bn(new r).setGroup(fn),this.halfWidth=bn(new r).setGroup(fn),this.updateType=Ls.RENDER}update(e){super.update(e);const{light:t}=this,r=e.camera.matrixWorldInverse;y_.identity(),f_.copy(t.matrixWorld),f_.premultiply(r),y_.extractRotation(f_),this.halfWidth.value.set(.5*t.width,0,0),this.halfHeight.value.set(0,.5*t.height,0),this.halfWidth.value.applyMatrix4(y_),this.halfHeight.value.applyMatrix4(y_)}setupDirectRectArea(e){let t,r;e.isAvailable("float32Filterable")?(t=ku(x_.LTC_FLOAT_1),r=ku(x_.LTC_FLOAT_2)):(t=ku(x_.LTC_HALF_1),r=ku(x_.LTC_HALF_2));const{colorNode:s,light:i}=this;return{lightColor:s,lightPosition:Xx(i),halfWidth:this.halfWidth,halfHeight:this.halfHeight,ltc_1:t,ltc_2:r}}static setLTC(e){x_=e}}class T_ extends Ib{static get type(){return"SpotLightNode"}constructor(e=null){super(e),this.coneCosNode=bn(0).setGroup(fn),this.penumbraCosNode=bn(0).setGroup(fn),this.cutoffDistanceNode=bn(0).setGroup(fn),this.decayExponentNode=bn(0).setGroup(fn)}update(e){super.update(e);const{light:t}=this;this.coneCosNode.value=Math.cos(t.angle),this.penumbraCosNode.value=Math.cos(t.angle*(1-t.penumbra)),this.cutoffDistanceNode.value=t.distance,this.decayExponentNode.value=t.decay}getSpotAttenuation(e){const{coneCosNode:t,penumbraCosNode:r}=this;return Ma(t,r,e)}setupDirect(e){const{colorNode:t,cutoffDistanceNode:r,decayExponentNode:s,light:i}=this,n=this.getLightVector(e),o=n.normalize(),a=o.dot(Kx(i)),u=this.getSpotAttenuation(a),l=n.length(),d=Lb({lightDistance:l,cutoffDistance:r,decayExponent:s});let c=t.mul(u).mul(d);if(i.map){const t=Hx(i,e.context.positionWorld),r=ku(i.map,t.xy).onRenderUpdate((()=>i.map));c=t.mul(2).sub(1).abs().lessThan(1).all().select(c.mul(r),c)}return{lightColor:c,lightDirection:o}}}class __ extends T_{static get type(){return"IESSpotLightNode"}getSpotAttenuation(e){const t=this.light.iesMap;let r=null;if(t&&!0===t.isTexture){const s=e.acos().mul(1/Math.PI);r=ku(t,ji(s,0),0).r}else r=super.getSpotAttenuation(e);return r}}class v_ extends Ib{static get type(){return"AmbientLightNode"}constructor(e=null){super(e)}setup({context:e}){e.irradiance.addAssign(this.colorNode)}}class N_ extends Ib{static get type(){return"HemisphereLightNode"}constructor(t=null){super(t),this.lightPositionNode=jx(t),this.lightDirectionNode=this.lightPositionNode.normalize(),this.groundColorNode=bn(new e).setGroup(fn)}update(e){const{light:t}=this;super.update(e),this.lightPositionNode.object3d=t,this.groundColorNode.value.copy(t.groundColor).multiplyScalar(t.intensity)}setup(e){const{colorNode:t,groundColorNode:r,lightDirectionNode:s}=this,i=Vl.dot(s).mul(.5).add(.5),n=wa(r,t,i);e.context.irradiance.addAssign(n)}}class S_ extends Ib{static get type(){return"LightProbeNode"}constructor(e=null){super(e);const t=[];for(let e=0;e<9;e++)t.push(new r);this.lightProbe=qu(t)}update(e){const{light:t}=this;super.update(e);for(let e=0;e<9;e++)this.lightProbe.array[e].copy(t.sh.coefficients[e]).multiplyScalar(t.intensity)}setup(e){const t=FT(Ul,this.lightProbe);e.context.irradiance.addAssign(t)}}class E_{parseFunction(){console.warn("Abstract function.")}}class w_{constructor(e,t,r="",s=""){this.type=e,this.inputs=t,this.name=r,this.precision=s}getCode(){console.warn("Abstract function.")}}w_.isNodeFunction=!0;const A_=/^\s*(highp|mediump|lowp)?\s*([a-z_0-9]+)\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)/i,R_=/[a-z_0-9]+/gi,C_="#pragma main";class M_ extends w_{constructor(e){const{type:t,inputs:r,name:s,precision:i,inputsCode:n,blockCode:o,headerCode:a}=(e=>{const t=(e=e.trim()).indexOf(C_),r=-1!==t?e.slice(t+12):e,s=r.match(A_);if(null!==s&&5===s.length){const i=s[4],n=[];let o=null;for(;null!==(o=R_.exec(i));)n.push(o);const a=[];let u=0;for(;u<n.length;){const e="const"===n[u][0];!0===e&&u++;let t=n[u][0];"in"===t||"out"===t||"inout"===t?u++:t="";const r=n[u++][0];let s=Number.parseInt(n[u][0]);!1===Number.isNaN(s)?u++:s=null;const i=n[u++][0];a.push(new g_(r,i,s,t,e))}const l=r.substring(s[0].length),d=void 0!==s[3]?s[3]:"";return{type:s[2],inputs:a,name:d,precision:void 0!==s[1]?s[1]:"",inputsCode:i,blockCode:l,headerCode:-1!==t?e.slice(0,t):""}}throw new Error("FunctionNode: Function is not a GLSL code.")})(e);super(t,r,s,i),this.inputsCode=n,this.blockCode=o,this.headerCode=a}getCode(e=this.name){let t;const r=this.blockCode;if(""!==r){const{type:s,inputsCode:i,headerCode:n,precision:o}=this;let a=`${s} ${e} ( ${i.trim()} )`;""!==o&&(a=`${o} ${a}`),t=n+a+r}else t="";return t}}class F_ extends E_{parseFunction(e){return new M_(e)}}const B_=new WeakMap,P_=[],I_=[];class L_ extends Rm{constructor(e,t){super(),this.renderer=e,this.backend=t,this.nodeFrame=new p_,this.nodeBuilderCache=new Map,this.callHashCache=new Nm,this.groupsData=new Nm,this.cacheLib={}}updateGroup(e){const t=e.groupNode,r=t.name;if(r===yn.name)return!0;if(r===fn.name){const t=this.get(e),r=this.nodeFrame.renderId;return t.renderId!==r&&(t.renderId=r,!0)}if(r===mn.name){const t=this.get(e),r=this.nodeFrame.frameId;return t.frameId!==r&&(t.frameId=r,!0)}P_[0]=t,P_[1]=e;let s=this.groupsData.get(P_);return void 0===s&&this.groupsData.set(P_,s={}),P_.length=0,s.version!==t.version&&(s.version=t.version,!0)}getForRenderCacheKey(e){return e.initialCacheKey}getForRender(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const{nodeBuilderCache:s}=this,i=this.getForRenderCacheKey(e);if(r=s.get(i),void 0===r){const t=this.backend.createNodeBuilder(e.object,this.renderer);t.scene=e.scene,t.material=e.material,t.camera=e.camera,t.context.material=e.material,t.lightsNode=e.lightsNode,t.environmentNode=this.getEnvironmentNode(e.scene),t.fogNode=this.getFogNode(e.scene),t.clippingContext=e.clippingContext,t.build(),r=this._createNodeBuilderState(t),s.set(i,r)}r.usedTimes++,t.nodeBuilderState=r}return r}delete(e){if(e.isRenderObject){const t=this.get(e).nodeBuilderState;t.usedTimes--,0===t.usedTimes&&this.nodeBuilderCache.delete(this.getForRenderCacheKey(e))}return super.delete(e)}getForCompute(e){const t=this.get(e);let r=t.nodeBuilderState;if(void 0===r){const s=this.backend.createNodeBuilder(e,this.renderer);s.build(),r=this._createNodeBuilderState(s),t.nodeBuilderState=r}return r}_createNodeBuilderState(e){return new VT(e.vertexShader,e.fragmentShader,e.computeShader,e.getAttributesArray(),e.getBindings(),e.updateNodes,e.updateBeforeNodes,e.updateAfterNodes,e.observer,e.transforms)}getEnvironmentNode(e){this.updateEnvironment(e);let t=null;if(e.environmentNode&&e.environmentNode.isNode)t=e.environmentNode;else{const r=this.get(e);r.environmentNode&&(t=r.environmentNode)}return t}getBackgroundNode(e){this.updateBackground(e);let t=null;if(e.backgroundNode&&e.backgroundNode.isNode)t=e.backgroundNode;else{const r=this.get(e);r.backgroundNode&&(t=r.backgroundNode)}return t}getFogNode(e){return this.updateFog(e),e.fogNode||this.get(e).fogNode||null}getCacheKey(e,t){P_[0]=e,P_[1]=t;const r=this.renderer.info.calls,s=this.callHashCache.get(P_)||{};if(s.callId!==r){const i=this.getEnvironmentNode(e),n=this.getFogNode(e);t&&I_.push(t.getCacheKey(!0)),i&&I_.push(i.getCacheKey()),n&&I_.push(n.getCacheKey()),I_.push(this.renderer.shadowMap.enabled?1:0),s.callId=r,s.cacheKey=bs(I_),this.callHashCache.set(P_,s),I_.length=0}return P_.length=0,s.cacheKey}get isToneMappingState(){return!this.renderer.getRenderTarget()}updateBackground(e){const t=this.get(e),r=e.background;if(r){const s=0===e.backgroundBlurriness&&t.backgroundBlurriness>0||e.backgroundBlurriness>0&&0===t.backgroundBlurriness;if(t.background!==r||s){const i=this.getCacheNode("background",r,(()=>{if(!0===r.isCubeTexture||r.mapping===Y||r.mapping===Q||r.mapping===ae){if(e.backgroundBlurriness>0||r.mapping===ae)return Wg(r);{let e;return e=!0===r.isCubeTexture?ed(r):ku(r),jh(e)}}if(!0===r.isTexture)return ku(r,Kc.flipY()).setUpdateMatrix(!0);!0!==r.isColor&&console.error("WebGPUNodes: Unsupported background configuration.",r)}),s);t.backgroundNode=i,t.background=r,t.backgroundBlurriness=e.backgroundBlurriness}}else t.backgroundNode&&(delete t.backgroundNode,delete t.background)}getCacheNode(e,t,r,s=!1){const i=this.cacheLib[e]||(this.cacheLib[e]=new WeakMap);let n=i.get(t);return(void 0===n||s)&&(n=r(),i.set(t,n)),n}updateFog(e){const t=this.get(e),r=e.fog;if(r){if(t.fog!==r){const e=this.getCacheNode("fog",r,(()=>{if(r.isFogExp2){const e=sd("color","color",r).setGroup(fn),t=sd("density","float",r).setGroup(fn);return Sx(e,Nx(t))}if(r.isFog){const e=sd("color","color",r).setGroup(fn),t=sd("near","float",r).setGroup(fn),s=sd("far","float",r).setGroup(fn);return Sx(e,vx(t,s))}console.error("THREE.Renderer: Unsupported fog configuration.",r)}));t.fogNode=e,t.fog=r}}else delete t.fogNode,delete t.fog}updateEnvironment(e){const t=this.get(e),r=e.environment;if(r){if(t.environment!==r){const e=this.getCacheNode("environment",r,(()=>!0===r.isCubeTexture?ed(r):!0===r.isTexture?ku(r):void console.error("Nodes: Unsupported environment configuration.",r)));t.environmentNode=e,t.environment=r}}else t.environmentNode&&(delete t.environmentNode,delete t.environment)}getNodeFrame(e=this.renderer,t=null,r=null,s=null,i=null){const n=this.nodeFrame;return n.renderer=e,n.scene=t,n.object=r,n.camera=s,n.material=i,n}getNodeFrameForRender(e){return this.getNodeFrame(e.renderer,e.scene,e.object,e.camera,e.material)}getOutputCacheKey(){const e=this.renderer;return e.toneMapping+","+e.currentColorSpace}hasOutputChange(e){return B_.get(e)!==this.getOutputCacheKey()}getOutputNode(e){const t=this.renderer,r=this.getOutputCacheKey(),s=ku(e,Kc).renderOutput(t.toneMapping,t.currentColorSpace);return B_.set(e,r),s}updateBefore(e){const t=e.getNodeBuilderState();for(const r of t.updateBeforeNodes)this.getNodeFrameForRender(e).updateBeforeNode(r)}updateAfter(e){const t=e.getNodeBuilderState();for(const r of t.updateAfterNodes)this.getNodeFrameForRender(e).updateAfterNode(r)}updateForCompute(e){const t=this.getNodeFrame(),r=this.getForCompute(e);for(const e of r.updateNodes)t.updateNode(e)}updateForRender(e){const t=this.getNodeFrameForRender(e),r=e.getNodeBuilderState();for(const e of r.updateNodes)t.updateNode(e)}needsRefresh(e){const t=this.getNodeFrameForRender(e);return e.getMonitor().needsRefresh(e,t)}dispose(){super.dispose(),this.nodeFrame=new p_,this.nodeBuilderCache=new Map,this.cacheLib={}}}const D_=new Me;class V_{constructor(e=null){this.version=0,this.clipIntersection=null,this.cacheKey="",this.shadowPass=!1,this.viewNormalMatrix=new n,this.clippingGroupContexts=new WeakMap,this.intersectionPlanes=[],this.unionPlanes=[],this.parentVersion=null,null!==e&&(this.viewNormalMatrix=e.viewNormalMatrix,this.clippingGroupContexts=e.clippingGroupContexts,this.shadowPass=e.shadowPass,this.viewMatrix=e.viewMatrix)}projectPlanes(e,t,r){const s=e.length;for(let i=0;i<s;i++){D_.copy(e[i]).applyMatrix4(this.viewMatrix,this.viewNormalMatrix);const s=t[r+i],n=D_.normal;s.x=-n.x,s.y=-n.y,s.z=-n.z,s.w=D_.constant}}updateGlobal(e,t){this.shadowPass=null!==e.overrideMaterial&&e.overrideMaterial.isShadowPassMaterial,this.viewMatrix=t.matrixWorldInverse,this.viewNormalMatrix.getNormalMatrix(this.viewMatrix)}update(e,t){let r=!1;e.version!==this.parentVersion&&(this.intersectionPlanes=Array.from(e.intersectionPlanes),this.unionPlanes=Array.from(e.unionPlanes),this.parentVersion=e.version),this.clipIntersection!==t.clipIntersection&&(this.clipIntersection=t.clipIntersection,this.clipIntersection?this.unionPlanes.length=e.unionPlanes.length:this.intersectionPlanes.length=e.intersectionPlanes.length);const i=t.clippingPlanes,n=i.length;let o,a;if(this.clipIntersection?(o=this.intersectionPlanes,a=e.intersectionPlanes.length):(o=this.unionPlanes,a=e.unionPlanes.length),o.length!==a+n){o.length=a+n;for(let e=0;e<n;e++)o[a+e]=new s;r=!0}this.projectPlanes(i,o,a),r&&(this.version++,this.cacheKey=`${this.intersectionPlanes.length}:${this.unionPlanes.length}`)}getGroupContext(e){if(this.shadowPass&&!e.clipShadows)return this;let t=this.clippingGroupContexts.get(e);return void 0===t&&(t=new V_(this),this.clippingGroupContexts.set(e,t)),t.update(this,e),t}get unionClippingCount(){return this.unionPlanes.length}}class U_{constructor(e,t){this.bundleGroup=e,this.camera=t}}const O_=[];class G_{constructor(){this.bundles=new Nm}get(e,t){const r=this.bundles;O_[0]=e,O_[1]=t;let s=r.get(O_);return void 0===s&&(s=new U_(e,t),r.set(O_,s)),O_.length=0,s}dispose(){this.bundles=new Nm}}class k_{constructor(){this.lightNodes=new WeakMap,this.materialNodes=new Map,this.toneMappingNodes=new Map}fromMaterial(e){if(e.isNodeMaterial)return e;let t=null;const r=this.getMaterialNodeClass(e.type);if(null!==r){t=new r;for(const r in e)t[r]=e[r]}return t}addToneMapping(e,t){this.addType(e,t,this.toneMappingNodes)}getToneMappingFunction(e){return this.toneMappingNodes.get(e)||null}getMaterialNodeClass(e){return this.materialNodes.get(e)||null}addMaterial(e,t){this.addType(e,t,this.materialNodes)}getLightNodeClass(e){return this.lightNodes.get(e)||null}addLight(e,t){this.addClass(e,t,this.lightNodes)}addType(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"==typeof t||"object"==typeof t)throw new Error(`Base class ${t} is not a class.`);r.set(t,e)}}addClass(e,t,r){if(r.has(t))console.warn(`Redefinition of node ${t.name}`);else{if("function"!=typeof e)throw new Error(`Node class ${e.name} is not a class.`);if("function"!=typeof t)throw new Error(`Base class ${t.name} is not a class.`);r.set(t,e)}}}const z_=new Zx,W_=[];class $_ extends Nm{constructor(){super()}createNode(e=[]){return(new Zx).setLights(e)}getNode(e,t){if(e.isQuadMesh)return z_;W_[0]=e,W_[1]=t;let r=this.get(W_);return void 0===r&&(r=this.createNode(),this.set(W_,r)),W_.length=0,r}}class H_ extends oe{constructor(e=1,t=1,r={}){super(e,t,r),this.isXRRenderTarget=!0,this.hasExternalTextures=!1,this.autoAllocateDepthBuffer=!0}copy(e){return super.copy(e),this.hasExternalTextures=e.hasExternalTextures,this.autoAllocateDepthBuffer=e.autoAllocateDepthBuffer,this}}const j_=new r,q_=new r;class X_ extends a{constructor(e){super(),this.enabled=!1,this.isPresenting=!1,this.cameraAutoUpdate=!0,this._renderer=e,this._cameraL=new ne,this._cameraL.viewport=new s,this._cameraR=new ne,this._cameraR.viewport=new s,this._cameras=[this._cameraL,this._cameraR],this._cameraXR=new $e,this._currentDepthNear=null,this._currentDepthFar=null,this._controllers=[],this._controllerInputSources=[],this._xrRenderTarget=null,this._layers=[],this._supportsLayers=!1,this._createXRLayer=J_.bind(this),this._gl=null,this._currentAnimationContext=null,this._currentAnimationLoop=null,this._currentPixelRatio=null,this._currentSize=new t,this._onSessionEvent=Y_.bind(this),this._onSessionEnd=Q_.bind(this),this._onInputSourcesChange=Z_.bind(this),this._onAnimationFrame=ev.bind(this),this._referenceSpace=null,this._referenceSpaceType="local-floor",this._customReferenceSpace=null,this._framebufferScaleFactor=1,this._foveation=1,this._session=null,this._glBaseLayer=null,this._glBinding=null,this._glProjLayer=null,this._xrFrame=null,this._useLayers="undefined"!=typeof XRWebGLBinding&&"createProjectionLayer"in XRWebGLBinding.prototype}getController(e){return this._getController(e).getTargetRaySpace()}getControllerGrip(e){return this._getController(e).getGripSpace()}getHand(e){return this._getController(e).getHandSpace()}getFoveation(){if(null!==this._glProjLayer||null!==this._glBaseLayer)return this._foveation}setFoveation(e){this._foveation=e,null!==this._glProjLayer&&(this._glProjLayer.fixedFoveation=e),null!==this._glBaseLayer&&void 0!==this._glBaseLayer.fixedFoveation&&(this._glBaseLayer.fixedFoveation=e)}getFramebufferScaleFactor(){return this._framebufferScaleFactor}setFramebufferScaleFactor(e){this._framebufferScaleFactor=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change framebuffer scale while presenting.")}getReferenceSpaceType(){return this._referenceSpaceType}setReferenceSpaceType(e){this._referenceSpaceType=e,!0===this.isPresenting&&console.warn("THREE.XRManager: Cannot change reference space type while presenting.")}getReferenceSpace(){return this._customReferenceSpace||this._referenceSpace}setReferenceSpace(e){this._customReferenceSpace=e}getCamera(){return this._cameraXR}getEnvironmentBlendMode(){if(null!==this._session)return this._session.environmentBlendMode}getFrame(){return this._xrFrame}createQuadLayer(e,t,r,s,i,n,o,a=[]){const u=new He(e,t),l=new H_(i,n,{format:ce,type:Ce,depthTexture:new L(i,n,a.stencil?Re:b,void 0,void 0,void 0,void 0,void 0,void 0,a.stencil?we:Ae),stencilBuffer:a.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),d=new te({color:16777215,side:je});d.map=l.texture,d.map.offset.y=1,d.map.repeat.y=-1;const c=new H(u,d);c.position.copy(r),c.quaternion.copy(s);const h={type:"quad",width:e,height:t,translation:r,quaternion:s,pixelwidth:i,pixelheight:n,plane:c,material:d,rendercall:o,renderTarget:l};if(this._layers.push(h),null!==this._session){h.plane.material=new te({color:16777215,side:je}),h.plane.material.blending=qe,h.plane.material.blendEquation=Xe,h.plane.material.blendSrc=Ke,h.plane.material.blendDst=Ke,h.xrlayer=this._createXRLayer(h);const e=this._session.renderState.layers;e.unshift(h.xrlayer),this._session.updateRenderState({layers:e})}else l.isXRRenderTarget=!1;return c}createCylinderLayer(e,t,r,s,i,n,o,a,u=[]){const l=new Ye(e,e,e*t/r,64,64,!0,Math.PI-t/2,t),d=new H_(n,o,{format:ce,type:Ce,depthTexture:new L(n,o,u.stencil?Re:b,void 0,void 0,void 0,void 0,void 0,void 0,u.stencil?we:Ae),stencilBuffer:u.stencil,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),c=new te({color:16777215,side:N});c.map=d.texture,c.map.offset.y=1,c.map.repeat.y=-1;const h=new H(l,c);h.position.copy(s),h.quaternion.copy(i);const p={type:"cylinder",radius:e,centralAngle:t,aspectratio:r,translation:s,quaternion:i,pixelwidth:n,pixelheight:o,plane:h,material:c,rendercall:a,renderTarget:d};if(this._layers.push(p),null!==this._session){p.plane.material=new te({color:16777215,side:N}),p.plane.material.blending=qe,p.plane.material.blendEquation=Xe,p.plane.material.blendSrc=Ke,p.plane.material.blendDst=Ke,p.xrlayer=this._createXRLayer(p);const e=this._session.renderState.layers;e.unshift(p.xrlayer),this._session.updateRenderState({layers:e})}else d.isXRRenderTarget=!1;return h}renderLayers(){const e=new r,t=new Qe,s=this.isPresenting;this.isPresenting=!1;for(const r of this._layers){if(r.renderTarget.isXRRenderTarget=null!==this._session,r.renderTarget.hasExternalTextures=r.renderTarget.isXRRenderTarget,r.renderTarget.autoAllocateDepthBuffer=!r.renderTarget.isXRRenderTarget,r.renderTarget.isXRRenderTarget&&this._supportsLayers){r.xrlayer.transform=new XRRigidTransform(r.plane.getWorldPosition(e),r.plane.getWorldQuaternion(t));const s=this._glBinding.getSubImage(r.xrlayer,this._xrFrame);this._renderer.backend.setXRRenderTargetTextures(r.renderTarget,s.colorTexture,s.depthStencilTexture)}this._renderer.setRenderTarget(r.renderTarget),r.rendercall()}this.isPresenting=s,this._renderer.setRenderTarget(null)}getSession(){return this._session}async setSession(e){const t=this._renderer,r=t.backend;this._gl=t.getContext();const s=this._gl,i=s.getContextAttributes();if(this._session=e,null!==e){if(!0===r.isWebGPUBackend)throw new Error('THREE.XRManager: XR is currently not supported with a WebGPU backend. Use WebGL by passing "{ forceWebGL: true }" to the constructor of the renderer.');if(e.addEventListener("select",this._onSessionEvent),e.addEventListener("selectstart",this._onSessionEvent),e.addEventListener("selectend",this._onSessionEvent),e.addEventListener("squeeze",this._onSessionEvent),e.addEventListener("squeezestart",this._onSessionEvent),e.addEventListener("squeezeend",this._onSessionEvent),e.addEventListener("end",this._onSessionEnd),e.addEventListener("inputsourceschange",this._onInputSourcesChange),await r.makeXRCompatible(),this._currentPixelRatio=t.getPixelRatio(),t.getSize(this._currentSize),this._currentAnimationContext=t._animation.getContext(),this._currentAnimationLoop=t._animation.getAnimationLoop(),t._animation.stop(),!0===this._useLayers){let r=null,n=null,o=null;t.depth&&(o=t.stencil?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24,r=t.stencil?we:Ae,n=t.stencil?Re:b);const a={colorFormat:s.RGBA8,depthFormat:o,scaleFactor:this._framebufferScaleFactor},u=new XRWebGLBinding(e,s),l=u.createProjectionLayer(a),d=[l];if(this._glBinding=u,this._glProjLayer=l,t.setPixelRatio(1),t.setSize(l.textureWidth,l.textureHeight,!1),this._xrRenderTarget=new H_(l.textureWidth,l.textureHeight,{format:ce,type:Ce,colorSpace:t.outputColorSpace,depthTexture:new L(l.textureWidth,l.textureHeight,n,void 0,void 0,void 0,void 0,void 0,void 0,r),stencilBuffer:t.stencil,samples:i.antialias?4:0,resolveDepthBuffer:!1===l.ignoreDepthValues,resolveStencilBuffer:!1===l.ignoreDepthValues}),this._xrRenderTarget.hasExternalTextures=!0,this._referenceSpace=await e.requestReferenceSpace(this.getReferenceSpaceType()),this._supportsLayers=e.enabledFeatures.includes("layers"),this._supportsLayers)for(const e of this._layers)e.plane.material=new te({color:16777215,side:"cylinder"===e.type?N:je}),e.plane.material.blending=qe,e.plane.material.blendEquation=Xe,e.plane.material.blendSrc=Ke,e.plane.material.blendDst=Ke,e.xrlayer=this._createXRLayer(e),d.unshift(e.xrlayer);e.updateRenderState({layers:d})}else{const r={antialias:t.samples>0,alpha:!0,depth:t.depth,stencil:t.stencil,framebufferScaleFactor:this.getFramebufferScaleFactor()},i=new XRWebGLLayer(e,s,r);this._glBaseLayer=i,e.updateRenderState({baseLayer:i}),t.setPixelRatio(1),t.setSize(i.framebufferWidth,i.framebufferHeight,!1),this._xrRenderTarget=new H_(i.framebufferWidth,i.framebufferHeight,{format:ce,type:Ce,colorSpace:t.outputColorSpace,stencilBuffer:t.stencil,resolveDepthBuffer:!1===i.ignoreDepthValues,resolveStencilBuffer:!1===i.ignoreDepthValues})}this.setFoveation(this.getFoveation()),t._animation.setAnimationLoop(this._onAnimationFrame),t._animation.setContext(e),t._animation.start(),this.isPresenting=!0,this.dispatchEvent({type:"sessionstart"})}}updateCamera(e){const t=this._session;if(null===t)return;const r=e.near,s=e.far,i=this._cameraXR,n=this._cameraL,o=this._cameraR;i.near=o.near=n.near=r,i.far=o.far=n.far=s,this._currentDepthNear===i.near&&this._currentDepthFar===i.far||(t.updateRenderState({depthNear:i.near,depthFar:i.far}),this._currentDepthNear=i.near,this._currentDepthFar=i.far),n.layers.mask=2|e.layers.mask,o.layers.mask=4|e.layers.mask,i.layers.mask=n.layers.mask|o.layers.mask;const a=e.parent,u=i.cameras;K_(i,a);for(let e=0;e<u.length;e++)K_(u[e],a);2===u.length?function(e,t,r){j_.setFromMatrixPosition(t.matrixWorld),q_.setFromMatrixPosition(r.matrixWorld);const s=j_.distanceTo(q_),i=t.projectionMatrix.elements,n=r.projectionMatrix.elements,o=i[14]/(i[10]-1),a=i[14]/(i[10]+1),u=(i[9]+1)/i[5],l=(i[9]-1)/i[5],d=(i[8]-1)/i[0],c=(n[8]+1)/n[0],h=o*d,p=o*c,g=s/(-d+c),m=g*-d;if(t.matrixWorld.decompose(e.position,e.quaternion,e.scale),e.translateX(m),e.translateZ(g),e.matrixWorld.compose(e.position,e.quaternion,e.scale),e.matrixWorldInverse.copy(e.matrixWorld).invert(),-1===i[10])e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse);else{const t=o+g,r=a+g,i=h-m,n=p+(s-m),d=u*a/r*t,c=l*a/r*t;e.projectionMatrix.makePerspective(i,n,d,c,t,r),e.projectionMatrixInverse.copy(e.projectionMatrix).invert()}}(i,n,o):i.projectionMatrix.copy(n.projectionMatrix),function(e,t,r){null===r?e.matrix.copy(t.matrixWorld):(e.matrix.copy(r.matrixWorld),e.matrix.invert(),e.matrix.multiply(t.matrixWorld));e.matrix.decompose(e.position,e.quaternion,e.scale),e.updateMatrixWorld(!0),e.projectionMatrix.copy(t.projectionMatrix),e.projectionMatrixInverse.copy(t.projectionMatrixInverse),e.isPerspectiveCamera&&(e.fov=2*Je*Math.atan(1/e.projectionMatrix.elements[5]),e.zoom=1)}(e,i,a)}_getController(e){let t=this._controllers[e];return void 0===t&&(t=new Ze,this._controllers[e]=t),t}}function K_(e,t){null===t?e.matrixWorld.copy(e.matrix):e.matrixWorld.multiplyMatrices(t.matrixWorld,e.matrix),e.matrixWorldInverse.copy(e.matrixWorld).invert()}function Y_(e){const t=this._controllerInputSources.indexOf(e.inputSource);if(-1===t)return;const r=this._controllers[t];if(void 0!==r){const t=this.getReferenceSpace();r.update(e.inputSource,e.frame,t),r.dispatchEvent({type:e.type,data:e.inputSource})}}function Q_(){const e=this._session,t=this._renderer;e.removeEventListener("select",this._onSessionEvent),e.removeEventListener("selectstart",this._onSessionEvent),e.removeEventListener("selectend",this._onSessionEvent),e.removeEventListener("squeeze",this._onSessionEvent),e.removeEventListener("squeezestart",this._onSessionEvent),e.removeEventListener("squeezeend",this._onSessionEvent),e.removeEventListener("end",this._onSessionEnd),e.removeEventListener("inputsourceschange",this._onInputSourcesChange);for(let e=0;e<this._controllers.length;e++){const t=this._controllerInputSources[e];null!==t&&(this._controllerInputSources[e]=null,this._controllers[e].disconnect(t))}if(this._currentDepthNear=null,this._currentDepthFar=null,t.backend.setXRTarget(null),t.setOutputRenderTarget(null),t.setRenderTarget(null),this._session=null,this._xrRenderTarget=null,!0===this._supportsLayers)for(const e of this._layers)e.renderTarget=new H_(e.pixelwidth,e.pixelheight,{format:ce,type:Ce,depthTexture:new L(e.pixelwidth,e.pixelheight,e.stencilBuffer?Re:b,void 0,void 0,void 0,void 0,void 0,void 0,e.stencilBuffer?we:Ae),stencilBuffer:e.stencilBuffer,resolveDepthBuffer:!1,resolveStencilBuffer:!1}),e.renderTarget.isXRRenderTarget=!1,e.plane.material=e.material,e.material.map=e.renderTarget.texture,delete e.xrlayer;this.isPresenting=!1,t._animation.stop(),t._animation.setAnimationLoop(this._currentAnimationLoop),t._animation.setContext(this._currentAnimationContext),t._animation.start(),t.setPixelRatio(this._currentPixelRatio),t.setSize(this._currentSize.width,this._currentSize.height,!1),this.dispatchEvent({type:"sessionend"})}function Z_(e){const t=this._controllers,r=this._controllerInputSources;for(let s=0;s<e.removed.length;s++){const i=e.removed[s],n=r.indexOf(i);n>=0&&(r[n]=null,t[n].disconnect(i))}for(let s=0;s<e.added.length;s++){const i=e.added[s];let n=r.indexOf(i);if(-1===n){for(let e=0;e<t.length;e++){if(e>=r.length){r.push(i),n=e;break}if(null===r[e]){r[e]=i,n=e;break}}if(-1===n)break}const o=t[n];o&&o.connect(i)}}function J_(e){return"quad"===e.type?this._glBinding.createQuadLayer({transform:new XRRigidTransform(e.translation,e.quaternion),depthFormat:this._gl.DEPTH_COMPONENT,width:e.width/2,height:e.height/2,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight}):this._glBinding.createCylinderLayer({transform:new XRRigidTransform(e.translation,e.quaternion),depthFormat:this._gl.DEPTH_COMPONENT,radius:e.radius,centralAngle:e.centralAngle,aspectRatio:e.aspectRatio,space:this._referenceSpace,viewPixelWidth:e.pixelwidth,viewPixelHeight:e.pixelheight})}function ev(e,t){if(void 0===t)return;const r=this._cameraXR,i=this._renderer,n=i.backend,o=this._glBaseLayer,a=this.getReferenceSpace(),u=t.getViewerPose(a);if(this._xrFrame=t,null!==u){const e=u.views;null!==this._glBaseLayer&&n.setXRTarget(o.framebuffer);let t=!1;e.length!==r.cameras.length&&(r.cameras.length=0,t=!0);for(let i=0;i<e.length;i++){const a=e[i];let u;if(!0===this._useLayers){const e=this._glBinding.getViewSubImage(this._glProjLayer,a);u=e.viewport,0===i&&n.setXRRenderTargetTextures(this._xrRenderTarget,e.colorTexture,this._glProjLayer.ignoreDepthValues?void 0:e.depthStencilTexture)}else u=o.getViewport(a);let l=this._cameras[i];void 0===l&&(l=new ne,l.layers.enable(i),l.viewport=new s,this._cameras[i]=l),l.matrix.fromArray(a.transform.matrix),l.matrix.decompose(l.position,l.quaternion,l.scale),l.projectionMatrix.fromArray(a.projectionMatrix),l.projectionMatrixInverse.copy(l.projectionMatrix).invert(),l.viewport.set(u.x,u.y,u.width,u.height),0===i&&(r.matrix.copy(l.matrix),r.matrix.decompose(r.position,r.quaternion,r.scale)),!0===t&&r.cameras.push(l)}i.setOutputRenderTarget(this._xrRenderTarget)}for(let e=0;e<this._controllers.length;e++){const r=this._controllerInputSources[e],s=this._controllers[e];null!==r&&void 0!==s&&s.update(r,t,a)}this._currentAnimationLoop&&this._currentAnimationLoop(e,t),t.detectedPlanes&&this.dispatchEvent({type:"planesdetected",data:t}),this._xrFrame=null}const tv=new j,rv=new t,sv=new s,iv=new tt,nv=new o,ov=new s;class av{constructor(e,t={}){this.isRenderer=!0;const{logarithmicDepthBuffer:r=!1,alpha:i=!0,depth:n=!0,stencil:o=!1,antialias:a=!1,samples:u=0,getFallback:l=null,colorBufferType:d=he}=t;this.domElement=e.getDomElement(),this.backend=e,this.samples=u||!0===a?4:0,this.autoClear=!0,this.autoClearColor=!0,this.autoClearDepth=!0,this.autoClearStencil=!0,this.alpha=i,this.logarithmicDepthBuffer=r,this.outputColorSpace=z,this.toneMapping=p,this.toneMappingExposure=1,this.sortObjects=!0,this.depth=n,this.stencil=o,this.info=new Um,this.nodes={modelViewMatrix:null,modelNormalViewMatrix:null},this.library=new k_,this.lighting=new $_,this._getFallback=l,this._pixelRatio=1,this._width=this.domElement.width,this._height=this.domElement.height,this._viewport=new s(0,0,this._width,this._height),this._scissor=new s(0,0,this._width,this._height),this._scissorTest=!1,this._attributes=null,this._geometries=null,this._nodes=null,this._animation=null,this._bindings=null,this._objects=null,this._pipelines=null,this._bundles=null,this._renderLists=null,this._renderContexts=null,this._textures=null,this._background=null,this._quad=new sy(new wh),this._quad.material.name="Renderer_output",this._currentRenderContext=null,this._opaqueSort=null,this._transparentSort=null,this._frameBufferTarget=null;const c=!0===this.alpha?0:1;this._clearColor=new uf(0,0,0,c),this._clearDepth=1,this._clearStencil=0,this._renderTarget=null,this._activeCubeFace=0,this._activeMipmapLevel=0,this._outputRenderTarget=null,this._mrt=null,this._renderObjectFunction=null,this._currentRenderObjectFunction=null,this._currentRenderBundle=null,this._handleObjectFunction=this._renderObjectDirect,this._isDeviceLost=!1,this.onDeviceLost=this._onDeviceLost,this._colorBufferType=d,this._initialized=!1,this._initPromise=null,this._compilationPromises=null,this.transparent=!0,this.opaque=!0,this.shadowMap={enabled:!1,type:et},this.xr=new X_(this),this.debug={checkShaderErrors:!0,onShaderError:null,getShaderAsync:async(e,t,r)=>{await this.compileAsync(e,t);const s=this._renderLists.get(e,t),i=this._renderContexts.get(e,t,this._renderTarget),n=e.overrideMaterial||r.material,o=this._objects.get(r,n,e,t,s.lightsNode,i,i.clippingContext),{fragmentShader:a,vertexShader:u}=o.getNodeBuilderState();return{fragmentShader:a,vertexShader:u}}}}async init(){if(this._initialized)throw new Error("Renderer: Backend has already been initialized.");return null!==this._initPromise||(this._initPromise=new Promise((async(e,t)=>{let r=this.backend;try{await r.init(this)}catch(e){if(null===this._getFallback)return void t(e);try{this.backend=r=this._getFallback(e),await r.init(this)}catch(e){return void t(e)}}this._nodes=new L_(this,r),this._animation=new vm(this._nodes,this.info),this._attributes=new Im(r),this._background=new IT(this,this._nodes),this._geometries=new Vm(this._attributes,this.info),this._textures=new af(this,r,this.info),this._pipelines=new $m(r,this._nodes),this._bindings=new Hm(r,this._nodes,this._textures,this._attributes,this._pipelines,this.info),this._objects=new Am(this,this._nodes,this._geometries,this._pipelines,this._bindings,this.info),this._renderLists=new Qm(this.lighting),this._bundles=new G_,this._renderContexts=new nf,this._animation.start(),this._initialized=!0,e(this)}))),this._initPromise}get coordinateSystem(){return this.backend.coordinateSystem}async compileAsync(e,t,r=null){if(!0===this._isDeviceLost)return;!1===this._initialized&&await this.init();const s=this._nodes.nodeFrame,i=s.renderId,n=this._currentRenderContext,o=this._currentRenderObjectFunction,a=this._compilationPromises,u=!0===e.isScene?e:tv;null===r&&(r=e);const l=this._renderTarget,d=this._renderContexts.get(r,t,l),c=this._activeMipmapLevel,h=[];this._currentRenderContext=d,this._currentRenderObjectFunction=this.renderObject,this._handleObjectFunction=this._createObjectPipeline,this._compilationPromises=h,s.renderId++,s.update(),d.depth=this.depth,d.stencil=this.stencil,d.clippingContext||(d.clippingContext=new V_),d.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,l);const p=this._renderLists.get(e,t);if(p.begin(),this._projectObject(e,t,0,p,d.clippingContext),r!==e&&r.traverseVisible((function(e){e.isLight&&e.layers.test(t.layers)&&p.pushLight(e)})),p.finish(),null!==l){this._textures.updateRenderTarget(l,c);const e=this._textures.get(l);d.textures=e.textures,d.depthTexture=e.depthTexture}else d.textures=null,d.depthTexture=null;this._background.update(u,p,d);const g=p.opaque,m=p.transparent,f=p.transparentDoublePass,y=p.lightsNode;!0===this.opaque&&g.length>0&&this._renderObjects(g,t,u,y),!0===this.transparent&&m.length>0&&this._renderTransparents(m,f,t,u,y),s.renderId=i,this._currentRenderContext=n,this._currentRenderObjectFunction=o,this._compilationPromises=a,this._handleObjectFunction=this._renderObjectDirect,await Promise.all(h)}async renderAsync(e,t){!1===this._initialized&&await this.init(),this._renderScene(e,t)}async waitForGPU(){await this.backend.waitForGPU()}setMRT(e){return this._mrt=e,this}getMRT(){return this._mrt}getColorBufferType(){return this._colorBufferType}_onDeviceLost(e){let t=`THREE.WebGPURenderer: ${e.api} Device Lost:\n\nMessage: ${e.message}`;e.reason&&(t+=`\nReason: ${e.reason}`),console.error(t),this._isDeviceLost=!0}_renderBundle(e,t,r){const{bundleGroup:s,camera:i,renderList:n}=e,o=this._currentRenderContext,a=this._bundles.get(s,i),u=this.backend.get(a);void 0===u.renderContexts&&(u.renderContexts=new Set);const l=s.version!==u.version,d=!1===u.renderContexts.has(o)||l;if(u.renderContexts.add(o),d){this.backend.beginBundle(o),(void 0===u.renderObjects||l)&&(u.renderObjects=[]),this._currentRenderBundle=a;const{transparentDoublePass:e,transparent:d,opaque:c}=n;!0===this.opaque&&c.length>0&&this._renderObjects(c,i,t,r),!0===this.transparent&&d.length>0&&this._renderTransparents(d,e,i,t,r),this._currentRenderBundle=null,this.backend.finishBundle(o,a),u.version=s.version}else{const{renderObjects:e}=u;for(let t=0,r=e.length;t<r;t++){const r=e[t];this._nodes.needsRefresh(r)&&(this._nodes.updateBefore(r),this._nodes.updateForRender(r),this._bindings.updateForRender(r),this._nodes.updateAfter(r))}}this.backend.addBundle(o,a)}render(e,t){if(!1===this._initialized)return console.warn("THREE.Renderer: .render() called before the backend is initialized. Try using .renderAsync() instead."),this.renderAsync(e,t);this._renderScene(e,t)}_getFrameBufferTarget(){const{currentToneMapping:e,currentColorSpace:t}=this;if(!1===(e!==p)&&!1===(t!==de))return null;const{width:r,height:s}=this.getDrawingBufferSize(rv),{depth:i,stencil:n}=this;let o=this._frameBufferTarget;return null===o&&(o=new oe(r,s,{depthBuffer:i,stencilBuffer:n,type:this._colorBufferType,format:ce,colorSpace:de,generateMipmaps:!1,minFilter:q,magFilter:q,samples:this.samples}),o.isPostProcessingRenderTarget=!0,this._frameBufferTarget=o),o.depthBuffer=i,o.stencilBuffer=n,o.setSize(r,s),o.viewport.copy(this._viewport),o.scissor.copy(this._scissor),o.viewport.multiplyScalar(this._pixelRatio),o.scissor.multiplyScalar(this._pixelRatio),o.scissorTest=this._scissorTest,o}_renderScene(e,t,r=!0){if(!0===this._isDeviceLost)return;const s=r?this._getFrameBufferTarget():null,i=this._nodes.nodeFrame,n=i.renderId,o=this._currentRenderContext,a=this._currentRenderObjectFunction,u=!0===e.isScene?e:tv,l=this._renderTarget||this._outputRenderTarget,d=this._activeCubeFace,c=this._activeMipmapLevel;let h;null!==s?(h=s,this.setRenderTarget(h)):h=l;const p=this._renderContexts.get(e,t,h);this._currentRenderContext=p,this._currentRenderObjectFunction=this._renderObjectFunction||this.renderObject,this.info.calls++,this.info.render.calls++,this.info.render.frameCalls++,i.renderId=this.info.calls;const g=this.coordinateSystem,m=this.xr;if(t.coordinateSystem!==g&&!1===m.isPresenting&&(t.coordinateSystem=g,t.updateProjectionMatrix(),t.isArrayCamera))for(const e of t.cameras)e.coordinateSystem=g,e.updateProjectionMatrix();!0===e.matrixWorldAutoUpdate&&e.updateMatrixWorld(),null===t.parent&&!0===t.matrixWorldAutoUpdate&&t.updateMatrixWorld(),!0===m.enabled&&!0===m.isPresenting&&(!0===m.cameraAutoUpdate&&m.updateCamera(t),t=m.getCamera());let f=this._viewport,y=this._scissor,x=this._pixelRatio;null!==h&&(f=h.viewport,y=h.scissor,x=1),this.getDrawingBufferSize(rv),sv.set(0,0,rv.width,rv.height);const b=void 0===f.minDepth?0:f.minDepth,T=void 0===f.maxDepth?1:f.maxDepth;p.viewportValue.copy(f).multiplyScalar(x).floor(),p.viewportValue.width>>=c,p.viewportValue.height>>=c,p.viewportValue.minDepth=b,p.viewportValue.maxDepth=T,p.viewport=!1===p.viewportValue.equals(sv),p.scissorValue.copy(y).multiplyScalar(x).floor(),p.scissor=this._scissorTest&&!1===p.scissorValue.equals(sv),p.scissorValue.width>>=c,p.scissorValue.height>>=c,p.clippingContext||(p.clippingContext=new V_),p.clippingContext.updateGlobal(u,t),u.onBeforeRender(this,e,t,h),nv.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse),iv.setFromProjectionMatrix(nv,g);const _=this._renderLists.get(e,t);if(_.begin(),this._projectObject(e,t,0,_,p.clippingContext),_.finish(),!0===this.sortObjects&&_.sort(this._opaqueSort,this._transparentSort),null!==h){this._textures.updateRenderTarget(h,c);const e=this._textures.get(h);p.textures=e.textures,p.depthTexture=e.depthTexture,p.width=e.width,p.height=e.height,p.renderTarget=h,p.depth=h.depthBuffer,p.stencil=h.stencilBuffer}else p.textures=null,p.depthTexture=null,p.width=this.domElement.width,p.height=this.domElement.height,p.depth=this.depth,p.stencil=this.stencil;p.width>>=c,p.height>>=c,p.activeCubeFace=d,p.activeMipmapLevel=c,p.occlusionQueryCount=_.occlusionQueryCount,this._background.update(u,_,p),this.backend.beginRender(p);const{bundles:v,lightsNode:N,transparentDoublePass:S,transparent:E,opaque:w}=_;return v.length>0&&this._renderBundles(v,u,N),!0===this.opaque&&w.length>0&&this._renderObjects(w,t,u,N),!0===this.transparent&&E.length>0&&this._renderTransparents(E,S,t,u,N),this.backend.finishRender(p),i.renderId=n,this._currentRenderContext=o,this._currentRenderObjectFunction=a,null!==s&&(this.setRenderTarget(l,d,c),this._renderOutput(h)),u.onAfterRender(this,e,t,h),p}_renderOutput(e){const t=this._quad;this._nodes.hasOutputChange(e.texture)&&(t.material.fragmentNode=this._nodes.getOutputNode(e.texture),t.material.needsUpdate=!0);const r=this.autoClear,s=this.xr.enabled;this.autoClear=!1,this.xr.enabled=!1,this._renderScene(t,t.camera,!1),this.autoClear=r,this.xr.enabled=s}getMaxAnisotropy(){return this.backend.getMaxAnisotropy()}getActiveCubeFace(){return this._activeCubeFace}getActiveMipmapLevel(){return this._activeMipmapLevel}async setAnimationLoop(e){!1===this._initialized&&await this.init(),this._animation.setAnimationLoop(e)}async getArrayBufferAsync(e){return await this.backend.getArrayBufferAsync(e)}getContext(){return this.backend.getContext()}getPixelRatio(){return this._pixelRatio}getDrawingBufferSize(e){return e.set(this._width*this._pixelRatio,this._height*this._pixelRatio).floor()}getSize(e){return e.set(this._width,this._height)}setPixelRatio(e=1){this._pixelRatio!==e&&(this._pixelRatio=e,this.setSize(this._width,this._height,!1))}setDrawingBufferSize(e,t,r){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this._pixelRatio=r,this.domElement.width=Math.floor(e*r),this.domElement.height=Math.floor(t*r),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setSize(e,t,r=!0){this.xr&&this.xr.isPresenting||(this._width=e,this._height=t,this.domElement.width=Math.floor(e*this._pixelRatio),this.domElement.height=Math.floor(t*this._pixelRatio),!0===r&&(this.domElement.style.width=e+"px",this.domElement.style.height=t+"px"),this.setViewport(0,0,e,t),this._initialized&&this.backend.updateSize())}setOpaqueSort(e){this._opaqueSort=e}setTransparentSort(e){this._transparentSort=e}getScissor(e){const t=this._scissor;return e.x=t.x,e.y=t.y,e.width=t.width,e.height=t.height,e}setScissor(e,t,r,s){const i=this._scissor;e.isVector4?i.copy(e):i.set(e,t,r,s)}getScissorTest(){return this._scissorTest}setScissorTest(e){this._scissorTest=e,this.backend.setScissorTest(e)}getViewport(e){return e.copy(this._viewport)}setViewport(e,t,r,s,i=0,n=1){const o=this._viewport;e.isVector4?o.copy(e):o.set(e,t,r,s),o.minDepth=i,o.maxDepth=n}getClearColor(e){return e.copy(this._clearColor)}setClearColor(e,t=1){this._clearColor.set(e),this._clearColor.a=t}getClearAlpha(){return this._clearColor.a}setClearAlpha(e){this._clearColor.a=e}getClearDepth(){return this._clearDepth}setClearDepth(e){this._clearDepth=e}getClearStencil(){return this._clearStencil}setClearStencil(e){this._clearStencil=e}isOccluded(e){const t=this._currentRenderContext;return t&&this.backend.isOccluded(t,e)}clear(e=!0,t=!0,r=!0){if(!1===this._initialized)return console.warn("THREE.Renderer: .clear() called before the backend is initialized. Try using .clearAsync() instead."),this.clearAsync(e,t,r);const s=this._renderTarget||this._getFrameBufferTarget();let i=null;if(null!==s){this._textures.updateRenderTarget(s);const e=this._textures.get(s);i=this._renderContexts.getForClear(s),i.textures=e.textures,i.depthTexture=e.depthTexture,i.width=e.width,i.height=e.height,i.renderTarget=s,i.depth=s.depthBuffer,i.stencil=s.stencilBuffer,i.clearColorValue=this.backend.getClearColor(),i.activeCubeFace=this.getActiveCubeFace(),i.activeMipmapLevel=this.getActiveMipmapLevel()}this.backend.clear(e,t,r,i),null!==s&&null===this._renderTarget&&this._renderOutput(s)}clearColor(){return this.clear(!0,!1,!1)}clearDepth(){return this.clear(!1,!0,!1)}clearStencil(){return this.clear(!1,!1,!0)}async clearAsync(e=!0,t=!0,r=!0){!1===this._initialized&&await this.init(),this.clear(e,t,r)}async clearColorAsync(){this.clearAsync(!0,!1,!1)}async clearDepthAsync(){this.clearAsync(!1,!0,!1)}async clearStencilAsync(){this.clearAsync(!1,!1,!0)}get currentToneMapping(){return this.isOutputTarget?this.toneMapping:p}get currentColorSpace(){return this.isOutputTarget?this.outputColorSpace:de}get isOutputTarget(){return this._renderTarget===this._outputRenderTarget||null===this._renderTarget}dispose(){this.info.dispose(),this.backend.dispose(),this._animation.dispose(),this._objects.dispose(),this._pipelines.dispose(),this._nodes.dispose(),this._bindings.dispose(),this._renderLists.dispose(),this._renderContexts.dispose(),this._textures.dispose(),null!==this._frameBufferTarget&&this._frameBufferTarget.dispose(),Object.values(this.backend.timestampQueryPool).forEach((e=>{null!==e&&e.dispose()})),this.setRenderTarget(null),this.setAnimationLoop(null)}setRenderTarget(e,t=0,r=0){this._renderTarget=e,this._activeCubeFace=t,this._activeMipmapLevel=r}getRenderTarget(){return this._renderTarget}setOutputRenderTarget(e){this._outputRenderTarget=e}getOutputRenderTarget(){return this._outputRenderTarget}setRenderObjectFunction(e){this._renderObjectFunction=e}getRenderObjectFunction(){return this._renderObjectFunction}compute(e){if(!0===this._isDeviceLost)return;if(!1===this._initialized)return console.warn("THREE.Renderer: .compute() called before the backend is initialized. Try using .computeAsync() instead."),this.computeAsync(e);const t=this._nodes.nodeFrame,r=t.renderId;this.info.calls++,this.info.compute.calls++,this.info.compute.frameCalls++,t.renderId=this.info.calls;const s=this.backend,i=this._pipelines,n=this._bindings,o=this._nodes,a=Array.isArray(e)?e:[e];if(void 0===a[0]||!0!==a[0].isComputeNode)throw new Error("THREE.Renderer: .compute() expects a ComputeNode.");s.beginCompute(e);for(const t of a){if(!1===i.has(t)){const e=()=>{t.removeEventListener("dispose",e),i.delete(t),n.delete(t),o.delete(t)};t.addEventListener("dispose",e);const r=t.onInitFunction;null!==r&&r.call(t,{renderer:this})}o.updateForCompute(t),n.updateForCompute(t);const r=n.getForCompute(t),a=i.getForCompute(t,r);s.compute(e,t,r,a)}s.finishCompute(e),t.renderId=r}async computeAsync(e){!1===this._initialized&&await this.init(),this.compute(e)}async hasFeatureAsync(e){return!1===this._initialized&&await this.init(),this.backend.hasFeature(e)}async resolveTimestampsAsync(e="render"){return!1===this._initialized&&await this.init(),this.backend.resolveTimestampsAsync(e)}hasFeature(e){return!1===this._initialized?(console.warn("THREE.Renderer: .hasFeature() called before the backend is initialized. Try using .hasFeatureAsync() instead."),!1):this.backend.hasFeature(e)}hasInitialized(){return this._initialized}async initTextureAsync(e){!1===this._initialized&&await this.init(),this._textures.updateTexture(e)}initTexture(e){!1===this._initialized&&console.warn("THREE.Renderer: .initTexture() called before the backend is initialized. Try using .initTextureAsync() instead."),this._textures.updateTexture(e)}copyFramebufferToTexture(e,t=null){if(null!==t)if(t.isVector2)t=ov.set(t.x,t.y,e.image.width,e.image.height).floor();else{if(!t.isVector4)return void console.error("THREE.Renderer.copyFramebufferToTexture: Invalid rectangle.");t=ov.copy(t).floor()}else t=ov.set(0,0,e.image.width,e.image.height);let r,s=this._currentRenderContext;null!==s?r=s.renderTarget:(r=this._renderTarget||this._getFrameBufferTarget(),null!==r&&(this._textures.updateRenderTarget(r),s=this._textures.get(r))),this._textures.updateTexture(e,{renderTarget:r}),this.backend.copyFramebufferToTexture(e,s,t)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this._textures.updateTexture(e),this._textures.updateTexture(t),this.backend.copyTextureToTexture(e,t,r,s,i,n)}async readRenderTargetPixelsAsync(e,t,r,s,i,n=0,o=0){return this.backend.copyTextureToBuffer(e.textures[n],t,r,s,i,o)}_projectObject(e,t,r,s,i){if(!1===e.visible)return;if(e.layers.test(t.layers))if(e.isGroup)r=e.renderOrder,e.isClippingGroup&&e.enabled&&(i=i.getGroupContext(e));else if(e.isLOD)!0===e.autoUpdate&&e.update(t);else if(e.isLight)s.pushLight(e);else if(e.isSprite){if(!e.frustumCulled||iv.intersectsSprite(e)){!0===this.sortObjects&&ov.setFromMatrixPosition(e.matrixWorld).applyMatrix4(nv);const{geometry:t,material:n}=e;n.visible&&s.push(e,t,n,r,ov.z,null,i)}}else if(e.isLineLoop)console.error("THREE.Renderer: Objects of type THREE.LineLoop are not supported. Please use THREE.Line or THREE.LineSegments.");else if((e.isMesh||e.isLine||e.isPoints)&&(!e.frustumCulled||iv.intersectsObject(e))){const{geometry:t,material:n}=e;if(!0===this.sortObjects&&(null===t.boundingSphere&&t.computeBoundingSphere(),ov.copy(t.boundingSphere.center).applyMatrix4(e.matrixWorld).applyMatrix4(nv)),Array.isArray(n)){const o=t.groups;for(let a=0,u=o.length;a<u;a++){const u=o[a],l=n[u.materialIndex];l&&l.visible&&s.push(e,t,l,r,ov.z,u,i)}}else n.visible&&s.push(e,t,n,r,ov.z,null,i)}if(!0===e.isBundleGroup&&void 0!==this.backend.beginBundle){const r=s;(s=this._renderLists.get(e,t)).begin(),r.pushBundle({bundleGroup:e,camera:t,renderList:s}),s.finish()}const n=e.children;for(let e=0,o=n.length;e<o;e++)this._projectObject(n[e],t,r,s,i)}_renderBundles(e,t,r){for(const s of e)this._renderBundle(s,t,r)}_renderTransparents(e,t,r,s,i){if(t.length>0){for(const{material:e}of t)e.side=N;this._renderObjects(t,r,s,i,"backSide");for(const{material:e}of t)e.side=je;this._renderObjects(e,r,s,i);for(const{material:e}of t)e.side=Se}else this._renderObjects(e,r,s,i)}_renderObjects(e,t,r,s,i=null){for(let n=0,o=e.length;n<o;n++){const{object:o,geometry:a,material:u,group:l,clippingContext:d}=e[n];this._currentRenderObjectFunction(o,r,t,a,u,l,s,d,i)}}renderObject(e,t,r,s,i,n,o,a=null,u=null){let l,d,c;if(e.onBeforeRender(this,t,r,s,i,n),null!==t.overrideMaterial){const e=t.overrideMaterial;i.positionNode&&i.positionNode.isNode&&(l=e.positionNode,e.positionNode=i.positionNode),e.alphaTest=i.alphaTest,e.alphaMap=i.alphaMap,e.transparent=i.transparent||i.transmission>0,e.isShadowPassMaterial&&(e.side=null===i.shadowSide?i.side:i.shadowSide,i.depthNode&&i.depthNode.isNode&&(c=e.depthNode,e.depthNode=i.depthNode),i.castShadowNode&&i.castShadowNode.isNode&&(d=e.colorNode,e.colorNode=i.castShadowNode)),i=e}!0===i.transparent&&i.side===Se&&!1===i.forceSinglePass?(i.side=N,this._handleObjectFunction(e,i,t,r,o,n,a,"backSide"),i.side=je,this._handleObjectFunction(e,i,t,r,o,n,a,u),i.side=Se):this._handleObjectFunction(e,i,t,r,o,n,a,u),void 0!==l&&(t.overrideMaterial.positionNode=l),void 0!==c&&(t.overrideMaterial.depthNode=c),void 0!==d&&(t.overrideMaterial.colorNode=d),e.onAfterRender(this,t,r,s,i,n)}_renderObjectDirect(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n;const l=this._nodes.needsRefresh(u);if(l&&(this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u)),this._pipelines.updateForRender(u),null!==this._currentRenderBundle){this.backend.get(this._currentRenderBundle).renderObjects.push(u),u.bundle=this._currentRenderBundle.bundleGroup}this.backend.draw(u,this.info),l&&this._nodes.updateAfter(u)}_createObjectPipeline(e,t,r,s,i,n,o,a){const u=this._objects.get(e,t,r,s,i,this._currentRenderContext,o,a);u.drawRange=e.geometry.drawRange,u.group=n,this._nodes.updateBefore(u),this._geometries.updateForRender(u),this._nodes.updateForRender(u),this._bindings.updateForRender(u),this._pipelines.getForRender(u,this._compilationPromises),this._nodes.updateAfter(u)}get compile(){return this.compileAsync}}class uv{constructor(e=""){this.name=e,this.visibility=0}setVisibility(e){this.visibility|=e}clone(){return Object.assign(new this.constructor,this)}}class lv extends uv{constructor(e,t=null){super(e),this.isBuffer=!0,this.bytesPerElement=Float32Array.BYTES_PER_ELEMENT,this._buffer=t}get byteLength(){return(e=this._buffer.byteLength)+(Pm-e%Pm)%Pm;var e}get buffer(){return this._buffer}update(){return!0}}class dv extends lv{constructor(e,t=null){super(e,t),this.isUniformBuffer=!0}}let cv=0;class hv extends dv{constructor(e,t){super("UniformBuffer_"+cv++,e?e.value:null),this.nodeUniform=e,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class pv extends dv{constructor(e){super(e),this.isUniformsGroup=!0,this._values=null,this.uniforms=[]}addUniform(e){return this.uniforms.push(e),this}removeUniform(e){const t=this.uniforms.indexOf(e);return-1!==t&&this.uniforms.splice(t,1),this}get values(){return null===this._values&&(this._values=Array.from(this.buffer)),this._values}get buffer(){let e=this._buffer;if(null===e){const t=this.byteLength;e=new Float32Array(new ArrayBuffer(t)),this._buffer=e}return e}get byteLength(){let e=0;for(let t=0,r=this.uniforms.length;t<r;t++){const r=this.uniforms[t],{boundary:s,itemSize:i}=r,n=e%Pm;0!==n&&Pm-n-s<0?e+=Pm-n:n%s!=0&&(e+=n%s),r.offset=e/this.bytesPerElement,e+=i*this.bytesPerElement}return Math.ceil(e/Pm)*Pm}update(){let e=!1;for(const t of this.uniforms)!0===this.updateByType(t)&&(e=!0);return e}updateByType(e){return e.isNumberUniform?this.updateNumber(e):e.isVector2Uniform?this.updateVector2(e):e.isVector3Uniform?this.updateVector3(e):e.isVector4Uniform?this.updateVector4(e):e.isColorUniform?this.updateColor(e):e.isMatrix3Uniform?this.updateMatrix3(e):e.isMatrix4Uniform?this.updateMatrix4(e):void console.error("THREE.WebGPUUniformsGroup: Unsupported uniform type.",e)}updateNumber(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i]!==s){this._getBufferForType(n)[i]=r[i]=s,t=!0}return t}updateVector2(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,t=!0}return t}updateVector3(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,t=!0}return t}updateVector4(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset,n=e.getType();if(r[i+0]!==s.x||r[i+1]!==s.y||r[i+2]!==s.z||r[i+4]!==s.w){const e=this._getBufferForType(n);e[i+0]=r[i+0]=s.x,e[i+1]=r[i+1]=s.y,e[i+2]=r[i+2]=s.z,e[i+3]=r[i+3]=s.w,t=!0}return t}updateColor(e){let t=!1;const r=this.values,s=e.getValue(),i=e.offset;if(r[i+0]!==s.r||r[i+1]!==s.g||r[i+2]!==s.b){const e=this.buffer;e[i+0]=r[i+0]=s.r,e[i+1]=r[i+1]=s.g,e[i+2]=r[i+2]=s.b,t=!0}return t}updateMatrix3(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(r[i+0]!==s[0]||r[i+1]!==s[1]||r[i+2]!==s[2]||r[i+4]!==s[3]||r[i+5]!==s[4]||r[i+6]!==s[5]||r[i+8]!==s[6]||r[i+9]!==s[7]||r[i+10]!==s[8]){const e=this.buffer;e[i+0]=r[i+0]=s[0],e[i+1]=r[i+1]=s[1],e[i+2]=r[i+2]=s[2],e[i+4]=r[i+4]=s[3],e[i+5]=r[i+5]=s[4],e[i+6]=r[i+6]=s[5],e[i+8]=r[i+8]=s[6],e[i+9]=r[i+9]=s[7],e[i+10]=r[i+10]=s[8],t=!0}return t}updateMatrix4(e){let t=!1;const r=this.values,s=e.getValue().elements,i=e.offset;if(!1===function(e,t,r){for(let s=0,i=t.length;s<i;s++)if(e[r+s]!==t[s])return!1;return!0}(r,s,i)){this.buffer.set(s,i),function(e,t,r){for(let s=0,i=t.length;s<i;s++)e[r+s]=t[s]}(r,s,i),t=!0}return t}_getBufferForType(e){return"int"===e||"ivec2"===e||"ivec3"===e||"ivec4"===e?new Int32Array(this.buffer.buffer):"uint"===e||"uvec2"===e||"uvec3"===e||"uvec4"===e?new Uint32Array(this.buffer.buffer):this.buffer}}let gv=0;class mv extends pv{constructor(e,t){super(e),this.id=gv++,this.groupNode=t,this.isNodeUniformsGroup=!0}}let fv=0;class yv extends uv{constructor(e,t){super(e),this.id=fv++,this.texture=t,this.version=t?t.version:0,this.store=!1,this.generation=null,this.isSampledTexture=!0}needsBindingsUpdate(e){const{texture:t}=this;return e!==this.generation?(this.generation=e,!0):t.isVideoTexture}update(){const{texture:e,version:t}=this;return t!==e.version&&(this.version=e.version,!0)}}class xv extends yv{constructor(e,t,r,s=null){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r,this.access=s}needsBindingsUpdate(e){return this.textureNode.value!==this.texture||super.needsBindingsUpdate(e)}update(){const{textureNode:e}=this;return this.texture!==e.value?(this.texture=e.value,!0):super.update()}}class bv extends xv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledCubeTexture=!0}}class Tv extends xv{constructor(e,t,r,s=null){super(e,t,r,s),this.isSampledTexture3D=!0}}const _v={textureDimensions:"textureSize",equals:"equal"},vv={low:"lowp",medium:"mediump",high:"highp"},Nv={swizzleAssign:!0,storageBuffer:!1},Sv="\nprecision highp float;\nprecision highp int;\nprecision highp sampler2D;\nprecision highp sampler3D;\nprecision highp samplerCube;\nprecision highp sampler2DArray;\n\nprecision highp usampler2D;\nprecision highp usampler3D;\nprecision highp usamplerCube;\nprecision highp usampler2DArray;\n\nprecision highp isampler2D;\nprecision highp isampler3D;\nprecision highp isamplerCube;\nprecision highp isampler2DArray;\n\nprecision lowp sampler2DShadow;\n";class Ev extends h_{constructor(e,t){super(e,t,new F_),this.uniformGroups={},this.transforms=[],this.extensions={},this.builtins={vertex:[],fragment:[],compute:[]},this.useComparisonMethod=!0}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}getMethod(e){return _v[e]||e}getOutputStructName(){return""}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(this.getType(e.type)+" "+e.name);return`${this.getType(t.type)} ${t.name}( ${s.join(", ")} ) {\n\n\t${r.vars}\n\n${r.code}\n\treturn ${r.result};\n\n}`}setupPBO(e){const t=e.value;if(void 0===t.pbo){const e=t.array,r=t.count*t.itemSize,{itemSize:s}=t,i=t.array.constructor.name.toLowerCase().includes("int");let n=i?st:it;2===s?n=i?ut:Ve:3===s?n=i?lt:dt:4===s&&(n=i?ct:ce);const o={Float32Array:B,Uint8Array:Ce,Uint16Array:at,Uint32Array:b,Int8Array:ot,Int16Array:nt,Int32Array:T,Uint8ClampedArray:Ce},a=Math.pow(2,Math.ceil(Math.log2(Math.sqrt(r/s))));let u=Math.ceil(r/s/a);a*u*s<r&&u++;const l=a*u*s,d=new e.constructor(l);d.set(e,0),t.array=d;const c=new rt(t.array,a,u,n,o[t.array.constructor.name]||B);c.needsUpdate=!0,c.isPBOTexture=!0;const h=new Gu(c,null,null);h.setPrecision("high"),t.pboNode=h,t.pbo=h.value,this.getUniformFromNode(t.pboNode,"texture",this.shaderStage,this.context.label)}}getPropertyName(e,t=this.shaderStage){return e.isNodeUniform&&!0!==e.node.isTextureNode&&!0!==e.node.isBufferNode?t.charAt(0)+"_"+e.name:super.getPropertyName(e,t)}generatePBO(e){const{node:t,indexNode:r}=e,s=t.value;if(this.renderer.backend.has(s)){this.renderer.backend.get(s).pbo=s.pbo}const i=this.getUniformFromNode(s.pboNode,"texture",this.shaderStage,this.context.label),n=this.getPropertyName(i);this.increaseUsage(r);const o=r.build(this,"uint"),a=this.getDataFromNode(e);let u=a.propertyName;if(void 0===u){const r=this.getVarFromNode(e);u=this.getPropertyName(r);const i=this.getDataFromNode(t);let l=i.propertySizeName;void 0===l&&(l=u+"Size",this.getVarFromNode(t,l,"uint"),this.addLineFlowCode(`${l} = uint( textureSize( ${n}, 0 ).x )`,e),i.propertySizeName=l);const{itemSize:d}=s,c="."+ks.join("").slice(0,d),h=`ivec2(${o} % ${l}, ${o} / ${l})`,p=this.generateTextureLoad(null,n,h,null,"0");let g="vec4";s.pbo.type===b?g="uvec4":s.pbo.type===T&&(g="ivec4"),this.addLineFlowCode(`${u} = ${g}(${p})${c}`,e),a.propertyName=u}return u}generateTextureLoad(e,t,r,s,i="0"){return s?`texelFetch( ${t}, ivec3( ${r}, ${s} ), ${i} )`:`texelFetch( ${t}, ${r}, ${i} )`}generateTexture(e,t,r,s){return e.isDepthTexture?`texture( ${t}, ${r} ).x`:(s&&(r=`vec3( ${r}, ${s} )`),`texture( ${t}, ${r} )`)}generateTextureLevel(e,t,r,s){return`textureLod( ${t}, ${r}, ${s} )`}generateTextureBias(e,t,r,s){return`texture( ${t}, ${r}, ${s} )`}generateTextureGrad(e,t,r,s){return`textureGrad( ${t}, ${r}, ${s[0]}, ${s[1]} )`}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`texture( ${t}, vec3( ${r}, ${s} ) )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`${this.getVar(e.type,e.name,e.count)};`);return t.join("\n\t")}getUniforms(e){const t=this.uniforms[e],r=[],s={};for(const i of t){let t=null,n=!1;if("texture"===i.type||"texture3D"===i.type){const e=i.node.value;let r="";!0!==e.isDataTexture&&!0!==e.isData3DTexture||(e.type===b?r="u":e.type===T&&(r="i")),t="texture3D"===i.type?`${r}sampler3D ${i.name};`:e.compareFunction?`sampler2DShadow ${i.name};`:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?`${r}sampler2DArray ${i.name};`:`${r}sampler2D ${i.name};`}else if("cubeTexture"===i.type)t=`samplerCube ${i.name};`;else if("buffer"===i.type){const e=i.node,r=this.getType(e.bufferType),s=e.bufferCount,n=s>0?s:"";t=`${e.name} {\n\t${r} ${i.name}[${n}];\n};\n`}else{t=`${this.getVectorType(i.type)} ${this.getPropertyName(i,e)};`,n=!0}const o=i.node.precision;if(null!==o&&(t=vv[o]+" "+t),n){t="\t"+t;const e=i.groupNode.name;(s[e]||(s[e]=[])).push(t)}else t="uniform "+t,r.push(t)}let i="";for(const t in s){const r=s[t];i+=this._getGLSLUniformStruct(e+"_"+t,r.join("\n"))+"\n"}return i+=r.join("\n"),i}getTypeFromAttribute(e){let t=super.getTypeFromAttribute(e);if(/^[iu]/.test(t)&&e.gpuType!==T){let r=e;e.isInterleavedBufferAttribute&&(r=e.data);const s=r.array;!1==(s instanceof Uint32Array||s instanceof Int32Array)&&(t=t.slice(1))}return t}getAttributes(e){let t="";if("vertex"===e||"compute"===e){const e=this.getAttributesArray();let r=0;for(const s of e)t+=`layout( location = ${r++} ) in ${s.type} ${s.name};\n`}return t}getStructMembers(e){const t=[];for(const r of e.members)t.push(`\t${r.type} ${r.name};`);return t.join("\n")}getStructs(e){const t=[],r=this.structs[e],s=[];for(const e of r)if(e.output)for(const t of e.members)s.push(`layout( location = ${t.index} ) out ${t.type} ${t.name};`);else{let r="struct "+e.name+" {\n";r+=this.getStructMembers(e),r+="\n};\n",t.push(r)}return 0===s.length&&s.push("layout( location = 0 ) out vec4 fragColor;"),"\n"+s.join("\n")+"\n\n"+t.join("\n")}getVaryings(e){let t="";const r=this.varyings;if("vertex"===e||"compute"===e)for(const s of r){"compute"===e&&(s.needsInterpolation=!0);const r=this.getType(s.type);if(s.needsInterpolation){t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""} out ${r} ${s.name};\n`}else t+=`${r} ${s.name};\n`}else if("fragment"===e)for(const e of r)if(e.needsInterpolation){const r=this.getType(e.type);t+=`${r.includes("int")||r.includes("uv")||r.includes("iv")?"flat ":""}in ${r} ${e.name};\n`}for(const r of this.builtins[e])t+=`${r};\n`;return t}getVertexIndex(){return"uint( gl_VertexID )"}getInstanceIndex(){return"uint( gl_InstanceID )"}getInvocationLocalIndex(){return`uint( gl_InstanceID ) % ${this.object.workgroupSize.reduce(((e,t)=>e*t),1)}u`}getDrawIndex(){return this.renderer.backend.extensions.has("WEBGL_multi_draw")?"uint( gl_DrawID )":null}getFrontFacing(){return"gl_FrontFacing"}getFragCoord(){return"gl_FragCoord.xy"}getFragDepth(){return"gl_FragDepth"}enableExtension(e,t,r=this.shaderStage){const s=this.extensions[r]||(this.extensions[r]=new Map);!1===s.has(e)&&s.set(e,{name:e,behavior:t})}getExtensions(e){const t=[];if("vertex"===e){const t=this.renderer.backend.extensions;this.object.isBatchedMesh&&t.has("WEBGL_multi_draw")&&this.enableExtension("GL_ANGLE_multi_draw","require",e)}const r=this.extensions[e];if(void 0!==r)for(const{name:e,behavior:s}of r.values())t.push(`#extension ${e} : ${s}`);return t.join("\n")}getClipDistance(){return"gl_ClipDistance"}isAvailable(e){let t=Nv[e];if(void 0===t){let r;switch(t=!1,e){case"float32Filterable":r="OES_texture_float_linear";break;case"clipDistance":r="WEBGL_clip_cull_distance"}if(void 0!==r){const e=this.renderer.backend.extensions;e.has(r)&&(e.get(r),t=!0)}Nv[e]=t}return t}isFlipY(){return!0}enableHardwareClipping(e){this.enableExtension("GL_ANGLE_clip_cull_distance","require"),this.builtins.vertex.push(`out float gl_ClipDistance[ ${e} ]`)}registerTransform(e,t){this.transforms.push({varyingName:e,attributeNode:t})}getTransforms(){const e=this.transforms;let t="";for(let r=0;r<e.length;r++){const s=e[r],i=this.getPropertyName(s.attributeNode);t+=`${s.varyingName} = ${i};\n\t`}return t}_getGLSLUniformStruct(e,t){return`\nlayout( std140 ) uniform ${e} {\n${t}\n};`}_getGLSLVertexCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// extensions\n${e.extensions}\n\n// precision\n${Sv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// attributes\n${e.attributes}\n\n// codes\n${e.codes}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// transforms\n\t${e.transforms}\n\n\t// flow\n\t${e.flow}\n\n\tgl_PointSize = 1.0;\n\n}\n`}_getGLSLFragmentCode(e){return`#version 300 es\n\n${this.getSignature()}\n\n// precision\n${Sv}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\n\n// codes\n${e.codes}\n\n// structs\n${e.structs}\n\nvoid main() {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){let r="// code\n\n";r+=this.flowCode[t];const s=this.flowNodes[t],i=s[s.length-1];for(const e of s){const s=this.getFlowData(e),n=e.name;n&&(r.length>0&&(r+="\n"),r+=`\t// flow -> ${n}\n\t`),r+=`${s.code}\n\t`,e===i&&"compute"!==t&&(r+="// result\n\t","vertex"===t?(r+="gl_Position = ",r+=`${s.result};`):"fragment"===t&&(e.outputNode.isOutputStructNode||(r+="fragColor = ",r+=`${s.result};`)))}const n=e[t];n.extensions=this.getExtensions(t),n.uniforms=this.getUniforms(t),n.attributes=this.getAttributes(t),n.varyings=this.getVaryings(t),n.vars=this.getVars(t),n.structs=this.getStructs(t),n.codes=this.getCodes(t),n.transforms=this.getTransforms(t),n.flow=r}null!==this.material?(this.vertexShader=this._getGLSLVertexCode(e.vertex),this.fragmentShader=this._getGLSLFragmentCode(e.fragment)):this.computeShader=this._getGLSLVertexCode(e.compute)}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);let o=n.uniformGPU;if(void 0===o){const s=e.groupNode,a=s.name,u=this.getBindGroupArray(a,r);if("texture"===t)o=new xv(i.name,i.node,s),u.push(o);else if("cubeTexture"===t)o=new bv(i.name,i.node,s),u.push(o);else if("texture3D"===t)o=new Tv(i.name,i.node,s),u.push(o);else if("buffer"===t){e.name=`NodeBuffer_${e.id}`,i.name=`buffer${e.id}`;const t=new hv(e,s);t.name=e.name,u.push(t),o=t}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let n=e[a];void 0===n&&(n=new mv(r+"_"+a,s),e[a]=n,u.push(n)),o=this.getNodeUniform(i,t),n.addUniform(o)}n.uniformGPU=o}return i}}let wv=null,Av=null;class Rv{constructor(e={}){this.parameters=Object.assign({},e),this.data=new WeakMap,this.renderer=null,this.domElement=null,this.timestampQueryPool={render:null,compute:null},this.trackTimestamp=!0===e.trackTimestamp}async init(e){this.renderer=e}get coordinateSystem(){}beginRender(){}finishRender(){}beginCompute(){}finishCompute(){}draw(){}compute(){}createProgram(){}destroyProgram(){}createBindings(){}updateBindings(){}updateBinding(){}createRenderPipeline(){}createComputePipeline(){}needsRenderUpdate(){}getRenderCacheKey(){}createNodeBuilder(){}createSampler(){}destroySampler(){}createDefaultTexture(){}createTexture(){}updateTexture(){}generateMipmaps(){}destroyTexture(){}async copyTextureToBuffer(){}copyTextureToTexture(){}copyFramebufferToTexture(){}createAttribute(){}createIndexAttribute(){}createStorageAttribute(){}updateAttribute(){}destroyAttribute(){}getContext(){}updateSize(){}updateViewport(){}isOccluded(){}async resolveTimestampsAsync(e="render"){if(!this.trackTimestamp)return void ht("WebGPURenderer: Timestamp tracking is disabled.");const t=this.timestampQueryPool[e];if(!t)return void ht(`WebGPURenderer: No timestamp query pool for type '${e}' found.`);const r=await t.resolveQueriesAsync();return this.renderer.info[e].timestamp=r,r}async waitForGPU(){}async getArrayBufferAsync(){}async hasFeatureAsync(){}hasFeature(){}getMaxAnisotropy(){}getDrawingBufferSize(){return wv=wv||new t,this.renderer.getDrawingBufferSize(wv)}setScissorTest(){}getClearColor(){const e=this.renderer;return Av=Av||new uf,e.getClearColor(Av),Av.getRGB(Av),Av}getDomElement(){let e=this.domElement;return null===e&&(e=void 0!==this.parameters.canvas?this.parameters.canvas:pt(),"setAttribute"in e&&e.setAttribute("data-engine",`three.js r${We} webgpu`),this.domElement=e),e}set(e,t){this.data.set(e,t)}get(e){let t=this.data.get(e);return void 0===t&&(t={},this.data.set(e,t)),t}has(e){return this.data.has(e)}delete(e){this.data.delete(e)}dispose(){}}let Cv,Mv,Fv=0;class Bv{constructor(e,t){this.buffers=[e.bufferGPU,t],this.type=e.type,this.bufferType=e.bufferType,this.pbo=e.pbo,this.byteLength=e.byteLength,this.bytesPerElement=e.BYTES_PER_ELEMENT,this.version=e.version,this.isInteger=e.isInteger,this.activeBufferIndex=0,this.baseId=e.id}get id(){return`${this.baseId}|${this.activeBufferIndex}`}get bufferGPU(){return this.buffers[this.activeBufferIndex]}get transformBuffer(){return this.buffers[1^this.activeBufferIndex]}switchBuffers(){this.activeBufferIndex^=1}}class Pv{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:s}=r,i=e.array,n=e.usage||s.STATIC_DRAW,o=e.isInterleavedBufferAttribute?e.data:e,a=r.get(o);let u,l=a.bufferGPU;if(void 0===l&&(l=this._createBuffer(s,t,i,n),a.bufferGPU=l,a.bufferType=t,a.version=o.version),i instanceof Float32Array)u=s.FLOAT;else if(i instanceof Uint16Array)u=e.isFloat16BufferAttribute?s.HALF_FLOAT:s.UNSIGNED_SHORT;else if(i instanceof Int16Array)u=s.SHORT;else if(i instanceof Uint32Array)u=s.UNSIGNED_INT;else if(i instanceof Int32Array)u=s.INT;else if(i instanceof Int8Array)u=s.BYTE;else if(i instanceof Uint8Array)u=s.UNSIGNED_BYTE;else{if(!(i instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+i);u=s.UNSIGNED_BYTE}let d={bufferGPU:l,bufferType:t,type:u,byteLength:i.byteLength,bytesPerElement:i.BYTES_PER_ELEMENT,version:e.version,pbo:e.pbo,isInteger:u===s.INT||u===s.UNSIGNED_INT||e.gpuType===T,id:Fv++};if(e.isStorageBufferAttribute||e.isStorageInstancedBufferAttribute){const e=this._createBuffer(s,t,i,n);d=new Bv(d,e)}r.set(e,d)}updateAttribute(e){const t=this.backend,{gl:r}=t,s=e.array,i=e.isInterleavedBufferAttribute?e.data:e,n=t.get(i),o=n.bufferType,a=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(o,n.bufferGPU),0===a.length)r.bufferSubData(o,0,s);else{for(let e=0,t=a.length;e<t;e++){const t=a[e];r.bufferSubData(o,t.start*s.BYTES_PER_ELEMENT,s,t.start,t.count)}i.clearUpdateRanges()}r.bindBuffer(o,null),n.version=i.version}destroyAttribute(e){const t=this.backend,{gl:r}=t;e.isInterleavedBufferAttribute&&t.delete(e.data);const s=t.get(e);r.deleteBuffer(s.bufferGPU),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,s=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:i}=t.get(s),n=e.array,o=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,i);const a=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.bufferData(r.COPY_WRITE_BUFFER,o,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,o),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.bindBuffer(r.COPY_WRITE_BUFFER,a),r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(a),r.bindBuffer(r.COPY_READ_BUFFER,null),r.bindBuffer(r.COPY_WRITE_BUFFER,null),u.buffer}_createBuffer(e,t,r,s){const i=e.createBuffer();return e.bindBuffer(t,i),e.bufferData(t,r,s),e.bindBuffer(t,null),i}}class Iv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.enabled={},this.currentFlipSided=null,this.currentCullFace=null,this.currentProgram=null,this.currentBlendingEnabled=!1,this.currentBlending=null,this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentPremultipledAlpha=null,this.currentPolygonOffsetFactor=null,this.currentPolygonOffsetUnits=null,this.currentColorMask=null,this.currentDepthFunc=null,this.currentDepthMask=null,this.currentStencilFunc=null,this.currentStencilRef=null,this.currentStencilFuncMask=null,this.currentStencilFail=null,this.currentStencilZFail=null,this.currentStencilZPass=null,this.currentStencilMask=null,this.currentLineWidth=null,this.currentClippingPlanes=0,this.currentVAO=null,this.currentIndex=null,this.currentBoundFramebuffers={},this.currentDrawbuffers=new WeakMap,this.maxTextures=this.gl.getParameter(this.gl.MAX_TEXTURE_IMAGE_UNITS),this.currentTextureSlot=null,this.currentBoundTextures={},this.currentBoundBufferBases={},this._init()}_init(){const e=this.gl;Cv={[Xe]:e.FUNC_ADD,[mt]:e.FUNC_SUBTRACT,[gt]:e.FUNC_REVERSE_SUBTRACT},Mv={[Ke]:e.ZERO,[Et]:e.ONE,[St]:e.SRC_COLOR,[Nt]:e.SRC_ALPHA,[vt]:e.SRC_ALPHA_SATURATE,[_t]:e.DST_COLOR,[Tt]:e.DST_ALPHA,[bt]:e.ONE_MINUS_SRC_COLOR,[xt]:e.ONE_MINUS_SRC_ALPHA,[yt]:e.ONE_MINUS_DST_COLOR,[ft]:e.ONE_MINUS_DST_ALPHA};const t=e.getParameter(e.SCISSOR_BOX),r=e.getParameter(e.VIEWPORT);this.currentScissor=(new s).fromArray(t),this.currentViewport=(new s).fromArray(r),this._tempVec4=new s}enable(e){const{enabled:t}=this;!0!==t[e]&&(this.gl.enable(e),t[e]=!0)}disable(e){const{enabled:t}=this;!1!==t[e]&&(this.gl.disable(e),t[e]=!1)}setFlipSided(e){if(this.currentFlipSided!==e){const{gl:t}=this;e?t.frontFace(t.CW):t.frontFace(t.CCW),this.currentFlipSided=e}}setCullFace(e){const{gl:t}=this;e!==wt?(this.enable(t.CULL_FACE),e!==this.currentCullFace&&(e===At?t.cullFace(t.BACK):e===Rt?t.cullFace(t.FRONT):t.cullFace(t.FRONT_AND_BACK))):this.disable(t.CULL_FACE),this.currentCullFace=e}setLineWidth(e){const{currentLineWidth:t,gl:r}=this;e!==t&&(r.lineWidth(e),this.currentLineWidth=e)}setBlending(e,t,r,s,i,n,o,a){const{gl:u}=this;if(e!==G){if(!1===this.currentBlendingEnabled&&(this.enable(u.BLEND),this.currentBlendingEnabled=!0),e===qe)i=i||t,n=n||r,o=o||s,t===this.currentBlendEquation&&i===this.currentBlendEquationAlpha||(u.blendEquationSeparate(Cv[t],Cv[i]),this.currentBlendEquation=t,this.currentBlendEquationAlpha=i),r===this.currentBlendSrc&&s===this.currentBlendDst&&n===this.currentBlendSrcAlpha&&o===this.currentBlendDstAlpha||(u.blendFuncSeparate(Mv[r],Mv[s],Mv[n],Mv[o]),this.currentBlendSrc=r,this.currentBlendDst=s,this.currentBlendSrcAlpha=n,this.currentBlendDstAlpha=o),this.currentBlending=e,this.currentPremultipledAlpha=!1;else if(e!==this.currentBlending||a!==this.currentPremultipledAlpha){if(this.currentBlendEquation===Xe&&this.currentBlendEquationAlpha===Xe||(u.blendEquation(u.FUNC_ADD),this.currentBlendEquation=Xe,this.currentBlendEquationAlpha=Xe),a)switch(e){case V:u.blendFuncSeparate(u.ONE,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Ft:u.blendFunc(u.ONE,u.ONE);break;case Mt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Ct:u.blendFuncSeparate(u.ZERO,u.SRC_COLOR,u.ZERO,u.SRC_ALPHA);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}else switch(e){case V:u.blendFuncSeparate(u.SRC_ALPHA,u.ONE_MINUS_SRC_ALPHA,u.ONE,u.ONE_MINUS_SRC_ALPHA);break;case Ft:u.blendFunc(u.SRC_ALPHA,u.ONE);break;case Mt:u.blendFuncSeparate(u.ZERO,u.ONE_MINUS_SRC_COLOR,u.ZERO,u.ONE);break;case Ct:u.blendFunc(u.ZERO,u.SRC_COLOR);break;default:console.error("THREE.WebGLState: Invalid blending: ",e)}this.currentBlendSrc=null,this.currentBlendDst=null,this.currentBlendSrcAlpha=null,this.currentBlendDstAlpha=null,this.currentBlending=e,this.currentPremultipledAlpha=a}}else!0===this.currentBlendingEnabled&&(this.disable(u.BLEND),this.currentBlendingEnabled=!1)}setColorMask(e){this.currentColorMask!==e&&(this.gl.colorMask(e,e,e,e),this.currentColorMask=e)}setDepthTest(e){const{gl:t}=this;e?this.enable(t.DEPTH_TEST):this.disable(t.DEPTH_TEST)}setDepthMask(e){this.currentDepthMask!==e&&(this.gl.depthMask(e),this.currentDepthMask=e)}setDepthFunc(e){if(this.currentDepthFunc!==e){const{gl:t}=this;switch(e){case Ot:t.depthFunc(t.NEVER);break;case Ut:t.depthFunc(t.ALWAYS);break;case Vt:t.depthFunc(t.LESS);break;case Dt:t.depthFunc(t.LEQUAL);break;case Lt:t.depthFunc(t.EQUAL);break;case It:t.depthFunc(t.GEQUAL);break;case Pt:t.depthFunc(t.GREATER);break;case Bt:t.depthFunc(t.NOTEQUAL);break;default:t.depthFunc(t.LEQUAL)}this.currentDepthFunc=e}}scissor(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentScissor.equals(i)){const{gl:e}=this;e.scissor(i.x,i.y,i.z,i.w),this.currentScissor.copy(i)}}viewport(e,t,r,s){const i=this._tempVec4.set(e,t,r,s);if(!1===this.currentViewport.equals(i)){const{gl:e}=this;e.viewport(i.x,i.y,i.z,i.w),this.currentViewport.copy(i)}}setScissorTest(e){const t=this.gl;e?t.enable(t.SCISSOR_TEST):t.disable(t.SCISSOR_TEST)}setStencilTest(e){const{gl:t}=this;e?this.enable(t.STENCIL_TEST):this.disable(t.STENCIL_TEST)}setStencilMask(e){this.currentStencilMask!==e&&(this.gl.stencilMask(e),this.currentStencilMask=e)}setStencilFunc(e,t,r){this.currentStencilFunc===e&&this.currentStencilRef===t&&this.currentStencilFuncMask===r||(this.gl.stencilFunc(e,t,r),this.currentStencilFunc=e,this.currentStencilRef=t,this.currentStencilFuncMask=r)}setStencilOp(e,t,r){this.currentStencilFail===e&&this.currentStencilZFail===t&&this.currentStencilZPass===r||(this.gl.stencilOp(e,t,r),this.currentStencilFail=e,this.currentStencilZFail=t,this.currentStencilZPass=r)}setMaterial(e,t,r){const{gl:s}=this;e.side===Se?this.disable(s.CULL_FACE):this.enable(s.CULL_FACE);let i=e.side===N;t&&(i=!i),this.setFlipSided(i),e.blending===V&&!1===e.transparent?this.setBlending(G):this.setBlending(e.blending,e.blendEquation,e.blendSrc,e.blendDst,e.blendEquationAlpha,e.blendSrcAlpha,e.blendDstAlpha,e.premultipliedAlpha),this.setDepthFunc(e.depthFunc),this.setDepthTest(e.depthTest),this.setDepthMask(e.depthWrite),this.setColorMask(e.colorWrite);const n=e.stencilWrite;if(this.setStencilTest(n),n&&(this.setStencilMask(e.stencilWriteMask),this.setStencilFunc(e.stencilFunc,e.stencilRef,e.stencilFuncMask),this.setStencilOp(e.stencilFail,e.stencilZFail,e.stencilZPass)),this.setPolygonOffset(e.polygonOffset,e.polygonOffsetFactor,e.polygonOffsetUnits),!0===e.alphaToCoverage&&this.backend.renderer.samples>1?this.enable(s.SAMPLE_ALPHA_TO_COVERAGE):this.disable(s.SAMPLE_ALPHA_TO_COVERAGE),r>0&&this.currentClippingPlanes!==r){const e=12288;for(let t=0;t<8;t++)t<r?this.enable(e+t):this.disable(e+t)}}setPolygonOffset(e,t,r){const{gl:s}=this;e?(this.enable(s.POLYGON_OFFSET_FILL),this.currentPolygonOffsetFactor===t&&this.currentPolygonOffsetUnits===r||(s.polygonOffset(t,r),this.currentPolygonOffsetFactor=t,this.currentPolygonOffsetUnits=r)):this.disable(s.POLYGON_OFFSET_FILL)}useProgram(e){return this.currentProgram!==e&&(this.gl.useProgram(e),this.currentProgram=e,!0)}setVertexState(e,t=null){const r=this.gl;return(this.currentVAO!==e||this.currentIndex!==t)&&(r.bindVertexArray(e),null!==t&&r.bindBuffer(r.ELEMENT_ARRAY_BUFFER,t),this.currentVAO=e,this.currentIndex=t,!0)}resetVertexState(){const e=this.gl;e.bindVertexArray(null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null),this.currentVAO=null,this.currentIndex=null}bindFramebuffer(e,t){const{gl:r,currentBoundFramebuffers:s}=this;return s[e]!==t&&(r.bindFramebuffer(e,t),s[e]=t,e===r.DRAW_FRAMEBUFFER&&(s[r.FRAMEBUFFER]=t),e===r.FRAMEBUFFER&&(s[r.DRAW_FRAMEBUFFER]=t),!0)}drawBuffers(e,t){const{gl:r}=this;let s=[],i=!1;if(null!==e.textures){s=this.currentDrawbuffers.get(t),void 0===s&&(s=[],this.currentDrawbuffers.set(t,s));const n=e.textures;if(s.length!==n.length||s[0]!==r.COLOR_ATTACHMENT0){for(let e=0,t=n.length;e<t;e++)s[e]=r.COLOR_ATTACHMENT0+e;s.length=n.length,i=!0}}else s[0]!==r.BACK&&(s[0]=r.BACK,i=!0);i&&r.drawBuffers(s)}activeTexture(e){const{gl:t,currentTextureSlot:r,maxTextures:s}=this;void 0===e&&(e=t.TEXTURE0+s-1),r!==e&&(t.activeTexture(e),this.currentTextureSlot=e)}bindTexture(e,t,r){const{gl:s,currentTextureSlot:i,currentBoundTextures:n,maxTextures:o}=this;void 0===r&&(r=null===i?s.TEXTURE0+o-1:i);let a=n[r];void 0===a&&(a={type:void 0,texture:void 0},n[r]=a),a.type===e&&a.texture===t||(i!==r&&(s.activeTexture(r),this.currentTextureSlot=r),s.bindTexture(e,t),a.type=e,a.texture=t)}bindBufferBase(e,t,r){const{gl:s}=this,i=`${e}-${t}`;return this.currentBoundBufferBases[i]!==r&&(s.bindBufferBase(e,t,r),this.currentBoundBufferBases[i]=r,!0)}unbindTexture(){const{gl:e,currentTextureSlot:t,currentBoundTextures:r}=this,s=r[t];void 0!==s&&void 0!==s.type&&(e.bindTexture(s.type,null),s.type=void 0,s.texture=void 0)}}class Lv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.extensions=e.extensions}convert(e,t=x){const{gl:r,extensions:s}=this;let i;if(e===Ce)return r.UNSIGNED_BYTE;if(e===Gt)return r.UNSIGNED_SHORT_4_4_4_4;if(e===kt)return r.UNSIGNED_SHORT_5_5_5_1;if(e===zt)return r.UNSIGNED_INT_5_9_9_9_REV;if(e===ot)return r.BYTE;if(e===nt)return r.SHORT;if(e===at)return r.UNSIGNED_SHORT;if(e===T)return r.INT;if(e===b)return r.UNSIGNED_INT;if(e===B)return r.FLOAT;if(e===he)return r.HALF_FLOAT;if(e===Wt)return r.ALPHA;if(e===dt)return r.RGB;if(e===ce)return r.RGBA;if(e===$t)return r.LUMINANCE;if(e===Ht)return r.LUMINANCE_ALPHA;if(e===Ae)return r.DEPTH_COMPONENT;if(e===we)return r.DEPTH_STENCIL;if(e===it)return r.RED;if(e===st)return r.RED_INTEGER;if(e===Ve)return r.RG;if(e===ut)return r.RG_INTEGER;if(e===ct)return r.RGBA_INTEGER;if(e===jt||e===qt||e===Xt||e===Kt)if(t===z){if(i=s.get("WEBGL_compressed_texture_s3tc_srgb"),null===i)return null;if(e===jt)return i.COMPRESSED_SRGB_S3TC_DXT1_EXT;if(e===qt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;if(e===Xt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;if(e===Kt)return i.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT}else{if(i=s.get("WEBGL_compressed_texture_s3tc"),null===i)return null;if(e===jt)return i.COMPRESSED_RGB_S3TC_DXT1_EXT;if(e===qt)return i.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(e===Xt)return i.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(e===Kt)return i.COMPRESSED_RGBA_S3TC_DXT5_EXT}if(e===Yt||e===Qt||e===Zt||e===Jt){if(i=s.get("WEBGL_compressed_texture_pvrtc"),null===i)return null;if(e===Yt)return i.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;if(e===Qt)return i.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;if(e===Zt)return i.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;if(e===Jt)return i.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG}if(e===er||e===tr||e===rr){if(i=s.get("WEBGL_compressed_texture_etc"),null===i)return null;if(e===er||e===tr)return t===z?i.COMPRESSED_SRGB8_ETC2:i.COMPRESSED_RGB8_ETC2;if(e===rr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:i.COMPRESSED_RGBA8_ETC2_EAC}if(e===sr||e===ir||e===nr||e===or||e===ar||e===ur||e===lr||e===dr||e===cr||e===hr||e===pr||e===gr||e===mr||e===fr){if(i=s.get("WEBGL_compressed_texture_astc"),null===i)return null;if(e===sr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR:i.COMPRESSED_RGBA_ASTC_4x4_KHR;if(e===ir)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR:i.COMPRESSED_RGBA_ASTC_5x4_KHR;if(e===nr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR:i.COMPRESSED_RGBA_ASTC_5x5_KHR;if(e===or)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR:i.COMPRESSED_RGBA_ASTC_6x5_KHR;if(e===ar)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR:i.COMPRESSED_RGBA_ASTC_6x6_KHR;if(e===ur)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR:i.COMPRESSED_RGBA_ASTC_8x5_KHR;if(e===lr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR:i.COMPRESSED_RGBA_ASTC_8x6_KHR;if(e===dr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR:i.COMPRESSED_RGBA_ASTC_8x8_KHR;if(e===cr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR:i.COMPRESSED_RGBA_ASTC_10x5_KHR;if(e===hr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR:i.COMPRESSED_RGBA_ASTC_10x6_KHR;if(e===pr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR:i.COMPRESSED_RGBA_ASTC_10x8_KHR;if(e===gr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR:i.COMPRESSED_RGBA_ASTC_10x10_KHR;if(e===mr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR:i.COMPRESSED_RGBA_ASTC_12x10_KHR;if(e===fr)return t===z?i.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR:i.COMPRESSED_RGBA_ASTC_12x12_KHR}if(e===yr){if(i=s.get("EXT_texture_compression_bptc"),null===i)return null;if(e===yr)return t===z?i.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT:i.COMPRESSED_RGBA_BPTC_UNORM_EXT}if(e===xr||e===br||e===Tr||e===_r){if(i=s.get("EXT_texture_compression_rgtc"),null===i)return null;if(e===yr)return i.COMPRESSED_RED_RGTC1_EXT;if(e===br)return i.COMPRESSED_SIGNED_RED_RGTC1_EXT;if(e===Tr)return i.COMPRESSED_RED_GREEN_RGTC2_EXT;if(e===_r)return i.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT}return e===Re?r.UNSIGNED_INT_24_8:void 0!==r[e]?r[e]:null}_clientWaitAsync(){const{gl:e}=this,t=e.fenceSync(e.SYNC_GPU_COMMANDS_COMPLETE,0);return e.flush(),new Promise(((r,s)=>{!function i(){const n=e.clientWaitSync(t,e.SYNC_FLUSH_COMMANDS_BIT,0);if(n===e.WAIT_FAILED)return e.deleteSync(t),void s();n!==e.TIMEOUT_EXPIRED?(e.deleteSync(t),r()):requestAnimationFrame(i)}()}))}}let Dv,Vv,Uv,Ov=!1;class Gv{constructor(e){this.backend=e,this.gl=e.gl,this.extensions=e.extensions,this.defaultTextures={},!1===Ov&&(this._init(),Ov=!0)}_init(){const e=this.gl;Dv={[Sr]:e.REPEAT,[Nr]:e.CLAMP_TO_EDGE,[vr]:e.MIRRORED_REPEAT},Vv={[_]:e.NEAREST,[Er]:e.NEAREST_MIPMAP_NEAREST,[ke]:e.NEAREST_MIPMAP_LINEAR,[q]:e.LINEAR,[Ge]:e.LINEAR_MIPMAP_NEAREST,[I]:e.LINEAR_MIPMAP_LINEAR},Uv={[Br]:e.NEVER,[Fr]:e.ALWAYS,[Le]:e.LESS,[Mr]:e.LEQUAL,[Cr]:e.EQUAL,[Rr]:e.GEQUAL,[Ar]:e.GREATER,[wr]:e.NOTEQUAL}}getGLTextureType(e){const{gl:t}=this;let r;return r=!0===e.isCubeTexture?t.TEXTURE_CUBE_MAP:!0===e.isDataArrayTexture||!0===e.isCompressedArrayTexture?t.TEXTURE_2D_ARRAY:!0===e.isData3DTexture?t.TEXTURE_3D:t.TEXTURE_2D,r}getInternalFormat(e,t,r,s,i=!1){const{gl:n,extensions:o}=this;if(null!==e){if(void 0!==n[e])return n[e];console.warn("THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format '"+e+"'")}let a=t;return t===n.RED&&(r===n.FLOAT&&(a=n.R32F),r===n.HALF_FLOAT&&(a=n.R16F),r===n.UNSIGNED_BYTE&&(a=n.R8),r===n.UNSIGNED_SHORT&&(a=n.R16),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RED_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.R8UI),r===n.UNSIGNED_SHORT&&(a=n.R16UI),r===n.UNSIGNED_INT&&(a=n.R32UI),r===n.BYTE&&(a=n.R8I),r===n.SHORT&&(a=n.R16I),r===n.INT&&(a=n.R32I)),t===n.RG&&(r===n.FLOAT&&(a=n.RG32F),r===n.HALF_FLOAT&&(a=n.RG16F),r===n.UNSIGNED_BYTE&&(a=n.RG8),r===n.UNSIGNED_SHORT&&(a=n.RG16),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RG_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RG8UI),r===n.UNSIGNED_SHORT&&(a=n.RG16UI),r===n.UNSIGNED_INT&&(a=n.RG32UI),r===n.BYTE&&(a=n.RG8I),r===n.SHORT&&(a=n.RG16I),r===n.INT&&(a=n.RG32I)),t===n.RGB&&(r===n.FLOAT&&(a=n.RGB32F),r===n.HALF_FLOAT&&(a=n.RGB16F),r===n.UNSIGNED_BYTE&&(a=n.RGB8),r===n.UNSIGNED_SHORT&&(a=n.RGB16),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I),r===n.UNSIGNED_BYTE&&(a=s===z&&!1===i?n.SRGB8:n.RGB8),r===n.UNSIGNED_SHORT_5_6_5&&(a=n.RGB565),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGB4),r===n.UNSIGNED_INT_5_9_9_9_REV&&(a=n.RGB9_E5)),t===n.RGB_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGB8UI),r===n.UNSIGNED_SHORT&&(a=n.RGB16UI),r===n.UNSIGNED_INT&&(a=n.RGB32UI),r===n.BYTE&&(a=n.RGB8I),r===n.SHORT&&(a=n.RGB16I),r===n.INT&&(a=n.RGB32I)),t===n.RGBA&&(r===n.FLOAT&&(a=n.RGBA32F),r===n.HALF_FLOAT&&(a=n.RGBA16F),r===n.UNSIGNED_BYTE&&(a=n.RGBA8),r===n.UNSIGNED_SHORT&&(a=n.RGBA16),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I),r===n.UNSIGNED_BYTE&&(a=s===z&&!1===i?n.SRGB8_ALPHA8:n.RGBA8),r===n.UNSIGNED_SHORT_4_4_4_4&&(a=n.RGBA4),r===n.UNSIGNED_SHORT_5_5_5_1&&(a=n.RGB5_A1)),t===n.RGBA_INTEGER&&(r===n.UNSIGNED_BYTE&&(a=n.RGBA8UI),r===n.UNSIGNED_SHORT&&(a=n.RGBA16UI),r===n.UNSIGNED_INT&&(a=n.RGBA32UI),r===n.BYTE&&(a=n.RGBA8I),r===n.SHORT&&(a=n.RGBA16I),r===n.INT&&(a=n.RGBA32I)),t===n.DEPTH_COMPONENT&&(r===n.UNSIGNED_SHORT&&(a=n.DEPTH_COMPONENT16),r===n.UNSIGNED_INT&&(a=n.DEPTH_COMPONENT24),r===n.FLOAT&&(a=n.DEPTH_COMPONENT32F)),t===n.DEPTH_STENCIL&&r===n.UNSIGNED_INT_24_8&&(a=n.DEPTH24_STENCIL8),a!==n.R16F&&a!==n.R32F&&a!==n.RG16F&&a!==n.RG32F&&a!==n.RGBA16F&&a!==n.RGBA32F||o.get("EXT_color_buffer_float"),a}setTextureParameters(e,t){const{gl:r,extensions:s,backend:i}=this;r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,t.flipY),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),r.pixelStorei(r.UNPACK_ALIGNMENT,t.unpackAlignment),r.pixelStorei(r.UNPACK_COLORSPACE_CONVERSION_WEBGL,r.NONE),r.texParameteri(e,r.TEXTURE_WRAP_S,Dv[t.wrapS]),r.texParameteri(e,r.TEXTURE_WRAP_T,Dv[t.wrapT]),e!==r.TEXTURE_3D&&e!==r.TEXTURE_2D_ARRAY||r.texParameteri(e,r.TEXTURE_WRAP_R,Dv[t.wrapR]),r.texParameteri(e,r.TEXTURE_MAG_FILTER,Vv[t.magFilter]);const n=void 0!==t.mipmaps&&t.mipmaps.length>0,o=t.minFilter===q&&n?I:t.minFilter;if(r.texParameteri(e,r.TEXTURE_MIN_FILTER,Vv[o]),t.compareFunction&&(r.texParameteri(e,r.TEXTURE_COMPARE_MODE,r.COMPARE_REF_TO_TEXTURE),r.texParameteri(e,r.TEXTURE_COMPARE_FUNC,Uv[t.compareFunction])),!0===s.has("EXT_texture_filter_anisotropic")){if(t.magFilter===_)return;if(t.minFilter!==ke&&t.minFilter!==I)return;if(t.type===B&&!1===s.has("OES_texture_float_linear"))return;if(t.anisotropy>1){const n=s.get("EXT_texture_filter_anisotropic");r.texParameterf(e,n.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(t.anisotropy,i.getMaxAnisotropy()))}}}createDefaultTexture(e){const{gl:t,backend:r,defaultTextures:s}=this,i=this.getGLTextureType(e);let n=s[i];void 0===n&&(n=t.createTexture(),r.state.bindTexture(i,n),t.texParameteri(i,t.TEXTURE_MIN_FILTER,t.NEAREST),t.texParameteri(i,t.TEXTURE_MAG_FILTER,t.NEAREST),s[i]=n),r.set(e,{textureGPU:n,glTextureType:i,isDefault:!0})}createTexture(e,t){const{gl:r,backend:s}=this,{levels:i,width:n,height:o,depth:a}=t,u=s.utils.convert(e.format,e.colorSpace),l=s.utils.convert(e.type),d=this.getInternalFormat(e.internalFormat,u,l,e.colorSpace,e.isVideoTexture),c=r.createTexture(),h=this.getGLTextureType(e);s.state.bindTexture(h,c),this.setTextureParameters(h,e),e.isDataArrayTexture||e.isCompressedArrayTexture?r.texStorage3D(r.TEXTURE_2D_ARRAY,i,d,n,o,a):e.isData3DTexture?r.texStorage3D(r.TEXTURE_3D,i,d,n,o,a):e.isVideoTexture||r.texStorage2D(h,i,d,n,o),s.set(e,{textureGPU:c,glTextureType:h,glFormat:u,glType:l,glInternalFormat:d})}copyBufferToTexture(e,t){const{gl:r,backend:s}=this,{textureGPU:i,glTextureType:n,glFormat:o,glType:a}=s.get(t),{width:u,height:l}=t.source.data;r.bindBuffer(r.PIXEL_UNPACK_BUFFER,e),s.state.bindTexture(n,i),r.pixelStorei(r.UNPACK_FLIP_Y_WEBGL,!1),r.pixelStorei(r.UNPACK_PREMULTIPLY_ALPHA_WEBGL,!1),r.texSubImage2D(n,0,0,0,u,l,o,a,0),r.bindBuffer(r.PIXEL_UNPACK_BUFFER,null),s.state.unbindTexture()}updateTexture(e,t){const{gl:r}=this,{width:s,height:i}=t,{textureGPU:n,glTextureType:o,glFormat:a,glType:u,glInternalFormat:l}=this.backend.get(e);if(e.isRenderTargetTexture||void 0===n)return;const d=e=>e.isDataTexture?e.image.data:"undefined"!=typeof HTMLImageElement&&e instanceof HTMLImageElement||"undefined"!=typeof HTMLCanvasElement&&e instanceof HTMLCanvasElement||"undefined"!=typeof ImageBitmap&&e instanceof ImageBitmap||e instanceof OffscreenCanvas?e:e.data;if(this.backend.state.bindTexture(o,n),this.setTextureParameters(o,e),e.isCompressedTexture){const s=e.mipmaps,i=t.image;for(let t=0;t<s.length;t++){const n=s[t];e.isCompressedArrayTexture?e.format!==r.RGBA?null!==a?r.compressedTexSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,n.data):console.warn("THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()"):r.texSubImage3D(r.TEXTURE_2D_ARRAY,t,0,0,0,n.width,n.height,i.depth,a,u,n.data):null!==a?r.compressedTexSubImage2D(r.TEXTURE_2D,t,0,0,n.width,n.height,a,n.data):console.warn("Unsupported compressed texture format")}}else if(e.isCubeTexture){const e=t.images;for(let t=0;t<6;t++){const n=d(e[t]);r.texSubImage2D(r.TEXTURE_CUBE_MAP_POSITIVE_X+t,0,0,0,s,i,a,u,n)}}else if(e.isDataArrayTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_2D_ARRAY,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isData3DTexture){const e=t.image;r.texSubImage3D(r.TEXTURE_3D,0,0,0,0,e.width,e.height,e.depth,a,u,e.data)}else if(e.isVideoTexture)e.update(),r.texImage2D(o,0,l,a,u,t.image);else{const e=d(t.image);r.texSubImage2D(o,0,0,0,s,i,a,u,e)}}generateMipmaps(e){const{gl:t,backend:r}=this,{textureGPU:s,glTextureType:i}=r.get(e);r.state.bindTexture(i,s),t.generateMipmap(i)}deallocateRenderBuffers(e){const{gl:t,backend:r}=this;if(e){const s=r.get(e);if(s.renderBufferStorageSetup=void 0,s.framebuffers){for(const e in s.framebuffers)t.deleteFramebuffer(s.framebuffers[e]);delete s.framebuffers}if(s.depthRenderbuffer&&(t.deleteRenderbuffer(s.depthRenderbuffer),delete s.depthRenderbuffer),s.stencilRenderbuffer&&(t.deleteRenderbuffer(s.stencilRenderbuffer),delete s.stencilRenderbuffer),s.msaaFrameBuffer&&(t.deleteFramebuffer(s.msaaFrameBuffer),delete s.msaaFrameBuffer),s.msaaRenderbuffers){for(let e=0;e<s.msaaRenderbuffers.length;e++)t.deleteRenderbuffer(s.msaaRenderbuffers[e]);delete s.msaaRenderbuffers}}}destroyTexture(e){const{gl:t,backend:r}=this,{textureGPU:s,renderTarget:i}=r.get(e);this.deallocateRenderBuffers(i),t.deleteTexture(s),r.delete(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){const{gl:o,backend:a}=this,{state:u}=this.backend,{textureGPU:l,glTextureType:d,glType:c,glFormat:h}=a.get(t);let p,g,m,f,y,x,b,T,_;u.bindTexture(d,l);const v=e.isCompressedTexture?e.mipmaps[n]:e.image;if(null!==r)p=r.max.x-r.min.x,g=r.max.y-r.min.y,m=r.isBox3?r.max.z-r.min.z:1,f=r.min.x,y=r.min.y,x=r.isBox3?r.min.z:0;else{const t=Math.pow(2,-i);p=Math.floor(v.width*t),g=Math.floor(v.height*t),m=e.isDataArrayTexture?v.depth:e.isData3DTexture?Math.floor(v.depth*t):1,f=0,y=0,x=0}null!==s?(b=s.x,T=s.y,_=s.z):(b=0,T=0,_=0),o.pixelStorei(o.UNPACK_FLIP_Y_WEBGL,t.flipY),o.pixelStorei(o.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t.premultiplyAlpha),o.pixelStorei(o.UNPACK_ALIGNMENT,t.unpackAlignment);const N=o.getParameter(o.UNPACK_ROW_LENGTH),S=o.getParameter(o.UNPACK_IMAGE_HEIGHT),E=o.getParameter(o.UNPACK_SKIP_PIXELS),w=o.getParameter(o.UNPACK_SKIP_ROWS),A=o.getParameter(o.UNPACK_SKIP_IMAGES);o.pixelStorei(o.UNPACK_ROW_LENGTH,v.width),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,v.height),o.pixelStorei(o.UNPACK_SKIP_PIXELS,f),o.pixelStorei(o.UNPACK_SKIP_ROWS,y),o.pixelStorei(o.UNPACK_SKIP_IMAGES,x);const R=t.isDataArrayTexture||t.isData3DTexture;if(e.isRenderTargetTexture||e.isDepthTexture){const r=a.get(e),s=a.get(t),i=a.get(r.renderTarget),n=a.get(s.renderTarget),l=i.framebuffers[r.cacheKey],d=n.framebuffers[s.cacheKey];u.bindFramebuffer(o.READ_FRAMEBUFFER,l),u.bindFramebuffer(o.DRAW_FRAMEBUFFER,d);let c=o.COLOR_BUFFER_BIT;e.isDepthTexture&&(c=o.DEPTH_BUFFER_BIT),o.blitFramebuffer(f,y,p,g,b,T,p,g,c,o.NEAREST),u.bindFramebuffer(o.READ_FRAMEBUFFER,null),u.bindFramebuffer(o.DRAW_FRAMEBUFFER,null)}else R?e.isDataTexture||e.isData3DTexture?o.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v.data):t.isCompressedArrayTexture?o.compressedTexSubImage3D(d,n,b,T,_,p,g,m,h,v.data):o.texSubImage3D(d,n,b,T,_,p,g,m,h,c,v):e.isDataTexture?o.texSubImage2D(d,n,b,T,p,g,h,c,v.data):e.isCompressedTexture?o.compressedTexSubImage2D(d,n,b,T,v.width,v.height,h,v.data):o.texSubImage2D(d,n,b,T,p,g,h,c,v);o.pixelStorei(o.UNPACK_ROW_LENGTH,N),o.pixelStorei(o.UNPACK_IMAGE_HEIGHT,S),o.pixelStorei(o.UNPACK_SKIP_PIXELS,E),o.pixelStorei(o.UNPACK_SKIP_ROWS,w),o.pixelStorei(o.UNPACK_SKIP_IMAGES,A),0===n&&t.generateMipmaps&&o.generateMipmap(d),u.unbindTexture()}copyFramebufferToTexture(e,t,r){const{gl:s}=this,{state:i}=this.backend,{textureGPU:n}=this.backend.get(e),{x:o,y:a,z:u,w:l}=r,d=!0===e.isDepthTexture||t.renderTarget&&t.renderTarget.samples>0,c=t.renderTarget?t.renderTarget.height:this.backend.getDrawingBufferSize().y;if(d){const r=0!==o||0!==a;let d,h;if(!0===e.isDepthTexture?(d=s.DEPTH_BUFFER_BIT,h=s.DEPTH_ATTACHMENT,t.stencil&&(d|=s.STENCIL_BUFFER_BIT)):(d=s.COLOR_BUFFER_BIT,h=s.COLOR_ATTACHMENT0),r){const e=this.backend.get(t.renderTarget),r=e.framebuffers[t.getCacheKey()],h=e.msaaFrameBuffer;i.bindFramebuffer(s.DRAW_FRAMEBUFFER,r),i.bindFramebuffer(s.READ_FRAMEBUFFER,h);const p=c-a-l;s.blitFramebuffer(o,p,o+u,p+l,o,p,o+u,p+l,d,s.NEAREST),i.bindFramebuffer(s.READ_FRAMEBUFFER,r),i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,p,u,l),i.unbindTexture()}else{const e=s.createFramebuffer();i.bindFramebuffer(s.DRAW_FRAMEBUFFER,e),s.framebufferTexture2D(s.DRAW_FRAMEBUFFER,h,s.TEXTURE_2D,n,0),s.blitFramebuffer(0,0,u,l,0,0,u,l,d,s.NEAREST),s.deleteFramebuffer(e)}}else i.bindTexture(s.TEXTURE_2D,n),s.copyTexSubImage2D(s.TEXTURE_2D,0,0,0,o,c-l-a,u,l),i.unbindTexture();e.generateMipmaps&&this.generateMipmaps(e),this.backend._setFramebuffer(t)}setupRenderBufferStorage(e,t,r,s=!1){const{gl:i}=this,n=t.renderTarget,{depthTexture:o,depthBuffer:a,stencilBuffer:u,width:l,height:d}=n;if(i.bindRenderbuffer(i.RENDERBUFFER,e),a&&!u){let t=i.DEPTH_COMPONENT24;if(!0===s){this.extensions.get("WEBGL_multisampled_render_to_texture").renderbufferStorageMultisampleEXT(i.RENDERBUFFER,n.samples,t,l,d)}else r>0?(o&&o.isDepthTexture&&o.type===i.FLOAT&&(t=i.DEPTH_COMPONENT32F),i.renderbufferStorageMultisample(i.RENDERBUFFER,r,t,l,d)):i.renderbufferStorage(i.RENDERBUFFER,t,l,d);i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_ATTACHMENT,i.RENDERBUFFER,e)}else a&&u&&(r>0?i.renderbufferStorageMultisample(i.RENDERBUFFER,r,i.DEPTH24_STENCIL8,l,d):i.renderbufferStorage(i.RENDERBUFFER,i.DEPTH_STENCIL,l,d),i.framebufferRenderbuffer(i.FRAMEBUFFER,i.DEPTH_STENCIL_ATTACHMENT,i.RENDERBUFFER,e))}async copyTextureToBuffer(e,t,r,s,i,n){const{backend:o,gl:a}=this,{textureGPU:u,glFormat:l,glType:d}=this.backend.get(e),c=a.createFramebuffer();a.bindFramebuffer(a.READ_FRAMEBUFFER,c);const h=e.isCubeTexture?a.TEXTURE_CUBE_MAP_POSITIVE_X+n:a.TEXTURE_2D;a.framebufferTexture2D(a.READ_FRAMEBUFFER,a.COLOR_ATTACHMENT0,h,u,0);const p=this._getTypedArrayType(d),g=s*i*this._getBytesPerTexel(d,l),m=a.createBuffer();a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.bufferData(a.PIXEL_PACK_BUFFER,g,a.STREAM_READ),a.readPixels(t,r,s,i,l,d,0),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),await o.utils._clientWaitAsync();const f=new p(g/p.BYTES_PER_ELEMENT);return a.bindBuffer(a.PIXEL_PACK_BUFFER,m),a.getBufferSubData(a.PIXEL_PACK_BUFFER,0,f),a.bindBuffer(a.PIXEL_PACK_BUFFER,null),a.deleteFramebuffer(c),f}_getTypedArrayType(e){const{gl:t}=this;if(e===t.UNSIGNED_BYTE)return Uint8Array;if(e===t.UNSIGNED_SHORT_4_4_4_4)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_5_5_1)return Uint16Array;if(e===t.UNSIGNED_SHORT_5_6_5)return Uint16Array;if(e===t.UNSIGNED_SHORT)return Uint16Array;if(e===t.UNSIGNED_INT)return Uint32Array;if(e===t.HALF_FLOAT)return Uint16Array;if(e===t.FLOAT)return Float32Array;throw new Error(`Unsupported WebGL type: ${e}`)}_getBytesPerTexel(e,t){const{gl:r}=this;let s=0;return e===r.UNSIGNED_BYTE&&(s=1),e!==r.UNSIGNED_SHORT_4_4_4_4&&e!==r.UNSIGNED_SHORT_5_5_5_1&&e!==r.UNSIGNED_SHORT_5_6_5&&e!==r.UNSIGNED_SHORT&&e!==r.HALF_FLOAT||(s=2),e!==r.UNSIGNED_INT&&e!==r.FLOAT||(s=4),t===r.RGBA?4*s:t===r.RGB?3*s:t===r.ALPHA?s:void 0}}class kv{constructor(e){this.backend=e,this.gl=this.backend.gl,this.availableExtensions=this.gl.getSupportedExtensions(),this.extensions={}}get(e){let t=this.extensions[e];return void 0===t&&(t=this.gl.getExtension(e),this.extensions[e]=t),t}has(e){return this.availableExtensions.includes(e)}}class zv{constructor(e){this.backend=e,this.maxAnisotropy=null}getMaxAnisotropy(){if(null!==this.maxAnisotropy)return this.maxAnisotropy;const e=this.backend.gl,t=this.backend.extensions;if(!0===t.has("EXT_texture_filter_anisotropic")){const r=t.get("EXT_texture_filter_anisotropic");this.maxAnisotropy=e.getParameter(r.MAX_TEXTURE_MAX_ANISOTROPY_EXT)}else this.maxAnisotropy=0;return this.maxAnisotropy}}const Wv={WEBGL_multi_draw:"WEBGL_multi_draw",WEBGL_compressed_texture_astc:"texture-compression-astc",WEBGL_compressed_texture_etc:"texture-compression-etc2",WEBGL_compressed_texture_etc1:"texture-compression-etc1",WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBKIT_WEBGL_compressed_texture_pvrtc:"texture-compression-pvrtc",WEBGL_compressed_texture_s3tc:"texture-compression-bc",EXT_texture_compression_bptc:"texture-compression-bptc",EXT_disjoint_timer_query_webgl2:"timestamp-query"};class $v{constructor(e){this.gl=e.gl,this.extensions=e.extensions,this.info=e.renderer.info,this.mode=null,this.index=0,this.type=null,this.object=null}render(e,t){const{gl:r,mode:s,object:i,type:n,info:o,index:a}=this;0!==a?r.drawElements(s,t,n,e):r.drawArrays(s,e,t),o.update(i,t,1)}renderInstances(e,t,r){const{gl:s,mode:i,type:n,index:o,object:a,info:u}=this;0!==r&&(0!==o?s.drawElementsInstanced(i,t,n,e,r):s.drawArraysInstanced(i,e,t,r),u.update(a,t,r))}renderMultiDraw(e,t,r){const{extensions:s,mode:i,object:n,info:o}=this;if(0===r)return;const a=s.get("WEBGL_multi_draw");if(null===a)for(let s=0;s<r;s++)this.render(e[s],t[s]);else{0!==this.index?a.multiDrawElementsWEBGL(i,t,0,this.type,e,0,r):a.multiDrawArraysWEBGL(i,e,0,t,0,r);let s=0;for(let e=0;e<r;e++)s+=t[e];o.update(n,s,1)}}renderMultiDrawInstances(e,t,r,s){const{extensions:i,mode:n,object:o,info:a}=this;if(0===r)return;const u=i.get("WEBGL_multi_draw");if(null===u)for(let i=0;i<r;i++)this.renderInstances(e[i],t[i],s[i]);else{0!==this.index?u.multiDrawElementsInstancedWEBGL(n,t,0,this.type,e,0,s,0,r):u.multiDrawArraysInstancedWEBGL(n,e,0,t,0,s,0,r);let i=0;for(let e=0;e<r;e++)i+=t[e]*s[e];a.update(o,i,1)}}}class Hv{constructor(e=256){this.trackTimestamp=!0,this.maxQueries=e,this.currentQueryIndex=0,this.queryOffsets=new Map,this.isDisposed=!1,this.lastValue=0,this.pendingResolve=!1}allocateQueriesForContext(){}async resolveQueriesAsync(){}dispose(){}}class jv extends Hv{constructor(e,t,r=2048){if(super(r),this.gl=e,this.type=t,this.ext=e.getExtension("EXT_disjoint_timer_query_webgl2")||e.getExtension("EXT_disjoint_timer_query"),!this.ext)return console.warn("EXT_disjoint_timer_query not supported; timestamps will be disabled."),void(this.trackTimestamp=!1);this.queries=[];for(let t=0;t<this.maxQueries;t++)this.queries.push(e.createQuery());this.activeQuery=null,this.queryStates=new Map}allocateQueriesForContext(e){if(!this.trackTimestamp)return null;if(this.currentQueryIndex+2>this.maxQueries)return ht(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryStates.set(t,"inactive"),this.queryOffsets.set(e.id,t),t}beginQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null==t)return;if(null!==this.activeQuery)return;const r=this.queries[t];if(r)try{"inactive"===this.queryStates.get(t)&&(this.gl.beginQuery(this.ext.TIME_ELAPSED_EXT,r),this.activeQuery=t,this.queryStates.set(t,"started"))}catch(e){console.error("Error in beginQuery:",e),this.activeQuery=null,this.queryStates.set(t,"inactive")}}endQuery(e){if(!this.trackTimestamp||this.isDisposed)return;const t=this.queryOffsets.get(e.id);if(null!=t&&this.activeQuery===t)try{this.gl.endQuery(this.ext.TIME_ELAPSED_EXT),this.queryStates.set(t,"ended"),this.activeQuery=null}catch(e){console.error("Error in endQuery:",e),this.queryStates.set(t,"inactive"),this.activeQuery=null}}async resolveQueriesAsync(){if(!this.trackTimestamp||this.pendingResolve)return this.lastValue;this.pendingResolve=!0;try{const e=[];for(const[t,r]of this.queryStates)if("ended"===r){const r=this.queries[t];e.push(this.resolveQuery(r))}if(0===e.length)return this.lastValue;const t=(await Promise.all(e)).reduce(((e,t)=>e+t),0);return this.lastValue=t,this.currentQueryIndex=0,this.queryOffsets.clear(),this.queryStates.clear(),this.activeQuery=null,t}catch(e){return console.error("Error resolving queries:",e),this.lastValue}finally{this.pendingResolve=!1}}async resolveQuery(e){return new Promise((t=>{if(this.isDisposed)return void t(this.lastValue);let r,s=!1;const i=e=>{s||(s=!0,r&&(clearTimeout(r),r=null),t(e))},n=()=>{if(this.isDisposed)i(this.lastValue);else try{if(this.gl.getParameter(this.ext.GPU_DISJOINT_EXT))return void i(this.lastValue);if(!this.gl.getQueryParameter(e,this.gl.QUERY_RESULT_AVAILABLE))return void(r=setTimeout(n,1));const s=this.gl.getQueryParameter(e,this.gl.QUERY_RESULT);t(Number(s)/1e6)}catch(e){console.error("Error checking query:",e),t(this.lastValue)}};n()}))}dispose(){if(!this.isDisposed&&(this.isDisposed=!0,this.trackTimestamp)){for(const e of this.queries)this.gl.deleteQuery(e);this.queries=[],this.queryStates.clear(),this.queryOffsets.clear(),this.lastValue=0,this.activeQuery=null}}}class qv extends Rv{constructor(e={}){super(e),this.isWebGLBackend=!0,this.attributeUtils=null,this.extensions=null,this.capabilities=null,this.textureUtils=null,this.bufferRenderer=null,this.gl=null,this.state=null,this.utils=null,this.vaoCache={},this.transformFeedbackCache={},this.discard=!1,this.disjoint=null,this.parallel=null,this._currentContext=null,this._knownBindings=new WeakSet,this._supportsInvalidateFramebuffer="undefined"!=typeof navigator&&/OculusBrowser/g.test(navigator.userAgent),this._xrFramebuffer=null}init(e){super.init(e);const t=this.parameters,r={antialias:e.samples>0,alpha:!0,depth:e.depth,stencil:e.stencil},s=void 0!==t.context?t.context:e.domElement.getContext("webgl2",r);function i(t){t.preventDefault();const r={api:"WebGL",message:t.statusMessage||"Unknown reason",reason:null,originalEvent:t};e.onDeviceLost(r)}this._onContextLost=i,e.domElement.addEventListener("webglcontextlost",i,!1),this.gl=s,this.extensions=new kv(this),this.capabilities=new zv(this),this.attributeUtils=new Pv(this),this.textureUtils=new Gv(this),this.bufferRenderer=new $v(this),this.state=new Iv(this),this.utils=new Lv(this),this.extensions.get("EXT_color_buffer_float"),this.extensions.get("WEBGL_clip_cull_distance"),this.extensions.get("OES_texture_float_linear"),this.extensions.get("EXT_color_buffer_half_float"),this.extensions.get("WEBGL_multisampled_render_to_texture"),this.extensions.get("WEBGL_render_shared_exponent"),this.extensions.get("WEBGL_multi_draw"),this.disjoint=this.extensions.get("EXT_disjoint_timer_query_webgl2"),this.parallel=this.extensions.get("KHR_parallel_shader_compile")}get coordinateSystem(){return l}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}async waitForGPU(){await this.utils._clientWaitAsync()}async makeXRCompatible(){!0!==this.gl.getContextAttributes().xrCompatible&&await this.gl.makeXRCompatible()}setXRTarget(e){this._xrFramebuffer=e}setXRRenderTargetTextures(e,t,r=null){const s=this.gl;if(this.set(e.texture,{textureGPU:t,glInternalFormat:s.RGBA8}),null!==r){const t=e.stencilBuffer?s.DEPTH24_STENCIL8:s.DEPTH_COMPONENT24;this.set(e.depthTexture,{textureGPU:r,glInternalFormat:t}),!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&e.autoAllocateDepthBuffer&&console.warn("THREE.WebGLBackend: Render-to-texture extension was disabled because an external texture was provided"),e.autoAllocateDepthBuffer=!1}}initTimestampQuery(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t]||(this.timestampQueryPool[t]=new jv(this.gl,t,2048));const r=this.timestampQueryPool[t];null!==r.allocateQueriesForContext(e)&&r.beginQuery(e)}prepareTimestampBuffer(e){if(!this.disjoint||!this.trackTimestamp)return;const t=e.isComputeNode?"compute":"render";this.timestampQueryPool[t].endQuery(e)}getContext(){return this.gl}beginRender(e){const{state:t,gl:r}=this,s=this.get(e);if(e.viewport?this.updateViewport(e):t.viewport(0,0,r.drawingBufferWidth,r.drawingBufferHeight),e.scissor){const{x:r,y:s,width:i,height:n}=e.scissorValue;t.scissor(r,e.height-n-s,i,n)}this.initTimestampQuery(e),s.previousContext=this._currentContext,this._currentContext=e,this._setFramebuffer(e),this.clear(e.clearColor,e.clearDepth,e.clearStencil,e,!1);const i=e.occlusionQueryCount;i>0&&(s.currentOcclusionQueries=s.occlusionQueries,s.currentOcclusionQueryObjects=s.occlusionQueryObjects,s.lastOcclusionObject=null,s.occlusionQueries=new Array(i),s.occlusionQueryObjects=new Array(i),s.occlusionQueryIndex=0)}finishRender(e){const{gl:t,state:r}=this,s=this.get(e),i=s.previousContext;r.resetVertexState();const n=e.occlusionQueryCount;n>0&&(n>s.occlusionQueryIndex&&t.endQuery(t.ANY_SAMPLES_PASSED),this.resolveOccludedAsync(e));const o=e.textures;if(null!==o)for(let e=0;e<o.length;e++){const t=o[e];t.generateMipmaps&&this.generateMipmaps(t)}if(this._currentContext=i,null!==e.textures&&e.renderTarget){const s=this.get(e.renderTarget),{samples:i}=e.renderTarget;if(i>0&&!1===this._useMultisampledRTT(e.renderTarget)){const i=s.framebuffers[e.getCacheKey()],n=t.COLOR_BUFFER_BIT,o=s.msaaFrameBuffer,a=e.textures;r.bindFramebuffer(t.READ_FRAMEBUFFER,o),r.bindFramebuffer(t.DRAW_FRAMEBUFFER,i);for(let r=0;r<a.length;r++)if(e.scissor){const{x:r,y:i,width:o,height:a}=e.scissorValue,u=e.height-a-i;t.blitFramebuffer(r,u,r+o,u+a,r,u,r+o,u+a,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateSubFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray,r,u,o,a)}else t.blitFramebuffer(0,0,e.width,e.height,0,0,e.width,e.height,n,t.NEAREST),!0===this._supportsInvalidateFramebuffer&&t.invalidateFramebuffer(t.READ_FRAMEBUFFER,s.invalidationArray)}}null!==i&&(this._setFramebuffer(i),i.viewport?this.updateViewport(i):r.viewport(0,0,t.drawingBufferWidth,t.drawingBufferHeight)),this.prepareTimestampBuffer(e)}resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueries:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet,{gl:i}=this;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueries=null;const n=()=>{let o=0;for(let t=0;t<r.length;t++){const n=r[t];null!==n&&(i.getQueryParameter(n,i.QUERY_RESULT_AVAILABLE)&&(0===i.getQueryParameter(n,i.QUERY_RESULT)&&e.add(s[t]),r[t]=null,i.deleteQuery(n),o++))}o<r.length?requestAnimationFrame(n):t.occluded=e};n()}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}updateViewport(e){const{state:t}=this,{x:r,y:s,width:i,height:n}=e.viewportValue;t.viewport(r,e.height-n-s,i,n)}setScissorTest(e){this.state.setScissorTest(e)}getClearColor(){const e=super.getClearColor();return e.r*=e.a,e.g*=e.a,e.b*=e.a,e}clear(e,t,r,s=null,i=!0){const{gl:n,renderer:o}=this;if(null===s){s={textures:null,clearColorValue:this.getClearColor()}}let a=0;if(e&&(a|=n.COLOR_BUFFER_BIT),t&&(a|=n.DEPTH_BUFFER_BIT),r&&(a|=n.STENCIL_BUFFER_BIT),0!==a){let u;u=s.clearColorValue?s.clearColorValue:this.getClearColor();const l=o.getClearDepth(),d=o.getClearStencil();if(t&&this.state.setDepthMask(!0),null===s.textures)n.clearColor(u.r,u.g,u.b,u.a),n.clear(a);else{if(i&&this._setFramebuffer(s),e)for(let e=0;e<s.textures.length;e++)0===e?n.clearBufferfv(n.COLOR,e,[u.r,u.g,u.b,u.a]):n.clearBufferfv(n.COLOR,e,[0,0,0,1]);t&&r?n.clearBufferfi(n.DEPTH_STENCIL,0,l,d):t?n.clearBufferfv(n.DEPTH,0,[l]):r&&n.clearBufferiv(n.STENCIL,0,[d])}}}beginCompute(e){const{state:t,gl:r}=this;t.bindFramebuffer(r.FRAMEBUFFER,null),this.initTimestampQuery(e)}compute(e,t,r,s){const{state:i,gl:n}=this;!1===this.discard&&(n.enable(n.RASTERIZER_DISCARD),this.discard=!0);const{programGPU:o,transformBuffers:a,attributes:u}=this.get(s),l=this._getVaoKey(u),d=this.vaoCache[l];void 0===d?this._createVao(u):i.setVertexState(d),i.useProgram(o),this._bindUniforms(r);const c=this._getTransformFeedback(a);n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,c),n.beginTransformFeedback(n.POINTS),u[0].isStorageInstancedBufferAttribute?n.drawArraysInstanced(n.POINTS,0,1,t.count):n.drawArrays(n.POINTS,0,t.count),n.endTransformFeedback(),n.bindTransformFeedback(n.TRANSFORM_FEEDBACK,null);for(let e=0;e<a.length;e++){const t=a[e];t.pbo&&this.textureUtils.copyBufferToTexture(t.transformBuffer,t.pbo),t.switchBuffers()}}finishCompute(e){const t=this.gl;this.discard=!1,t.disable(t.RASTERIZER_DISCARD),this.prepareTimestampBuffer(e),this._currentContext&&this._setFramebuffer(this._currentContext)}draw(e){const{object:t,pipeline:r,material:s,context:i,hardwareClippingPlanes:n}=e,{programGPU:o}=this.get(r),{gl:a,state:u}=this,l=this.get(i),d=e.getDrawParameters();if(null===d)return;this._bindUniforms(e.getBindings());const c=t.isMesh&&t.matrixWorld.determinant()<0;u.setMaterial(s,c,n),u.useProgram(o);const h=this.get(e);let p=h.staticVao;if(void 0===p||h.geometryId!==e.geometry.id){const t=this._getVaoKey(e.getAttributes());if(p=this.vaoCache[t],void 0===p){let t;({vaoGPU:p,staticVao:t}=this._createVao(e.getAttributes())),t&&(h.staticVao=p,h.geometryId=e.geometry.id)}}const g=e.getIndex(),m=null!==g?this.get(g).bufferGPU:null;u.setVertexState(p,m);const f=l.lastOcclusionObject;if(f!==t&&void 0!==f){if(null!==f&&!0===f.occlusionTest&&(a.endQuery(a.ANY_SAMPLES_PASSED),l.occlusionQueryIndex++),!0===t.occlusionTest){const e=a.createQuery();a.beginQuery(a.ANY_SAMPLES_PASSED,e),l.occlusionQueries[l.occlusionQueryIndex]=e,l.occlusionQueryObjects[l.occlusionQueryIndex]=t}l.lastOcclusionObject=t}const y=this.bufferRenderer;t.isPoints?y.mode=a.POINTS:t.isLineSegments?y.mode=a.LINES:t.isLine?y.mode=a.LINE_STRIP:t.isLineLoop?y.mode=a.LINE_LOOP:!0===s.wireframe?(u.setLineWidth(s.wireframeLinewidth*this.renderer.getPixelRatio()),y.mode=a.LINES):y.mode=a.TRIANGLES;const{vertexCount:x,instanceCount:b}=d;let{firstVertex:T}=d;if(y.object=t,null!==g){T*=g.array.BYTES_PER_ELEMENT;const e=this.get(g);y.index=g.count,y.type=e.type}else y.index=0;const _=()=>{t.isBatchedMesh?null!==t._multiDrawInstances?(ht("THREE.WebGLBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection."),y.renderMultiDrawInstances(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount,t._multiDrawInstances)):this.hasFeature("WEBGL_multi_draw")?y.renderMultiDraw(t._multiDrawStarts,t._multiDrawCounts,t._multiDrawCount):ht("THREE.WebGLRenderer: WEBGL_multi_draw not supported."):b>1?y.renderInstances(T,x,b):y.render(T,x)};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const r=this.get(e.camera),s=e.camera.cameras,i=e.getBindingGroup("cameraIndex").bindings[0];if(void 0===r.indexesGPU||r.indexesGPU.length!==s.length){const e=new Uint32Array([0,0,0,0]),t=[];for(let r=0,i=s.length;r<i;r++){const s=a.createBuffer();e[0]=r,a.bindBuffer(a.UNIFORM_BUFFER,s),a.bufferData(a.UNIFORM_BUFFER,e,a.STATIC_DRAW),t.push(s)}r.indexesGPU=t}const n=this.get(i),o=this.renderer.getPixelRatio();for(let i=0,l=s.length;i<l;i++){const l=s[i];if(t.layers.test(l.layers)){const t=l.viewport,s=t.x*o,d=t.y*o,c=t.width*o,h=t.height*o;u.viewport(Math.floor(s),Math.floor(e.context.height-h-d),Math.floor(c),Math.floor(h)),u.bindBufferBase(a.UNIFORM_BUFFER,n.index,r.indexesGPU[i]),_()}}}else _()}needsRenderUpdate(){return!1}getRenderCacheKey(){return""}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}createSampler(){}destroySampler(){}createNodeBuilder(e,t){return new Ev(e,t)}createProgram(e){const t=this.gl,{stage:r,code:s}=e,i="fragment"===r?t.createShader(t.FRAGMENT_SHADER):t.createShader(t.VERTEX_SHADER);t.shaderSource(i,s),t.compileShader(i),this.set(e,{shaderGPU:i})}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){const r=this.gl,s=e.pipeline,{fragmentProgram:i,vertexProgram:n}=s,o=r.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU;if(r.attachShader(o,a),r.attachShader(o,u),r.linkProgram(o),this.set(s,{programGPU:o,fragmentShader:a,vertexShader:u}),null!==t&&this.parallel){const i=new Promise((t=>{const i=this.parallel,n=()=>{r.getProgramParameter(o,i.COMPLETION_STATUS_KHR)?(this._completeCompile(e,s),t()):requestAnimationFrame(n)};n()}));t.push(i)}else this._completeCompile(e,s)}_handleSource(e,t){const r=e.split("\n"),s=[],i=Math.max(t-6,0),n=Math.min(t+6,r.length);for(let e=i;e<n;e++){const i=e+1;s.push(`${i===t?">":" "} ${i}: ${r[e]}`)}return s.join("\n")}_getShaderErrors(e,t,r){const s=e.getShaderParameter(t,e.COMPILE_STATUS),i=e.getShaderInfoLog(t).trim();if(s&&""===i)return"";const n=/ERROR: 0:(\d+)/.exec(i);if(n){const s=parseInt(n[1]);return r.toUpperCase()+"\n\n"+i+"\n\n"+this._handleSource(e.getShaderSource(t),s)}return i}_logProgramError(e,t,r){if(this.renderer.debug.checkShaderErrors){const s=this.gl,i=s.getProgramInfoLog(e).trim();if(!1===s.getProgramParameter(e,s.LINK_STATUS))if("function"==typeof this.renderer.debug.onShaderError)this.renderer.debug.onShaderError(s,e,r,t);else{const n=this._getShaderErrors(s,r,"vertex"),o=this._getShaderErrors(s,t,"fragment");console.error("THREE.WebGLProgram: Shader Error "+s.getError()+" - VALIDATE_STATUS "+s.getProgramParameter(e,s.VALIDATE_STATUS)+"\n\nProgram Info Log: "+i+"\n"+n+"\n"+o)}else""!==i&&console.warn("THREE.WebGLProgram: Program Info Log:",i)}}_completeCompile(e,t){const{state:r,gl:s}=this,i=this.get(t),{programGPU:n,fragmentShader:o,vertexShader:a}=i;!1===s.getProgramParameter(n,s.LINK_STATUS)&&this._logProgramError(n,o,a),r.useProgram(n);const u=e.getBindings();this._setupBindings(u,n),this.set(t,{programGPU:n})}createComputePipeline(e,t){const{state:r,gl:s}=this,i={stage:"fragment",code:"#version 300 es\nprecision highp float;\nvoid main() {}"};this.createProgram(i);const{computeProgram:n}=e,o=s.createProgram(),a=this.get(i).shaderGPU,u=this.get(n).shaderGPU,l=n.transforms,d=[],c=[];for(let e=0;e<l.length;e++){const t=l[e];d.push(t.varyingName),c.push(t.attributeNode)}s.attachShader(o,a),s.attachShader(o,u),s.transformFeedbackVaryings(o,d,s.SEPARATE_ATTRIBS),s.linkProgram(o),!1===s.getProgramParameter(o,s.LINK_STATUS)&&this._logProgramError(o,a,u),r.useProgram(o),this._setupBindings(t,o);const h=n.attributes,p=[],g=[];for(let e=0;e<h.length;e++){const t=h[e].node.attribute;p.push(t),this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER)}for(let e=0;e<c.length;e++){const t=c[e].attribute;this.has(t)||this.attributeUtils.createAttribute(t,s.ARRAY_BUFFER);const r=this.get(t);g.push(r)}this.set(e,{programGPU:o,transformBuffers:g,attributes:p})}createBindings(e,t){if(!1===this._knownBindings.has(t)){this._knownBindings.add(t);let e=0,r=0;for(const s of t){this.set(s,{textures:r,uniformBuffers:e});for(const t of s.bindings)t.isUniformBuffer&&e++,t.isSampledTexture&&r++}}this.updateBindings(e,t)}updateBindings(e){const{gl:t}=this,r=this.get(e);let s=r.uniformBuffers,i=r.textures;for(const r of e.bindings)if(r.isUniformsGroup||r.isUniformBuffer){const e=r.buffer,i=t.createBuffer();t.bindBuffer(t.UNIFORM_BUFFER,i),t.bufferData(t.UNIFORM_BUFFER,e,t.DYNAMIC_DRAW),this.set(r,{index:s++,bufferGPU:i})}else if(r.isSampledTexture){const{textureGPU:e,glTextureType:t}=this.get(r.texture);this.set(r,{index:i++,textureGPU:e,glTextureType:t})}}updateBinding(e){const t=this.gl;if(e.isUniformsGroup||e.isUniformBuffer){const r=this.get(e).bufferGPU,s=e.buffer;t.bindBuffer(t.UNIFORM_BUFFER,r),t.bufferData(t.UNIFORM_BUFFER,s,t.DYNAMIC_DRAW)}}createIndexAttribute(e){const t=this.gl;this.attributeUtils.createAttribute(e,t.ELEMENT_ARRAY_BUFFER)}createAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}createStorageAttribute(e){if(this.has(e))return;const t=this.gl;this.attributeUtils.createAttribute(e,t.ARRAY_BUFFER)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}hasFeature(e){const t=Object.keys(Wv).filter((t=>Wv[t]===e)),r=this.extensions;for(let e=0;e<t.length;e++)if(r.has(t[e]))return!0;return!1}getMaxAnisotropy(){return this.capabilities.getMaxAnisotropy()}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){this.textureUtils.copyTextureToTexture(e,t,r,s,i,n)}copyFramebufferToTexture(e,t,r){this.textureUtils.copyFramebufferToTexture(e,t,r)}_setFramebuffer(e){const{gl:t,state:r}=this;let s=null;if(null!==e.textures){const i=e.renderTarget,n=this.get(i),{samples:o,depthBuffer:a,stencilBuffer:u}=i,l=!0===i.isWebGLCubeRenderTarget,d=!0===i.isRenderTarget3D,c=!0===i.isRenderTargetArray,h=!0===i.isXRRenderTarget,p=!0===h&&!0===i.hasExternalTextures;let g=n.msaaFrameBuffer,m=n.depthRenderbuffer;const f=this.extensions.get("WEBGL_multisampled_render_to_texture"),y=this._useMultisampledRTT(i),x=ef(e);let b;if(l?(n.cubeFramebuffers||(n.cubeFramebuffers={}),b=n.cubeFramebuffers[x]):h&&!1===p?b=this._xrFramebuffer:(n.framebuffers||(n.framebuffers={}),b=n.framebuffers[x]),void 0===b){b=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,b);const s=e.textures;if(l){n.cubeFramebuffers[x]=b;const{textureGPU:e}=this.get(s[0]),r=this.renderer._activeCubeFace;t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_CUBE_MAP_POSITIVE_X+r,e,0)}else{n.framebuffers[x]=b;for(let r=0;r<s.length;r++){const i=s[r],n=this.get(i);n.renderTarget=e.renderTarget,n.cacheKey=x;const a=t.COLOR_ATTACHMENT0+r;if(d||c){const e=this.renderer._activeCubeFace;t.framebufferTextureLayer(t.FRAMEBUFFER,a,n.textureGPU,0,e)}else p&&y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,n.textureGPU,0)}r.drawBuffers(e,b)}if(i.isXRRenderTarget&&!0===i.autoAllocateDepthBuffer){const r=t.createRenderbuffer();this.textureUtils.setupRenderBufferStorage(r,e,0,y),n.xrDepthRenderbuffer=r}else if(null!==e.depthTexture){const r=this.get(e.depthTexture),s=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;r.renderTarget=e.renderTarget,r.cacheKey=x,p&&y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,s,t.TEXTURE_2D,r.textureGPU,0)}}else if(h&&p){r.bindFramebuffer(t.FRAMEBUFFER,b);const s=this.get(e.textures[0]);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0,t.TEXTURE_2D,s.textureGPU,0);const a=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;if(!0===i.autoAllocateDepthBuffer){const e=n.xrDepthRenderbuffer;t.bindRenderbuffer(t.RENDERBUFFER,e),t.framebufferRenderbuffer(t.FRAMEBUFFER,a,t.RENDERBUFFER,e)}else{const r=this.get(e.depthTexture);y?f.framebufferTexture2DMultisampleEXT(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0,o):t.framebufferTexture2D(t.FRAMEBUFFER,a,t.TEXTURE_2D,r.textureGPU,0)}}if(o>0&&!1===y){if(void 0===g){const s=[];g=t.createFramebuffer(),r.bindFramebuffer(t.FRAMEBUFFER,g);const i=[],l=e.textures;for(let r=0;r<l.length;r++){if(i[r]=t.createRenderbuffer(),t.bindRenderbuffer(t.RENDERBUFFER,i[r]),s.push(t.COLOR_ATTACHMENT0+r),a){const e=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(e)}const n=e.textures[r],l=this.get(n);t.renderbufferStorageMultisample(t.RENDERBUFFER,o,l.glInternalFormat,e.width,e.height),t.framebufferRenderbuffer(t.FRAMEBUFFER,t.COLOR_ATTACHMENT0+r,t.RENDERBUFFER,i[r])}if(n.msaaFrameBuffer=g,n.msaaRenderbuffers=i,void 0===m){m=t.createRenderbuffer(),this.textureUtils.setupRenderBufferStorage(m,e,o),n.depthRenderbuffer=m;const r=u?t.DEPTH_STENCIL_ATTACHMENT:t.DEPTH_ATTACHMENT;s.push(r)}n.invalidationArray=s}s=n.msaaFrameBuffer}else s=b}r.bindFramebuffer(t.FRAMEBUFFER,s)}_getVaoKey(e){let t="";for(let r=0;r<e.length;r++){t+=":"+this.get(e[r]).id}return t}_createVao(e){const{gl:t}=this,r=t.createVertexArray();let s="",i=!0;t.bindVertexArray(r);for(let r=0;r<e.length;r++){const n=e[r],o=this.get(n);let a,u;s+=":"+o.id,t.bindBuffer(t.ARRAY_BUFFER,o.bufferGPU),t.enableVertexAttribArray(r),(n.isStorageBufferAttribute||n.isStorageInstancedBufferAttribute)&&(i=!1),!0===n.isInterleavedBufferAttribute?(a=n.data.stride*o.bytesPerElement,u=n.offset*o.bytesPerElement):(a=0,u=0),o.isInteger?t.vertexAttribIPointer(r,n.itemSize,o.type,a,u):t.vertexAttribPointer(r,n.itemSize,o.type,n.normalized,a,u),n.isInstancedBufferAttribute&&!n.isInterleavedBufferAttribute?t.vertexAttribDivisor(r,n.meshPerAttribute):n.isInterleavedBufferAttribute&&n.data.isInstancedInterleavedBuffer&&t.vertexAttribDivisor(r,n.data.meshPerAttribute)}return t.bindBuffer(t.ARRAY_BUFFER,null),this.vaoCache[s]=r,{vaoGPU:r,staticVao:i}}_getTransformFeedback(e){let t="";for(let r=0;r<e.length;r++)t+=":"+e[r].id;let r=this.transformFeedbackCache[t];if(void 0!==r)return r;const{gl:s}=this;r=s.createTransformFeedback(),s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,r);for(let t=0;t<e.length;t++){const r=e[t];s.bindBufferBase(s.TRANSFORM_FEEDBACK_BUFFER,t,r.transformBuffer)}return s.bindTransformFeedback(s.TRANSFORM_FEEDBACK,null),this.transformFeedbackCache[t]=r,r}_setupBindings(e,t){const r=this.gl;for(const s of e)for(const e of s.bindings){const s=this.get(e).index;if(e.isUniformsGroup||e.isUniformBuffer){const i=r.getUniformBlockIndex(t,e.name);r.uniformBlockBinding(t,i,s)}else if(e.isSampledTexture){const i=r.getUniformLocation(t,e.name);r.uniform1i(i,s)}}}_bindUniforms(e){const{gl:t,state:r}=this;for(const s of e)for(const e of s.bindings){const s=this.get(e),i=s.index;e.isUniformsGroup||e.isUniformBuffer?r.bindBufferBase(t.UNIFORM_BUFFER,i,s.bufferGPU):e.isSampledTexture&&r.bindTexture(s.glTextureType,s.textureGPU,t.TEXTURE0+i)}}_useMultisampledRTT(e){return e.samples>0&&!0===this.extensions.has("WEBGL_multisampled_render_to_texture")&&!1!==e.autoAllocateDepthBuffer}dispose(){const e=this.extensions.get("WEBGL_lose_context");e&&e.loseContext(),this.renderer.domElement.removeEventListener("webglcontextlost",this._onContextLost)}}const Xv="point-list",Kv="line-list",Yv="line-strip",Qv="triangle-list",Zv="triangle-strip",Jv="never",eN="less",tN="equal",rN="less-equal",sN="greater",iN="not-equal",nN="greater-equal",oN="always",aN="store",uN="load",lN="clear",dN="ccw",cN="none",hN="front",pN="back",gN="uint16",mN="uint32",fN="r8unorm",yN="r8snorm",xN="r8uint",bN="r8sint",TN="r16uint",_N="r16sint",vN="r16float",NN="rg8unorm",SN="rg8snorm",EN="rg8uint",wN="rg8sint",AN="r32uint",RN="r32sint",CN="r32float",MN="rg16uint",FN="rg16sint",BN="rg16float",PN="rgba8unorm",IN="rgba8unorm-srgb",LN="rgba8snorm",DN="rgba8uint",VN="rgba8sint",UN="bgra8unorm",ON="bgra8unorm-srgb",GN="rgb9e5ufloat",kN="rgb10a2unorm",zN="rgb10a2unorm",WN="rg32uint",$N="rg32sint",HN="rg32float",jN="rgba16uint",qN="rgba16sint",XN="rgba16float",KN="rgba32uint",YN="rgba32sint",QN="rgba32float",ZN="depth16unorm",JN="depth24plus",eS="depth24plus-stencil8",tS="depth32float",rS="depth32float-stencil8",sS="bc1-rgba-unorm",iS="bc1-rgba-unorm-srgb",nS="bc2-rgba-unorm",oS="bc2-rgba-unorm-srgb",aS="bc3-rgba-unorm",uS="bc3-rgba-unorm-srgb",lS="bc4-r-unorm",dS="bc4-r-snorm",cS="bc5-rg-unorm",hS="bc5-rg-snorm",pS="bc6h-rgb-ufloat",gS="bc6h-rgb-float",mS="bc7-rgba-unorm",fS="bc7-rgba-srgb",yS="etc2-rgb8unorm",xS="etc2-rgb8unorm-srgb",bS="etc2-rgb8a1unorm",TS="etc2-rgb8a1unorm-srgb",_S="etc2-rgba8unorm",vS="etc2-rgba8unorm-srgb",NS="eac-r11unorm",SS="eac-r11snorm",ES="eac-rg11unorm",wS="eac-rg11snorm",AS="astc-4x4-unorm",RS="astc-4x4-unorm-srgb",CS="astc-5x4-unorm",MS="astc-5x4-unorm-srgb",FS="astc-5x5-unorm",BS="astc-5x5-unorm-srgb",PS="astc-6x5-unorm",IS="astc-6x5-unorm-srgb",LS="astc-6x6-unorm",DS="astc-6x6-unorm-srgb",VS="astc-8x5-unorm",US="astc-8x5-unorm-srgb",OS="astc-8x6-unorm",GS="astc-8x6-unorm-srgb",kS="astc-8x8-unorm",zS="astc-8x8-unorm-srgb",WS="astc-10x5-unorm",$S="astc-10x5-unorm-srgb",HS="astc-10x6-unorm",jS="astc-10x6-unorm-srgb",qS="astc-10x8-unorm",XS="astc-10x8-unorm-srgb",KS="astc-10x10-unorm",YS="astc-10x10-unorm-srgb",QS="astc-12x10-unorm",ZS="astc-12x10-unorm-srgb",JS="astc-12x12-unorm",eE="astc-12x12-unorm-srgb",tE="clamp-to-edge",rE="repeat",sE="mirror-repeat",iE="linear",nE="nearest",oE="zero",aE="one",uE="src",lE="one-minus-src",dE="src-alpha",cE="one-minus-src-alpha",hE="dst",pE="one-minus-dst",gE="dst-alpha",mE="one-minus-dst-alpha",fE="src-alpha-saturated",yE="constant",xE="one-minus-constant",bE="add",TE="subtract",_E="reverse-subtract",vE="min",NE="max",SE=0,EE=15,wE="keep",AE="zero",RE="replace",CE="invert",ME="increment-clamp",FE="decrement-clamp",BE="increment-wrap",PE="decrement-wrap",IE="storage",LE="read-only-storage",DE="write-only",VE="read-only",UE="read-write",OE="float",GE="unfilterable-float",kE="depth",zE="sint",WE="uint",$E="2d",HE="3d",jE="2d",qE="2d-array",XE="cube",KE="3d",YE="all",QE="vertex",ZE="instance",JE={DepthClipControl:"depth-clip-control",Depth32FloatStencil8:"depth32float-stencil8",TextureCompressionBC:"texture-compression-bc",TextureCompressionETC2:"texture-compression-etc2",TextureCompressionASTC:"texture-compression-astc",TimestampQuery:"timestamp-query",IndirectFirstInstance:"indirect-first-instance",ShaderF16:"shader-f16",RG11B10UFloat:"rg11b10ufloat-renderable",BGRA8UNormStorage:"bgra8unorm-storage",Float32Filterable:"float32-filterable",ClipDistances:"clip-distances",DualSourceBlending:"dual-source-blending",Subgroups:"subgroups"};class ew extends uv{constructor(e,t){super(e),this.texture=t,this.version=t?t.version:0,this.isSampler=!0}}class tw extends ew{constructor(e,t,r){super(e,t?t.value:null),this.textureNode=t,this.groupNode=r}update(){this.texture=this.textureNode.value}}class rw extends lv{constructor(e,t){super(e,t?t.array:null),this.attribute=t,this.isStorageBuffer=!0}}let sw=0;class iw extends rw{constructor(e,t){super("StorageBuffer_"+sw++,e?e.value:null),this.nodeUniform=e,this.access=e?e.access:Vs.READ_WRITE,this.groupNode=t}get buffer(){return this.nodeUniform.value}}class nw extends Rm{constructor(e){super(),this.device=e;this.mipmapSampler=e.createSampler({minFilter:iE}),this.flipYSampler=e.createSampler({minFilter:nE}),this.transferPipelines={},this.flipYPipelines={},this.mipmapVertexShaderModule=e.createShaderModule({label:"mipmapVertex",code:"\nstruct VarysStruct {\n\t@builtin( position ) Position: vec4<f32>,\n\t@location( 0 ) vTex : vec2<f32>\n};\n\n@vertex\nfn main( @builtin( vertex_index ) vertexIndex : u32 ) -> VarysStruct {\n\n\tvar Varys : VarysStruct;\n\n\tvar pos = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( -1.0,  1.0 ),\n\t\tvec2<f32>(  1.0,  1.0 ),\n\t\tvec2<f32>( -1.0, -1.0 ),\n\t\tvec2<f32>(  1.0, -1.0 )\n\t);\n\n\tvar tex = array< vec2<f32>, 4 >(\n\t\tvec2<f32>( 0.0, 0.0 ),\n\t\tvec2<f32>( 1.0, 0.0 ),\n\t\tvec2<f32>( 0.0, 1.0 ),\n\t\tvec2<f32>( 1.0, 1.0 )\n\t);\n\n\tVarys.vTex = tex[ vertexIndex ];\n\tVarys.Position = vec4<f32>( pos[ vertexIndex ], 0.0, 1.0 );\n\n\treturn Varys;\n\n}\n"}),this.mipmapFragmentShaderModule=e.createShaderModule({label:"mipmapFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vTex );\n\n}\n"}),this.flipYFragmentShaderModule=e.createShaderModule({label:"flipYFragment",code:"\n@group( 0 ) @binding( 0 )\nvar imgSampler : sampler;\n\n@group( 0 ) @binding( 1 )\nvar img : texture_2d<f32>;\n\n@fragment\nfn main( @location( 0 ) vTex : vec2<f32> ) -> @location( 0 ) vec4<f32> {\n\n\treturn textureSample( img, imgSampler, vec2( vTex.x, 1.0 - vTex.y ) );\n\n}\n"})}getTransferPipeline(e){let t=this.transferPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`mipmap-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.mipmapFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Zv,stripIndexFormat:mN},layout:"auto"}),this.transferPipelines[e]=t),t}getFlipYPipeline(e){let t=this.flipYPipelines[e];return void 0===t&&(t=this.device.createRenderPipeline({label:`flipY-${e}`,vertex:{module:this.mipmapVertexShaderModule,entryPoint:"main"},fragment:{module:this.flipYFragmentShaderModule,entryPoint:"main",targets:[{format:e}]},primitive:{topology:Zv,stripIndexFormat:mN},layout:"auto"}),this.flipYPipelines[e]=t),t}flipY(e,t,r=0){const s=t.format,{width:i,height:n}=t.size,o=this.getTransferPipeline(s),a=this.getFlipYPipeline(s),u=this.device.createTexture({size:{width:i,height:n,depthOrArrayLayers:1},format:s,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.TEXTURE_BINDING}),l=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:jE,baseArrayLayer:r}),d=u.createView({baseMipLevel:0,mipLevelCount:1,dimension:jE,baseArrayLayer:0}),c=this.device.createCommandEncoder({}),h=(e,t,r)=>{const s=e.getBindGroupLayout(0),i=this.device.createBindGroup({layout:s,entries:[{binding:0,resource:this.flipYSampler},{binding:1,resource:t}]}),n=c.beginRenderPass({colorAttachments:[{view:r,loadOp:lN,storeOp:aN,clearValue:[0,0,0,0]}]});n.setPipeline(e),n.setBindGroup(0,i),n.draw(4,1,0,0),n.end()};h(o,l,d),h(a,d,l),this.device.queue.submit([c.finish()]),u.destroy()}generateMipmaps(e,t,r=0){const s=this.get(e);void 0===s.useCount&&(s.useCount=0,s.layers=[]);const i=s.layers[r]||this._mipmapCreateBundles(e,t,r),n=this.device.createCommandEncoder({});this._mipmapRunBundles(n,i),this.device.queue.submit([n.finish()]),0!==s.useCount&&(s.layers[r]=i),s.useCount++}_mipmapCreateBundles(e,t,r){const s=this.getTransferPipeline(t.format),i=s.getBindGroupLayout(0);let n=e.createView({baseMipLevel:0,mipLevelCount:1,dimension:jE,baseArrayLayer:r});const o=[];for(let a=1;a<t.mipLevelCount;a++){const u=this.device.createBindGroup({layout:i,entries:[{binding:0,resource:this.mipmapSampler},{binding:1,resource:n}]}),l=e.createView({baseMipLevel:a,mipLevelCount:1,dimension:jE,baseArrayLayer:r}),d={colorAttachments:[{view:l,loadOp:lN,storeOp:aN,clearValue:[0,0,0,0]}]},c=this.device.createRenderBundleEncoder({colorFormats:[t.format]});c.setPipeline(s),c.setBindGroup(0,u),c.draw(4,1,0,0),o.push({renderBundles:[c.finish()],passDescriptor:d}),n=l}return o}_mipmapRunBundles(e,t){const r=t.length;for(let s=0;s<r;s++){const r=t[s],i=e.beginRenderPass(r.passDescriptor);i.executeBundles(r.renderBundles),i.end()}}}const ow={[Br]:"never",[Le]:"less",[Cr]:"equal",[Mr]:"less-equal",[Ar]:"greater",[Rr]:"greater-equal",[Fr]:"always",[wr]:"not-equal"},aw=[0,1,3,2,4,5];class uw{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new L,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,s=t.get(e),i={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};i.magFilter===iE&&i.minFilter===iE&&i.mipmapFilter===iE&&(i.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(i.compare=ow[e.compareFunction]),s.sampler=r.createSampler(i)}createDefaultTexture(e){let t;const r=lw(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,s=r.get(e);if(s.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:i,height:n,depth:o,levels:a}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),l=e.internalFormat||t.format||lw(e,r.device);s.format=l;const{samples:d,primarySamples:c,isMSAA:h}=r.utils.getTextureSampleData(e);let p=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(p|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(p|=GPUTextureUsage.RENDER_ATTACHMENT);const g={label:e.name,size:{width:i,height:n,depthOrArrayLayers:o},mipLevelCount:a,sampleCount:c,dimension:u,format:l,usage:p};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);g.size.width=r.displayWidth,g.size.height=r.displayHeight,r.close(),s.externalTexture=t}else{if(void 0===l)return console.warn("WebGPURenderer: Texture format not supported."),void this.createDefaultTexture(e);s.texture=r.device.createTexture(g)}if(h){const e=Object.assign({},g);e.label=e.label+"-msaa",e.sampleCount=d,s.msaaTexture=r.device.createTexture(e)}s.initialized=!0,s.textureDescriptorGPU=g}destroyTexture(e){const t=this.backend,r=t.get(e);void 0!==r.texture&&r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:s,height:i}=r.getDrawingBufferSize(),n=this.depthTexture,o=r.get(n).texture;let a,u;if(t?(a=we,u=Re):e&&(a=Ae,u=b),void 0!==o){if(n.image.width===s&&n.image.height===i&&n.format===a&&n.type===u)return o;this.destroyTexture(n)}return n.name="depthBuffer",n.format=a,n.type=u,n.image.width=s,n.image.height=i,this.createTexture(n,{width:s,height:i}),r.get(n).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:s}=r;if(!e.isRenderTargetTexture&&void 0!==s){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,s,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let i=0;i<t.image.depth;i++)this._copyBufferToTexture(t.image,r.texture,s,i,e.flipY,i);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,s);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,s,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,s,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,s,i,n){const o=this.backend.device,a=this.backend.get(e),u=a.texture,l=a.textureDescriptorGPU.format,d=this._getBytesPerTexel(l);let c=s*d;c=256*Math.ceil(c/256);const h=o.createBuffer({size:s*i*d,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),p=o.createCommandEncoder();p.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:n}},{buffer:h,bytesPerRow:c},{width:s,height:i});const g=this._getTypedArrayType(l);o.queue.submit([p.finish()]),await h.mapAsync(GPUMapMode.READ);return new g(h.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===Y||t===Q||t===E||t===w}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new pe;r.minFilter=_,r.magFilter=_,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new K;r.minFilter=_,r.magFilter=_,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,s){for(let i=0;i<6;i++){const n=e[i],o=!0===s?aw[i]:i;n.isDataTexture?this._copyBufferToTexture(n.image,t,r,o,s):this._copyImageToTexture(n,t,r,o,s)}}_copyImageToTexture(e,t,r,s,i){this.backend.device.queue.copyExternalImageToTexture({source:e,flipY:i},{texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},{width:e.width,height:e.height,depthOrArrayLayers:1})}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new nw(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,s,i,n=0){const o=this.backend.device,a=e.data,u=this._getBytesPerTexel(r.format),l=e.width*u;o.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:s}},a,{offset:e.width*e.height*u*n,bytesPerRow:l},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===i&&this._flipY(t,r,s)}_copyCompressedBufferToTexture(e,t,r){const s=this.backend.device,i=this._getBlockData(r.format),n=r.size.depthOrArrayLayers>1;for(let o=0;o<e.length;o++){const a=e[o],u=a.width,l=a.height,d=n?r.size.depthOrArrayLayers:1,c=Math.ceil(u/i.width)*i.byteLength,h=c*Math.ceil(l/i.height);for(let e=0;e<d;e++)s.queue.writeTexture({texture:t,mipLevel:o,origin:{x:0,y:0,z:e}},a.data,{offset:e*h,bytesPerRow:c,rowsPerImage:Math.ceil(l/i.height)},{width:Math.ceil(u/i.width)*i.width,height:Math.ceil(l/i.height)*i.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===sS||e===iS?{byteLength:8,width:4,height:4}:e===nS||e===oS||e===aS||e===uS?{byteLength:16,width:4,height:4}:e===lS||e===dS?{byteLength:8,width:4,height:4}:e===cS||e===hS||e===pS||e===gS||e===mS||e===fS?{byteLength:16,width:4,height:4}:e===yS||e===xS||e===bS||e===TS?{byteLength:8,width:4,height:4}:e===_S||e===vS?{byteLength:16,width:4,height:4}:e===NS||e===SS?{byteLength:8,width:4,height:4}:e===ES||e===wS||e===AS||e===RS?{byteLength:16,width:4,height:4}:e===CS||e===MS?{byteLength:16,width:5,height:4}:e===FS||e===BS?{byteLength:16,width:5,height:5}:e===PS||e===IS?{byteLength:16,width:6,height:5}:e===LS||e===DS?{byteLength:16,width:6,height:6}:e===VS||e===US?{byteLength:16,width:8,height:5}:e===OS||e===GS?{byteLength:16,width:8,height:6}:e===kS||e===zS?{byteLength:16,width:8,height:8}:e===WS||e===$S?{byteLength:16,width:10,height:5}:e===HS||e===jS?{byteLength:16,width:10,height:6}:e===qS||e===XS?{byteLength:16,width:10,height:8}:e===KS||e===YS?{byteLength:16,width:10,height:10}:e===QS||e===ZS?{byteLength:16,width:12,height:10}:e===JS||e===eE?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=tE;return e===Sr?t=rE:e===vr&&(t=sE),t}_convertFilterMode(e){let t=iE;return e!==_&&e!==Er&&e!==ke||(t=nE),t}_getBytesPerTexel(e){return e===fN||e===yN||e===xN||e===bN?1:e===TN||e===_N||e===vN||e===NN||e===SN||e===EN||e===wN?2:e===AN||e===RN||e===CN||e===MN||e===FN||e===BN||e===PN||e===IN||e===LN||e===DN||e===VN||e===UN||e===ON||e===GN||e===kN||e===zN||e===tS||e===JN||e===eS||e===rS?4:e===WN||e===$N||e===HN||e===jN||e===qN||e===XN?8:e===KN||e===YN||e===QN?16:void 0}_getTypedArrayType(e){return e===xN?Uint8Array:e===bN?Int8Array:e===fN?Uint8Array:e===yN?Int8Array:e===EN?Uint8Array:e===wN?Int8Array:e===NN?Uint8Array:e===SN?Int8Array:e===DN?Uint8Array:e===VN?Int8Array:e===PN?Uint8Array:e===LN?Int8Array:e===TN?Uint16Array:e===_N?Int16Array:e===MN?Uint16Array:e===FN?Int16Array:e===jN?Uint16Array:e===qN?Int16Array:e===vN||e===BN||e===XN?Uint16Array:e===AN?Uint32Array:e===RN?Int32Array:e===CN?Float32Array:e===WN?Uint32Array:e===$N?Int32Array:e===HN?Float32Array:e===KN?Uint32Array:e===YN?Int32Array:e===QN?Float32Array:e===UN||e===ON?Uint8Array:e===kN||e===GN||e===zN?Uint32Array:e===tS?Float32Array:e===JN||e===eS?Uint32Array:e===rS?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?HE:$E,t}}function lw(e,t=null){const r=e.format,s=e.type,i=e.colorSpace;let n;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case qt:n=i===z?iS:sS;break;case Xt:n=i===z?oS:nS;break;case Kt:n=i===z?uS:aS;break;case tr:n=i===z?xS:yS;break;case rr:n=i===z?vS:_S;break;case sr:n=i===z?RS:AS;break;case ir:n=i===z?MS:CS;break;case nr:n=i===z?BS:FS;break;case or:n=i===z?IS:PS;break;case ar:n=i===z?DS:LS;break;case ur:n=i===z?US:VS;break;case lr:n=i===z?GS:OS;break;case dr:n=i===z?zS:kS;break;case cr:n=i===z?$S:WS;break;case hr:n=i===z?jS:HS;break;case pr:n=i===z?XS:qS;break;case gr:n=i===z?YS:KS;break;case mr:n=i===z?ZS:QS;break;case fr:n=i===z?eE:JS;break;case ce:n=i===z?IN:PN;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case ce:switch(s){case ot:n=LN;break;case nt:n=qN;break;case at:n=jN;break;case b:n=KN;break;case T:n=YN;break;case Ce:n=i===z?IN:PN;break;case he:n=XN;break;case B:n=QN;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",s)}break;case dt:if(s===zt)n=GN;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",s);break;case it:switch(s){case ot:n=yN;break;case nt:n=_N;break;case at:n=TN;break;case b:n=AN;break;case T:n=RN;break;case Ce:n=fN;break;case he:n=vN;break;case B:n=CN;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",s)}break;case Ve:switch(s){case ot:n=SN;break;case nt:n=FN;break;case at:n=MN;break;case b:n=WN;break;case T:n=$N;break;case Ce:n=NN;break;case he:n=BN;break;case B:n=HN;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",s)}break;case Ae:switch(s){case at:n=ZN;break;case b:n=JN;break;case B:n=tS;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",s)}break;case we:switch(s){case Re:n=eS;break;case B:t&&!1===t.features.has(JE.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),n=rS;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",s)}break;case st:switch(s){case T:n=RN;break;case b:n=AN;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",s)}break;case ut:switch(s){case T:n=$N;break;case b:n=WN;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",s)}break;case ct:switch(s){case T:n=YN;break;case b:n=KN;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",s)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return n}const dw=/^[fn]*\s*([a-z_0-9]+)?\s*\(([\s\S]*?)\)\s*[\-\>]*\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/i,cw=/([a-z_0-9]+)\s*:\s*([a-z_0-9]+(?:<[\s\S]+?>)?)/gi,hw={f32:"float",i32:"int",u32:"uint",bool:"bool","vec2<f32>":"vec2","vec2<i32>":"ivec2","vec2<u32>":"uvec2","vec2<bool>":"bvec2",vec2f:"vec2",vec2i:"ivec2",vec2u:"uvec2",vec2b:"bvec2","vec3<f32>":"vec3","vec3<i32>":"ivec3","vec3<u32>":"uvec3","vec3<bool>":"bvec3",vec3f:"vec3",vec3i:"ivec3",vec3u:"uvec3",vec3b:"bvec3","vec4<f32>":"vec4","vec4<i32>":"ivec4","vec4<u32>":"uvec4","vec4<bool>":"bvec4",vec4f:"vec4",vec4i:"ivec4",vec4u:"uvec4",vec4b:"bvec4","mat2x2<f32>":"mat2",mat2x2f:"mat2","mat3x3<f32>":"mat3",mat3x3f:"mat3","mat4x4<f32>":"mat4",mat4x4f:"mat4",sampler:"sampler",texture_1d:"texture",texture_2d:"texture",texture_2d_array:"texture",texture_multisampled_2d:"cubeTexture",texture_depth_2d:"depthTexture",texture_depth_multisampled_2d:"depthTexture",texture_3d:"texture3D",texture_cube:"cubeTexture",texture_cube_array:"cubeTexture",texture_storage_1d:"storageTexture",texture_storage_2d:"storageTexture",texture_storage_2d_array:"storageTexture",texture_storage_3d:"storageTexture"};class pw extends w_{constructor(e){const{type:t,inputs:r,name:s,inputsCode:i,blockCode:n,outputType:o}=(e=>{const t=(e=e.trim()).match(dw);if(null!==t&&4===t.length){const r=t[2],s=[];let i=null;for(;null!==(i=cw.exec(r));)s.push({name:i[1],type:i[2]});const n=[];for(let e=0;e<s.length;e++){const{name:t,type:r}=s[e];let i=r;i.startsWith("ptr")?i="pointer":(i.startsWith("texture")&&(i=r.split("<")[0]),i=hw[i]),n.push(new g_(i,t))}const o=e.substring(t[0].length),a=t[3]||"void",u=void 0!==t[1]?t[1]:"";return{type:hw[a]||a,inputs:n,name:u,inputsCode:r,blockCode:o,outputType:a}}throw new Error("FunctionNode: Function is not a WGSL code.")})(e);super(t,r,s),this.inputsCode=i,this.blockCode=n,this.outputType=o}getCode(e=this.name){const t="void"!==this.outputType?"-> "+this.outputType:"";return`fn ${e} ( ${this.inputsCode.trim()} ) ${t}`+this.blockCode}}class gw extends E_{parseFunction(e){return new pw(e)}}const mw="undefined"!=typeof self?self.GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},fw={[Vs.READ_ONLY]:"read",[Vs.WRITE_ONLY]:"write",[Vs.READ_WRITE]:"read_write"},yw={[Sr]:"repeat",[Nr]:"clamp",[vr]:"mirror"},xw={vertex:mw?mw.VERTEX:1,fragment:mw?mw.FRAGMENT:2,compute:mw?mw.COMPUTE:4},bw={instance:!0,swizzleAssign:!1,storageBuffer:!0},Tw={"^^":"tsl_xor"},_w={float:"f32",int:"i32",uint:"u32",bool:"bool",color:"vec3<f32>",vec2:"vec2<f32>",ivec2:"vec2<i32>",uvec2:"vec2<u32>",bvec2:"vec2<bool>",vec3:"vec3<f32>",ivec3:"vec3<i32>",uvec3:"vec3<u32>",bvec3:"vec3<bool>",vec4:"vec4<f32>",ivec4:"vec4<i32>",uvec4:"vec4<u32>",bvec4:"vec4<bool>",mat2:"mat2x2<f32>",mat3:"mat3x3<f32>",mat4:"mat4x4<f32>"},vw={},Nw={tsl_xor:new dx("fn tsl_xor( a : bool, b : bool ) -> bool { return ( a || b ) && !( a && b ); }"),mod_float:new dx("fn tsl_mod_float( x : f32, y : f32 ) -> f32 { return x - y * floor( x / y ); }"),mod_vec2:new dx("fn tsl_mod_vec2( x : vec2f, y : vec2f ) -> vec2f { return x - y * floor( x / y ); }"),mod_vec3:new dx("fn tsl_mod_vec3( x : vec3f, y : vec3f ) -> vec3f { return x - y * floor( x / y ); }"),mod_vec4:new dx("fn tsl_mod_vec4( x : vec4f, y : vec4f ) -> vec4f { return x - y * floor( x / y ); }"),equals_bool:new dx("fn tsl_equals_bool( a : bool, b : bool ) -> bool { return a == b; }"),equals_bvec2:new dx("fn tsl_equals_bvec2( a : vec2f, b : vec2f ) -> vec2<bool> { return vec2<bool>( a.x == b.x, a.y == b.y ); }"),equals_bvec3:new dx("fn tsl_equals_bvec3( a : vec3f, b : vec3f ) -> vec3<bool> { return vec3<bool>( a.x == b.x, a.y == b.y, a.z == b.z ); }"),equals_bvec4:new dx("fn tsl_equals_bvec4( a : vec4f, b : vec4f ) -> vec4<bool> { return vec4<bool>( a.x == b.x, a.y == b.y, a.z == b.z, a.w == b.w ); }"),repeatWrapping_float:new dx("fn tsl_repeatWrapping_float( coord: f32 ) -> f32 { return fract( coord ); }"),mirrorWrapping_float:new dx("fn tsl_mirrorWrapping_float( coord: f32 ) -> f32 { let mirrored = fract( coord * 0.5 ) * 2.0; return 1.0 - abs( 1.0 - mirrored ); }"),clampWrapping_float:new dx("fn tsl_clampWrapping_float( coord: f32 ) -> f32 { return clamp( coord, 0.0, 1.0 ); }"),biquadraticTexture:new dx("\nfn tsl_biquadraticTexture( map : texture_2d<f32>, coord : vec2f, iRes : vec2u, level : u32 ) -> vec4f {\n\n\tlet res = vec2f( iRes );\n\n\tlet uvScaled = coord * res;\n\tlet uvWrapping = ( ( uvScaled % res ) + res ) % res;\n\n\t// https://www.shadertoy.com/view/WtyXRy\n\n\tlet uv = uvWrapping - 0.5;\n\tlet iuv = floor( uv );\n\tlet f = fract( uv );\n\n\tlet rg1 = textureLoad( map, vec2u( iuv + vec2( 0.5, 0.5 ) ) % iRes, level );\n\tlet rg2 = textureLoad( map, vec2u( iuv + vec2( 1.5, 0.5 ) ) % iRes, level );\n\tlet rg3 = textureLoad( map, vec2u( iuv + vec2( 0.5, 1.5 ) ) % iRes, level );\n\tlet rg4 = textureLoad( map, vec2u( iuv + vec2( 1.5, 1.5 ) ) % iRes, level );\n\n\treturn mix( mix( rg1, rg2, f.x ), mix( rg3, rg4, f.x ), f.y );\n\n}\n")},Sw={dFdx:"dpdx",dFdy:"- dpdy",mod_float:"tsl_mod_float",mod_vec2:"tsl_mod_vec2",mod_vec3:"tsl_mod_vec3",mod_vec4:"tsl_mod_vec4",equals_bool:"tsl_equals_bool",equals_bvec2:"tsl_equals_bvec2",equals_bvec3:"tsl_equals_bvec3",equals_bvec4:"tsl_equals_bvec4",inversesqrt:"inverseSqrt",bitcast:"bitcast<f32>"};"undefined"!=typeof navigator&&/Windows/g.test(navigator.userAgent)&&(Nw.pow_float=new dx("fn tsl_pow_float( a : f32, b : f32 ) -> f32 { return select( -pow( -a, b ), pow( a, b ), a > 0.0 ); }"),Nw.pow_vec2=new dx("fn tsl_pow_vec2( a : vec2f, b : vec2f ) -> vec2f { return vec2f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ) ); }",[Nw.pow_float]),Nw.pow_vec3=new dx("fn tsl_pow_vec3( a : vec3f, b : vec3f ) -> vec3f { return vec3f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ) ); }",[Nw.pow_float]),Nw.pow_vec4=new dx("fn tsl_pow_vec4( a : vec4f, b : vec4f ) -> vec4f { return vec4f( tsl_pow_float( a.x, b.x ), tsl_pow_float( a.y, b.y ), tsl_pow_float( a.z, b.z ), tsl_pow_float( a.w, b.w ) ); }",[Nw.pow_float]),Sw.pow_float="tsl_pow_float",Sw.pow_vec2="tsl_pow_vec2",Sw.pow_vec3="tsl_pow_vec3",Sw.pow_vec4="tsl_pow_vec4");let Ew="";!0!==("undefined"!=typeof navigator&&/Firefox|Deno/g.test(navigator.userAgent))&&(Ew+="diagnostic( off, derivative_uniformity );\n");class ww extends h_{constructor(e,t){super(e,t,new gw),this.uniformGroups={},this.builtins={},this.directives={},this.scopedArrays=new Map}needsToWorkingColorSpace(e){return!0===e.isVideoTexture&&e.colorSpace!==x}_generateTextureSample(e,t,r,s,i=this.shaderStage){return"fragment"===i?s?`textureSample( ${t}, ${t}_sampler, ${r}, ${s} )`:`textureSample( ${t}, ${t}_sampler, ${r} )`:this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r):this.generateTextureLod(e,t,r,s,"0")}_generateVideoSample(e,t,r=this.shaderStage){if("fragment"===r)return`textureSampleBaseClampToEdge( ${e}, ${e}_sampler, vec2<f32>( ${t}.x, 1.0 - ${t}.y ) )`;console.error(`WebGPURenderer: THREE.VideoTexture does not support ${r} shader.`)}_generateTextureSampleLevel(e,t,r,s,i,n=this.shaderStage){return"fragment"!==n&&"compute"!==n||!1!==this.isUnfilterable(e)?this.isFilteredTexture(e)?this.generateFilteredTexture(e,t,r,s):this.generateTextureLod(e,t,r,i,s):`textureSampleLevel( ${t}, ${t}_sampler, ${r}, ${s} )`}generateWrapFunction(e){const t=`tsl_coord_${yw[e.wrapS]}S_${yw[e.wrapT]}_${e.isData3DTexture?"3d":"2d"}T`;let r=vw[t];if(void 0===r){const s=[],i=e.isData3DTexture?"vec3f":"vec2f";let n=`fn ${t}( coord : ${i} ) -> ${i} {\n\n\treturn ${i}(\n`;const o=(e,t)=>{e===Sr?(s.push(Nw.repeatWrapping_float),n+=`\t\ttsl_repeatWrapping_float( coord.${t} )`):e===Nr?(s.push(Nw.clampWrapping_float),n+=`\t\ttsl_clampWrapping_float( coord.${t} )`):e===vr?(s.push(Nw.mirrorWrapping_float),n+=`\t\ttsl_mirrorWrapping_float( coord.${t} )`):(n+=`\t\tcoord.${t}`,console.warn(`WebGPURenderer: Unsupported texture wrap type "${e}" for vertex shader.`))};o(e.wrapS,"x"),n+=",\n",o(e.wrapT,"y"),e.isData3DTexture&&(n+=",\n",o(e.wrapR,"z")),n+="\n\t);\n\n}\n",vw[t]=r=new dx(n,s)}return r.build(this),t}generateArrayDeclaration(e,t){return`array< ${this.getType(e)}, ${t} >`}generateTextureDimension(e,t,r){const s=this.getDataFromNode(e,this.shaderStage,this.globalCache);void 0===s.dimensionsSnippet&&(s.dimensionsSnippet={});let i=s.dimensionsSnippet[r];if(void 0===s.dimensionsSnippet[r]){let n,o;const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(e),u=a>1;o=e.isData3DTexture?"vec3<u32>":"vec2<u32>",n=u||e.isVideoTexture||e.isStorageTexture?t:`${t}${r?`, u32( ${r} )`:""}`,i=new $a(new Ru(`textureDimensions( ${n} )`,o)),s.dimensionsSnippet[r]=i,(e.isDataArrayTexture||e.isData3DTexture)&&(s.arrayLayerCount=new $a(new Ru(`textureNumLayers(${t})`,"u32"))),e.isTextureCube&&(s.cubeFaceCount=new $a(new Ru("6u","u32")))}return i.build(this)}generateFilteredTexture(e,t,r,s="0u"){this._include("biquadraticTexture");return`tsl_biquadraticTexture( ${t}, ${this.generateWrapFunction(e)}( ${r} ), ${this.generateTextureDimension(e,t,s)}, u32( ${s} ) )`}generateTextureLod(e,t,r,s,i="0u"){const n=this.generateWrapFunction(e),o=this.generateTextureDimension(e,t,i),a=e.isData3DTexture?"vec3":"vec2",u=`${a}<u32>(${n}(${r}) * ${a}<f32>(${o}))`;return this.generateTextureLoad(e,t,u,s,i)}generateTextureLoad(e,t,r,s,i="0u"){return!0===e.isVideoTexture||!0===e.isStorageTexture?`textureLoad( ${t}, ${r} )`:s?`textureLoad( ${t}, ${r}, ${s}, u32( ${i} ) )`:`textureLoad( ${t}, ${r}, u32( ${i} ) )`}generateTextureStore(e,t,r,s){return`textureStore( ${t}, ${r}, ${s} )`}isSampleCompare(e){return!0===e.isDepthTexture&&null!==e.compareFunction}isUnfilterable(e){return"float"!==this.getComponentTypeFromTexture(e)||!this.isAvailable("float32Filterable")&&!0===e.isDataTexture&&e.type===B||!1===this.isSampleCompare(e)&&e.minFilter===_&&e.magFilter===_||this.renderer.backend.utils.getTextureSampleData(e).primarySamples>1}generateTexture(e,t,r,s,i=this.shaderStage){let n=null;return n=!0===e.isVideoTexture?this._generateVideoSample(t,r,i):this.isUnfilterable(e)?this.generateTextureLod(e,t,r,s,"0",i):this._generateTextureSample(e,t,r,s,i),n}generateTextureGrad(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleGrad( ${t}, ${t}_sampler, ${r},  ${s[0]}, ${s[1]} )`;console.error(`WebGPURenderer: THREE.TextureNode.gradient() does not support ${n} shader.`)}generateTextureCompare(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleCompare( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.DepthTexture.compareFunction() does not support ${n} shader.`)}generateTextureLevel(e,t,r,s,i,n=this.shaderStage){let o=null;return o=!0===e.isVideoTexture?this._generateVideoSample(t,r,n):this._generateTextureSampleLevel(e,t,r,s,i,n),o}generateTextureBias(e,t,r,s,i,n=this.shaderStage){if("fragment"===n)return`textureSampleBias( ${t}, ${t}_sampler, ${r}, ${s} )`;console.error(`WebGPURenderer: THREE.TextureNode.biasNode does not support ${n} shader.`)}getPropertyName(e,t=this.shaderStage){if(!0===e.isNodeVarying&&!0===e.needsInterpolation){if("vertex"===t)return`varyings.${e.name}`}else if(!0===e.isNodeUniform){const t=e.name,r=e.type;return"texture"===r||"cubeTexture"===r||"storageTexture"===r||"texture3D"===r?t:"buffer"===r||"storageBuffer"===r||"indirectStorageBuffer"===r?this.isCustomStruct(e)?t:t+".value":e.groupNode.name+"."+t}return super.getPropertyName(e)}getOutputStructName(){return"output"}getFunctionOperator(e){const t=Tw[e];return void 0!==t?(this._include(t),t):null}getNodeAccess(e,t){return"compute"!==t?Vs.READ_ONLY:e.access}getStorageAccess(e,t){return fw[this.getNodeAccess(e,t)]}getUniformFromNode(e,t,r,s=null){const i=super.getUniformFromNode(e,t,r,s),n=this.getDataFromNode(e,r,this.globalCache);if(void 0===n.uniformGPU){let o;const a=e.groupNode,u=a.name,l=this.getBindGroupArray(u,r);if("texture"===t||"cubeTexture"===t||"storageTexture"===t||"texture3D"===t){let s=null;const n=this.getNodeAccess(e,r);if("texture"===t||"storageTexture"===t?s=new xv(i.name,i.node,a,n):"cubeTexture"===t?s=new bv(i.name,i.node,a,n):"texture3D"===t&&(s=new Tv(i.name,i.node,a,n)),s.store=!0===e.isStorageTextureNode,s.setVisibility(xw[r]),"fragment"!==r&&"compute"!==r||!1!==this.isUnfilterable(e.value)||!1!==s.store)l.push(s),o=[s];else{const e=new tw(`${i.name}_sampler`,i.node,a);e.setVisibility(xw[r]),l.push(e,s),o=[e,s]}}else if("buffer"===t||"storageBuffer"===t||"indirectStorageBuffer"===t){const n=new("buffer"===t?hv:iw)(e,a);n.setVisibility(xw[r]),l.push(n),o=n,i.name=s||"NodeBuffer_"+i.id}else{const e=this.uniformGroups[r]||(this.uniformGroups[r]={});let s=e[u];void 0===s&&(s=new mv(u,a),s.setVisibility(xw[r]),e[u]=s,l.push(s)),o=this.getNodeUniform(i,t),s.addUniform(o)}n.uniformGPU=o}return i}getBuiltin(e,t,r,s=this.shaderStage){const i=this.builtins[s]||(this.builtins[s]=new Map);return!1===i.has(e)&&i.set(e,{name:e,property:t,type:r}),t}hasBuiltin(e,t=this.shaderStage){return void 0!==this.builtins[t]&&this.builtins[t].has(e)}getVertexIndex(){return"vertex"===this.shaderStage?this.getBuiltin("vertex_index","vertexIndex","u32","attribute"):"vertexIndex"}buildFunctionCode(e){const t=e.layout,r=this.flowShaderNode(e),s=[];for(const e of t.inputs)s.push(e.name+" : "+this.getType(e.type));let i=`fn ${t.name}( ${s.join(", ")} ) -> ${this.getType(t.type)} {\n${r.vars}\n${r.code}\n`;return r.result&&(i+=`\treturn ${r.result};\n`),i+="\n}\n",i}getInstanceIndex(){return"vertex"===this.shaderStage?this.getBuiltin("instance_index","instanceIndex","u32","attribute"):"instanceIndex"}getInvocationLocalIndex(){return this.getBuiltin("local_invocation_index","invocationLocalIndex","u32","attribute")}getSubgroupSize(){return this.enableSubGroups(),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute")}getInvocationSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_invocation_id","invocationSubgroupIndex","u32","attribute")}getSubgroupIndex(){return this.enableSubGroups(),this.getBuiltin("subgroup_id","subgroupIndex","u32","attribute")}getDrawIndex(){return null}getFrontFacing(){return this.getBuiltin("front_facing","isFront","bool")}getFragCoord(){return this.getBuiltin("position","fragCoord","vec4<f32>")+".xy"}getFragDepth(){return"output."+this.getBuiltin("frag_depth","depth","f32","output")}getClipDistance(){return"varyings.hw_clip_distances"}isFlipY(){return!1}enableDirective(e,t=this.shaderStage){(this.directives[t]||(this.directives[t]=new Set)).add(e)}getDirectives(e){const t=[],r=this.directives[e];if(void 0!==r)for(const e of r)t.push(`enable ${e};`);return t.join("\n")}enableSubGroups(){this.enableDirective("subgroups")}enableSubgroupsF16(){this.enableDirective("subgroups-f16")}enableClipDistances(){this.enableDirective("clip_distances")}enableShaderF16(){this.enableDirective("f16")}enableDualSourceBlending(){this.enableDirective("dual_source_blending")}enableHardwareClipping(e){this.enableClipDistances(),this.getBuiltin("clip_distances","hw_clip_distances",`array<f32, ${e} >`,"vertex")}getBuiltins(e){const t=[],r=this.builtins[e];if(void 0!==r)for(const{name:e,property:s,type:i}of r.values())t.push(`@builtin( ${e} ) ${s} : ${i}`);return t.join(",\n\t")}getScopedArray(e,t,r,s){return!1===this.scopedArrays.has(e)&&this.scopedArrays.set(e,{name:e,scope:t,bufferType:r,bufferCount:s}),e}getScopedArrays(e){if("compute"!==e)return;const t=[];for(const{name:e,scope:r,bufferType:s,bufferCount:i}of this.scopedArrays.values()){const n=this.getType(s);t.push(`var<${r}> ${e}: array< ${n}, ${i} >;`)}return t.join("\n")}getAttributes(e){const t=[];if("compute"===e&&(this.getBuiltin("global_invocation_id","globalId","vec3<u32>","attribute"),this.getBuiltin("workgroup_id","workgroupId","vec3<u32>","attribute"),this.getBuiltin("local_invocation_id","localId","vec3<u32>","attribute"),this.getBuiltin("num_workgroups","numWorkgroups","vec3<u32>","attribute"),this.renderer.hasFeature("subgroups")&&(this.enableDirective("subgroups",e),this.getBuiltin("subgroup_size","subgroupSize","u32","attribute"))),"vertex"===e||"compute"===e){const e=this.getBuiltins("attribute");e&&t.push(e);const r=this.getAttributesArray();for(let e=0,s=r.length;e<s;e++){const s=r[e],i=s.name,n=this.getType(s.type);t.push(`@location( ${e} ) ${i} : ${n}`)}}return t.join(",\n\t")}getStructMembers(e){const t=[];for(const r of e.members){const s=e.output?"@location( "+r.index+" ) ":"";let i=this.getType(r.type);r.atomic&&(i="atomic< "+i+" >"),t.push(`\t${s+r.name} : ${i}`)}return e.output&&t.push(`\t${this.getBuiltins("output")}`),t.join(",\n")}getStructs(e){let t="";const r=this.structs[e];if(r.length>0){const e=[];for(const t of r){let r=`struct ${t.name} {\n`;r+=this.getStructMembers(t),r+="\n};",e.push(r)}t="\n"+e.join("\n\n")+"\n"}return t}getVar(e,t,r=null){let s=`var ${t} : `;return s+=null!==r?this.generateArrayDeclaration(e,r):this.getType(e),s}getVars(e){const t=[],r=this.vars[e];if(void 0!==r)for(const e of r)t.push(`\t${this.getVar(e.type,e.name,e.count)};`);return`\n${t.join("\n")}\n`}getVaryings(e){const t=[];if("vertex"===e&&this.getBuiltin("position","Vertex","vec4<f32>","vertex"),"vertex"===e||"fragment"===e){const r=this.varyings,s=this.vars[e];for(let i=0;i<r.length;i++){const n=r[i];if(n.needsInterpolation){let e=`@location( ${i} )`;/^(int|uint|ivec|uvec)/.test(n.type)&&(e+=" @interpolate( flat )"),t.push(`${e} ${n.name} : ${this.getType(n.type)}`)}else"vertex"===e&&!1===s.includes(n)&&s.push(n)}}const r=this.getBuiltins(e);r&&t.push(r);const s=t.join(",\n\t");return"vertex"===e?this._getWGSLStruct("VaryingsStruct","\t"+s):s}isCustomStruct(e){return e.value.isStorageBufferAttribute&&null!==e.node.structTypeNode}getUniforms(e){const t=this.uniforms[e],r=[],s=[],i=[],n={};for(const i of t){const t=i.groupNode.name,o=this.bindingsIndexes[t];if("texture"===i.type||"cubeTexture"===i.type||"storageTexture"===i.type||"texture3D"===i.type){const t=i.node.value;let s;"fragment"!==e&&"compute"!==e||!1!==this.isUnfilterable(t)||!0===i.node.isStorageTextureNode||(this.isSampleCompare(t)?r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler_comparison;`):r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name}_sampler : sampler;`));let n="";const{primarySamples:a}=this.renderer.backend.utils.getTextureSampleData(t);if(a>1&&(n="_multisampled"),!0===t.isCubeTexture)s="texture_cube<f32>";else if(!0===t.isDataArrayTexture||!0===t.isCompressedArrayTexture)s="texture_2d_array<f32>";else if(!0===t.isDepthTexture)s=`texture_depth${n}_2d`;else if(!0===t.isVideoTexture)s="texture_external";else if(!0===t.isData3DTexture)s="texture_3d<f32>";else if(!0===i.node.isStorageTextureNode){s=`texture_storage_2d<${lw(t)}, ${this.getStorageAccess(i.node,e)}>`}else{s=`texture${n}_2d<${this.getComponentTypeFromTexture(t).charAt(0)}32>`}r.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var ${i.name} : ${s};`)}else if("buffer"===i.type||"storageBuffer"===i.type||"indirectStorageBuffer"===i.type){const t=i.node,r=this.getType(t.getNodeType(this)),n=t.bufferCount,a=n>0&&"buffer"===i.type?", "+n:"",u=t.isStorageBufferNode?`storage, ${this.getStorageAccess(t,e)}`:"uniform";if(this.isCustomStruct(i))s.push(`@binding( ${o.binding++} ) @group( ${o.group} ) var<${u}> ${i.name} : ${r};`);else{const e=`\tvalue : array< ${t.isAtomic?`atomic<${r}>`:`${r}`}${a} >`;s.push(this._getWGSLStructBinding(i.name,e,u,o.binding++,o.group))}}else{const e=this.getType(this.getVectorType(i.type)),t=i.groupNode.name;(n[t]||(n[t]={index:o.binding++,id:o.group,snippets:[]})).snippets.push(`\t${i.name} : ${e}`)}}for(const e in n){const t=n[e];i.push(this._getWGSLStructBinding(e,t.snippets.join(",\n"),"uniform",t.index,t.id))}let o=r.join("\n");return o+=s.join("\n"),o+=i.join("\n"),o}buildCode(){const e=null!==this.material?{fragment:{},vertex:{}}:{compute:{}};this.sortBindingGroups();for(const t in e){this.shaderStage=t;const r=e[t];r.uniforms=this.getUniforms(t),r.attributes=this.getAttributes(t),r.varyings=this.getVaryings(t),r.structs=this.getStructs(t),r.vars=this.getVars(t),r.codes=this.getCodes(t),r.directives=this.getDirectives(t),r.scopedArrays=this.getScopedArrays(t);let s="// code\n\n";s+=this.flowCode[t];const i=this.flowNodes[t],n=i[i.length-1],o=n.outputNode,a=void 0!==o&&!0===o.isOutputStructNode;for(const e of i){const i=this.getFlowData(e),u=e.name;if(u&&(s.length>0&&(s+="\n"),s+=`\t// flow -> ${u}\n`),s+=`${i.code}\n\t`,e===n&&"compute"!==t)if(s+="// result\n\n\t","vertex"===t)s+=`varyings.Vertex = ${i.result};`;else if("fragment"===t)if(a)r.returnType=o.getNodeType(this),r.structs+="var<private> output : "+r.returnType+";",s+=`return ${i.result};`;else{let e="\t@location(0) color: vec4<f32>";const t=this.getBuiltins("output");t&&(e+=",\n\t"+t),r.returnType="OutputStruct",r.structs+=this._getWGSLStruct("OutputStruct",e),r.structs+="\nvar<private> output : OutputStruct;",s+=`output.color = ${i.result};\n\n\treturn output;`}}r.flow=s}this.shaderStage=null,null!==this.material?(this.vertexShader=this._getWGSLVertexCode(e.vertex),this.fragmentShader=this._getWGSLFragmentCode(e.fragment)):this.computeShader=this._getWGSLComputeCode(e.compute,(this.object.workgroupSize||[64]).join(", "))}getMethod(e,t=null){let r;return null!==t&&(r=this._getWGSLMethod(e+"_"+t)),void 0===r&&(r=this._getWGSLMethod(e)),r||e}getType(e){return _w[e]||e}isAvailable(e){let t=bw[e];return void 0===t&&("float32Filterable"===e?t=this.renderer.hasFeature("float32-filterable"):"clipDistance"===e&&(t=this.renderer.hasFeature("clip-distances")),bw[e]=t),t}_getWGSLMethod(e){return void 0!==Nw[e]&&this._include(e),Sw[e]}_include(e){const t=Nw[e];return t.build(this),null!==this.currentFunctionNode&&this.currentFunctionNode.includes.push(t),t}_getWGSLVertexCode(e){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// varyings\n${e.varyings}\nvar<private> varyings : VaryingsStruct;\n\n// codes\n${e.codes}\n\n@vertex\nfn main( ${e.attributes} ) -> VaryingsStruct {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n\treturn varyings;\n\n}\n`}_getWGSLFragmentCode(e){return`${this.getSignature()}\n// global\n${Ew}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@fragment\nfn main( ${e.varyings} ) -> ${e.returnType} {\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLComputeCode(e,t){return`${this.getSignature()}\n// directives\n${e.directives}\n\n// system\nvar<private> instanceIndex : u32;\n\n// locals\n${e.scopedArrays}\n\n// structs\n${e.structs}\n\n// uniforms\n${e.uniforms}\n\n// codes\n${e.codes}\n\n@compute @workgroup_size( ${t} )\nfn main( ${e.attributes} ) {\n\n\t// system\n\tinstanceIndex = globalId.x + globalId.y * numWorkgroups.x * u32(${t}) + globalId.z * numWorkgroups.x * numWorkgroups.y * u32(${t});\n\n\t// vars\n\t${e.vars}\n\n\t// flow\n\t${e.flow}\n\n}\n`}_getWGSLStruct(e,t){return`\nstruct ${e} {\n${t}\n};`}_getWGSLStructBinding(e,t,r,s=0,i=0){const n=e+"Struct";return`${this._getWGSLStruct(n,t)}\n@binding( ${s} ) @group( ${i} )\nvar<${r}> ${e} : ${n};`}}class Aw{constructor(e){this.backend=e}getCurrentDepthStencilFormat(e){let t;return null!==e.depthTexture?t=this.getTextureFormatGPU(e.depthTexture):e.depth&&e.stencil?t=eS:e.depth&&(t=JN),t}getTextureFormatGPU(e){return this.backend.get(e).format}getTextureSampleData(e){let t;if(e.isFramebufferTexture)t=1;else if(e.isDepthTexture&&!e.renderTarget){const e=this.backend.renderer,r=e.getRenderTarget();t=r?r.samples:e.samples}else e.renderTarget&&(t=e.renderTarget.samples);t=t||1;const r=t>1&&null!==e.renderTarget&&!0!==e.isDepthTexture&&!0!==e.isFramebufferTexture;return{samples:t,primarySamples:r?1:t,isMSAA:r}}getCurrentColorFormat(e){let t;return t=null!==e.textures?this.getTextureFormatGPU(e.textures[0]):this.getPreferredCanvasFormat(),t}getCurrentColorSpace(e){return null!==e.textures?e.textures[0].colorSpace:this.backend.renderer.outputColorSpace}getPrimitiveTopology(e,t){return e.isPoints?Xv:e.isLineSegments||e.isMesh&&!0===t.wireframe?Kv:e.isLine?Yv:e.isMesh?Qv:void 0}getSampleCount(e){let t=1;return e>1&&(t=Math.pow(2,Math.floor(Math.log2(e))),2===t&&(t=4)),t}getSampleCountRenderContext(e){return null!==e.textures?this.getSampleCount(e.sampleCount):this.getSampleCount(this.backend.renderer.samples)}getPreferredCanvasFormat(){const e=this.backend.parameters.outputType;if(void 0===e)return navigator.gpu.getPreferredCanvasFormat();if(e===Ce)return UN;if(e===he)return XN;throw new Error("Unsupported outputType")}}const Rw=new Map([[Int8Array,["sint8","snorm8"]],[Uint8Array,["uint8","unorm8"]],[Int16Array,["sint16","snorm16"]],[Uint16Array,["uint16","unorm16"]],[Int32Array,["sint32","snorm32"]],[Uint32Array,["uint32","unorm32"]],[Float32Array,["float32"]]]),Cw=new Map([[ze,["float16"]]]),Mw=new Map([[Int32Array,"sint32"],[Int16Array,"sint32"],[Uint32Array,"uint32"],[Uint16Array,"uint32"],[Float32Array,"float32"]]);class Fw{constructor(e){this.backend=e}createAttribute(e,t){const r=this._getBufferAttribute(e),s=this.backend,i=s.get(r);let n=i.buffer;if(void 0===n){const o=s.device;let a=r.array;if(!1===e.normalized)if(a.constructor===Int16Array)a=new Int32Array(a);else if(a.constructor===Uint16Array&&(a=new Uint32Array(a),t&GPUBufferUsage.INDEX))for(let e=0;e<a.length;e++)65535===a[e]&&(a[e]=4294967295);if(r.array=a,(r.isStorageBufferAttribute||r.isStorageInstancedBufferAttribute)&&3===r.itemSize){a=new a.constructor(4*r.count);for(let e=0;e<r.count;e++)a.set(r.array.subarray(3*e,3*e+3),4*e);r.itemSize=4,r.array=a,i._force3to4BytesAlignment=!0}const u=a.byteLength+(4-a.byteLength%4)%4;n=o.createBuffer({label:r.name,size:u,usage:t,mappedAtCreation:!0}),new a.constructor(n.getMappedRange()).set(a),n.unmap(),i.buffer=n}}updateAttribute(e){const t=this._getBufferAttribute(e),r=this.backend,s=r.device,i=r.get(t),n=r.get(t).buffer;let o=t.array;if(!0===i._force3to4BytesAlignment){o=new o.constructor(4*t.count);for(let e=0;e<t.count;e++)o.set(t.array.subarray(3*e,3*e+3),4*e);t.array=o}const a=this._isTypedArray(o),u=t.updateRanges;if(0===u.length)s.queue.writeBuffer(n,0,o,0);else{const e=a?1:o.BYTES_PER_ELEMENT;for(let t=0,r=u.length;t<r;t++){const r=u[t];let l,d;if(!0===i._force3to4BytesAlignment){l=4*Math.floor(r.start/3)*e,d=4*Math.ceil(r.count/3)*e}else l=r.start*e,d=r.count*e;const c=l*(a?o.BYTES_PER_ELEMENT:1);s.queue.writeBuffer(n,c,o,l,d)}t.clearUpdateRanges()}}createShaderVertexBuffers(e){const t=e.getAttributes(),r=new Map;for(let e=0;e<t.length;e++){const s=t[e],i=s.array.BYTES_PER_ELEMENT,n=this._getBufferAttribute(s);let o=r.get(n);if(void 0===o){let e,t;!0===s.isInterleavedBufferAttribute?(e=s.data.stride*i,t=s.data.isInstancedInterleavedBuffer?ZE:QE):(e=s.itemSize*i,t=s.isInstancedBufferAttribute?ZE:QE),!1!==s.normalized||s.array.constructor!==Int16Array&&s.array.constructor!==Uint16Array||(e=4),o={arrayStride:e,attributes:[],stepMode:t},r.set(n,o)}const a=this._getVertexFormat(s),u=!0===s.isInterleavedBufferAttribute?s.offset*i:0;o.attributes.push({shaderLocation:e,offset:u,format:a})}return Array.from(r.values())}destroyAttribute(e){const t=this.backend;t.get(this._getBufferAttribute(e)).buffer.destroy(),t.delete(e)}async getArrayBufferAsync(e){const t=this.backend,r=t.device,s=t.get(this._getBufferAttribute(e)).buffer,i=s.size,n=r.createBuffer({label:`${e.name}_readback`,size:i,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),o=r.createCommandEncoder({label:`readback_encoder_${e.name}`});o.copyBufferToBuffer(s,0,n,0,i);const a=o.finish();r.queue.submit([a]),await n.mapAsync(GPUMapMode.READ);const u=n.getMappedRange(),l=new e.array.constructor(u.slice(0));return n.unmap(),l.buffer}_getVertexFormat(e){const{itemSize:t,normalized:r}=e,s=e.array.constructor,i=e.constructor;let n;if(1===t)n=Mw.get(s);else{const e=(Cw.get(i)||Rw.get(s))[r?1:0];if(e){const r=s.BYTES_PER_ELEMENT*t,i=4*Math.floor((r+3)/4)/s.BYTES_PER_ELEMENT;if(i%1)throw new Error("THREE.WebGPUAttributeUtils: Bad vertex format item size.");n=`${e}x${i}`}}return n||console.error("THREE.WebGPUAttributeUtils: Vertex format not supported yet."),n}_isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}_getBufferAttribute(e){return e.isInterleavedBufferAttribute&&(e=e.data),e}}class Bw{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend,r=t.device,s=[];let i=0;for(const r of e.bindings){const e={binding:i++,visibility:r.visibility};if(r.isUniformBuffer||r.isStorageBuffer){const t={};r.isStorageBuffer&&(4&r.visibility&&(r.access===Vs.READ_WRITE||r.access===Vs.WRITE_ONLY)?t.type=IE:t.type=LE),e.buffer=t}else if(r.isSampler){const t={};r.texture.isDepthTexture&&null!==r.texture.compareFunction&&(t.type="comparison"),e.sampler=t}else if(r.isSampledTexture&&r.texture.isVideoTexture)e.externalTexture={};else if(r.isSampledTexture&&r.store){const t={};t.format=this.backend.get(r.texture).texture.format;const s=r.access;t.access=s===Vs.READ_WRITE?UE:s===Vs.WRITE_ONLY?DE:VE,e.storageTexture=t}else if(r.isSampledTexture){const s={},{primarySamples:i}=t.utils.getTextureSampleData(r.texture);if(i>1&&(s.multisampled=!0,r.texture.isDepthTexture||(s.sampleType=GE)),r.texture.isDepthTexture)s.sampleType=kE;else if(r.texture.isDataTexture||r.texture.isDataArrayTexture||r.texture.isData3DTexture){const e=r.texture.type;e===T?s.sampleType=zE:e===b?s.sampleType=WE:e===B&&(this.backend.hasFeature("float32-filterable")?s.sampleType=OE:s.sampleType=GE)}r.isSampledCubeTexture?s.viewDimension=XE:r.texture.isDataArrayTexture||r.texture.isCompressedArrayTexture?s.viewDimension=qE:r.isSampledTexture3D&&(s.viewDimension=KE),e.texture=s}else console.error(`WebGPUBindingUtils: Unsupported binding "${r}".`);s.push(e)}return r.createBindGroupLayout({entries:s})}createBindings(e,t,r,s=0){const{backend:i,bindGroupLayoutCache:n}=this,o=i.get(e);let a,u=n.get(e.bindingsReference);void 0===u&&(u=this.createBindingsLayout(e),n.set(e.bindingsReference,u)),r>0&&(void 0===o.groups&&(o.groups=[],o.versions=[]),o.versions[r]===s&&(a=o.groups[r])),void 0===a&&(a=this.createBindGroup(e,u),r>0&&(o.groups[r]=a,o.versions[r]=s)),o.group=a,o.layout=u}updateBinding(e){const t=this.backend,r=t.device,s=e.buffer,i=t.get(e).buffer;r.queue.writeBuffer(i,0,s,0)}createBindGroupIndex(e,t){const r=this.backend.device,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,i=e[0],n=r.createBuffer({label:"bindingCameraIndex_"+i,size:16,usage:s});r.queue.writeBuffer(n,0,e,0);const o=[{binding:0,resource:{buffer:n}}];return r.createBindGroup({label:"bindGroupCameraIndex_"+i,layout:t,entries:o})}createBindGroup(e,t){const r=this.backend,s=r.device;let i=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,i=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=s.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:i});e.buffer=n}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const s=t.attribute;e.buffer=r.get(s).buffer}n.push({binding:i,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:i,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let o;if(void 0!==e.externalTexture)o=s.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,s=`view-${e.texture.width}-${e.texture.height}-${r}`;if(o=e[s],void 0===o){const i=YE;let n;n=t.isSampledCubeTexture?XE:t.isSampledTexture3D?KE:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?qE:jE,o=e[s]=e.texture.createView({aspect:i,dimension:n,mipLevelCount:r})}}n.push({binding:i,resource:o})}i++}return s.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}class Pw{constructor(e){this.backend=e}_getSampleCount(e){return this.backend.utils.getSampleCountRenderContext(e)}createRenderPipeline(e,t){const{object:r,material:s,geometry:i,pipeline:n}=e,{vertexProgram:o,fragmentProgram:a}=n,u=this.backend,l=u.device,d=u.utils,c=u.get(n),h=[];for(const t of e.getBindings()){const e=u.get(t);h.push(e.layout)}const p=u.attributeUtils.createShaderVertexBuffers(e);let g;!0===s.transparent&&s.blending!==G&&(g=this._getBlending(s));let m={};!0===s.stencilWrite&&(m={compare:this._getStencilCompare(s),failOp:this._getStencilOperation(s.stencilFail),depthFailOp:this._getStencilOperation(s.stencilZFail),passOp:this._getStencilOperation(s.stencilZPass)});const f=this._getColorWriteMask(s),y=[];if(null!==e.context.textures){const t=e.context.textures;for(let e=0;e<t.length;e++){const r=d.getTextureFormatGPU(t[e]);y.push({format:r,blend:g,writeMask:f})}}else{const t=d.getCurrentColorFormat(e.context);y.push({format:t,blend:g,writeMask:f})}const x=u.get(o).module,b=u.get(a).module,T=this._getPrimitiveState(r,i,s),_=this._getDepthCompare(s),v=d.getCurrentDepthStencilFormat(e.context),N=this._getSampleCount(e.context),S={label:`renderPipeline_${s.name||s.type}_${s.id}`,vertex:Object.assign({},x,{buffers:p}),fragment:Object.assign({},b,{targets:y}),primitive:T,multisample:{count:N,alphaToCoverageEnabled:s.alphaToCoverage&&N>1},layout:l.createPipelineLayout({bindGroupLayouts:h})},E={},w=e.context.depth,A=e.context.stencil;if(!0!==w&&!0!==A||(!0===w&&(E.format=v,E.depthWriteEnabled=s.depthWrite,E.depthCompare=_),!0===A&&(E.stencilFront=m,E.stencilBack={},E.stencilReadMask=s.stencilFuncMask,E.stencilWriteMask=s.stencilWriteMask),!0===s.polygonOffset&&(E.depthBias=s.polygonOffsetUnits,E.depthBiasSlopeScale=s.polygonOffsetFactor,E.depthBiasClamp=0),S.depthStencil=E),null===t)c.pipeline=l.createRenderPipeline(S);else{const e=new Promise((e=>{l.createRenderPipelineAsync(S).then((t=>{c.pipeline=t,e()}))}));t.push(e)}}createBundleEncoder(e){const t=this.backend,{utils:r,device:s}=t,i=r.getCurrentDepthStencilFormat(e),n={label:"renderBundleEncoder",colorFormats:[r.getCurrentColorFormat(e)],depthStencilFormat:i,sampleCount:this._getSampleCount(e)};return s.createRenderBundleEncoder(n)}createComputePipeline(e,t){const r=this.backend,s=r.device,i=r.get(e.computeProgram).module,n=r.get(e),o=[];for(const e of t){const t=r.get(e);o.push(t.layout)}n.pipeline=s.createComputePipeline({compute:i,layout:s.createPipelineLayout({bindGroupLayouts:o})})}_getBlending(e){let t,r;const s=e.blending,i=e.blendSrc,n=e.blendDst,o=e.blendEquation;if(s===qe){const s=null!==e.blendSrcAlpha?e.blendSrcAlpha:i,a=null!==e.blendDstAlpha?e.blendDstAlpha:n,u=null!==e.blendEquationAlpha?e.blendEquationAlpha:o;t={srcFactor:this._getBlendFactor(i),dstFactor:this._getBlendFactor(n),operation:this._getBlendOperation(o)},r={srcFactor:this._getBlendFactor(s),dstFactor:this._getBlendFactor(a),operation:this._getBlendOperation(u)}}else{const i=(e,s,i,n)=>{t={srcFactor:e,dstFactor:s,operation:bE},r={srcFactor:i,dstFactor:n,operation:bE}};if(e.premultipliedAlpha)switch(s){case V:i(aE,cE,aE,cE);break;case Ft:i(aE,aE,aE,aE);break;case Mt:i(oE,lE,oE,aE);break;case Ct:i(oE,uE,oE,dE)}else switch(s){case V:i(dE,cE,aE,cE);break;case Ft:i(dE,aE,dE,aE);break;case Mt:i(oE,lE,oE,aE);break;case Ct:i(oE,uE,oE,uE)}}if(void 0!==t&&void 0!==r)return{color:t,alpha:r};console.error("THREE.WebGPURenderer: Invalid blending: ",s)}_getBlendFactor(e){let t;switch(e){case Ke:t=oE;break;case Et:t=aE;break;case St:t=uE;break;case bt:t=lE;break;case Nt:t=dE;break;case xt:t=cE;break;case _t:t=hE;break;case yt:t=pE;break;case Tt:t=gE;break;case ft:t=mE;break;case vt:t=fE;break;case 211:t=yE;break;case 212:t=xE;break;default:console.error("THREE.WebGPURenderer: Blend factor not supported.",e)}return t}_getStencilCompare(e){let t;const r=e.stencilFunc;switch(r){case Gr:t=Jv;break;case Or:t=oN;break;case Ur:t=eN;break;case Vr:t=rN;break;case Dr:t=tN;break;case Lr:t=nN;break;case Ir:t=sN;break;case Pr:t=iN;break;default:console.error("THREE.WebGPURenderer: Invalid stencil function.",r)}return t}_getStencilOperation(e){let t;switch(e){case Xr:t=wE;break;case qr:t=AE;break;case jr:t=RE;break;case Hr:t=CE;break;case $r:t=ME;break;case Wr:t=FE;break;case zr:t=BE;break;case kr:t=PE;break;default:console.error("THREE.WebGPURenderer: Invalid stencil operation.",t)}return t}_getBlendOperation(e){let t;switch(e){case Xe:t=bE;break;case mt:t=TE;break;case gt:t=_E;break;case Yr:t=vE;break;case Kr:t=NE;break;default:console.error("THREE.WebGPUPipelineUtils: Blend equation not supported.",e)}return t}_getPrimitiveState(e,t,r){const s={},i=this.backend.utils;switch(s.topology=i.getPrimitiveTopology(e,r),null!==t.index&&!0===e.isLine&&!0!==e.isLineSegments&&(s.stripIndexFormat=t.index.array instanceof Uint16Array?gN:mN),r.side){case je:s.frontFace=dN,s.cullMode=pN;break;case N:s.frontFace=dN,s.cullMode=hN;break;case Se:s.frontFace=dN,s.cullMode=cN;break;default:console.error("THREE.WebGPUPipelineUtils: Unknown material.side value.",r.side)}return s}_getColorWriteMask(e){return!0===e.colorWrite?EE:SE}_getDepthCompare(e){let t;if(!1===e.depthTest)t=oN;else{const r=e.depthFunc;switch(r){case Ot:t=Jv;break;case Ut:t=oN;break;case Vt:t=eN;break;case Dt:t=rN;break;case Lt:t=tN;break;case It:t=nN;break;case Pt:t=sN;break;case Bt:t=iN;break;default:console.error("THREE.WebGPUPipelineUtils: Invalid depth function.",r)}}return t}}class Iw extends Hv{constructor(e,t,r=2048){super(r),this.device=e,this.type=t,this.querySet=this.device.createQuerySet({type:"timestamp",count:this.maxQueries,label:`queryset_global_timestamp_${t}`});const s=8*this.maxQueries;this.resolveBuffer=this.device.createBuffer({label:`buffer_timestamp_resolve_${t}`,size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.resultBuffer=this.device.createBuffer({label:`buffer_timestamp_result_${t}`,size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ})}allocateQueriesForContext(e){if(!this.trackTimestamp||this.isDisposed)return null;if(this.currentQueryIndex+2>this.maxQueries)return ht(`WebGPUTimestampQueryPool [${this.type}]: Maximum number of queries exceeded, when using trackTimestamp it is necessary to resolves the queries via renderer.resolveTimestampsAsync( THREE.TimestampQuery.${this.type.toUpperCase()} ).`),null;const t=this.currentQueryIndex;return this.currentQueryIndex+=2,this.queryOffsets.set(e.id,t),t}async resolveQueriesAsync(){if(!this.trackTimestamp||0===this.currentQueryIndex||this.isDisposed)return this.lastValue;if(this.pendingResolve)return this.pendingResolve;this.pendingResolve=this._resolveQueries();try{return await this.pendingResolve}finally{this.pendingResolve=null}}async _resolveQueries(){if(this.isDisposed)return this.lastValue;try{if("unmapped"!==this.resultBuffer.mapState)return this.lastValue;const e=new Map(this.queryOffsets),t=this.currentQueryIndex,r=8*t;this.currentQueryIndex=0,this.queryOffsets.clear();const s=this.device.createCommandEncoder();s.resolveQuerySet(this.querySet,0,t,this.resolveBuffer,0),s.copyBufferToBuffer(this.resolveBuffer,0,this.resultBuffer,0,r);const i=s.finish();if(this.device.queue.submit([i]),"unmapped"!==this.resultBuffer.mapState)return this.lastValue;if(await this.resultBuffer.mapAsync(GPUMapMode.READ,0,r),this.isDisposed)return"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue;const n=new BigUint64Array(this.resultBuffer.getMappedRange(0,r));let o=0;for(const[,t]of e){const e=n[t],r=n[t+1];o+=Number(r-e)/1e6}return this.resultBuffer.unmap(),this.lastValue=o,o}catch(e){return console.error("Error resolving queries:",e),"mapped"===this.resultBuffer.mapState&&this.resultBuffer.unmap(),this.lastValue}}async dispose(){if(!this.isDisposed){if(this.isDisposed=!0,this.pendingResolve)try{await this.pendingResolve}catch(e){console.error("Error waiting for pending resolve:",e)}if(this.resultBuffer&&"mapped"===this.resultBuffer.mapState)try{this.resultBuffer.unmap()}catch(e){console.error("Error unmapping buffer:",e)}this.querySet&&(this.querySet.destroy(),this.querySet=null),this.resolveBuffer&&(this.resolveBuffer.destroy(),this.resolveBuffer=null),this.resultBuffer&&(this.resultBuffer.destroy(),this.resultBuffer=null),this.queryOffsets.clear(),this.pendingResolve=null}}}class Lw extends Rv{constructor(e={}){super(e),this.isWebGPUBackend=!0,this.parameters.alpha=void 0===e.alpha||e.alpha,this.parameters.requiredLimits=void 0===e.requiredLimits?{}:e.requiredLimits,this.device=null,this.context=null,this.colorBuffer=null,this.defaultRenderPassdescriptor=null,this.utils=new Aw(this),this.attributeUtils=new Fw(this),this.bindingUtils=new Bw(this),this.pipelineUtils=new Pw(this),this.textureUtils=new uw(this),this.occludedResolveCache=new Map}async init(e){await super.init(e);const t=this.parameters;let r;if(void 0===t.device){const e={powerPreference:t.powerPreference},s="undefined"!=typeof navigator?await navigator.gpu.requestAdapter(e):null;if(null===s)throw new Error("WebGPUBackend: Unable to create WebGPU adapter.");const i=Object.values(JE),n=[];for(const e of i)s.features.has(e)&&n.push(e);const o={requiredFeatures:n,requiredLimits:t.requiredLimits};r=await s.requestDevice(o)}else r=t.device;r.lost.then((t=>{const r={api:"WebGPU",message:t.message||"Unknown reason",reason:t.reason||null,originalEvent:t};e.onDeviceLost(r)}));const s=void 0!==t.context?t.context:e.domElement.getContext("webgpu");this.device=r,this.context=s;const i=t.alpha?"premultiplied":"opaque";this.trackTimestamp=this.trackTimestamp&&this.hasFeature(JE.TimestampQuery),this.context.configure({device:this.device,format:this.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC,alphaMode:i}),this.updateSize()}get coordinateSystem(){return d}async getArrayBufferAsync(e){return await this.attributeUtils.getArrayBufferAsync(e)}getContext(){return this.context}_getDefaultRenderPassDescriptor(){let e=this.defaultRenderPassdescriptor;if(null===e){const t=this.renderer;e={colorAttachments:[{view:null}]},!0!==this.renderer.depth&&!0!==this.renderer.stencil||(e.depthStencilAttachment={view:this.textureUtils.getDepthBuffer(t.depth,t.stencil).createView()});const r=e.colorAttachments[0];this.renderer.samples>0?r.view=this.colorBuffer.createView():r.resolveTarget=void 0,this.defaultRenderPassdescriptor=e}const t=e.colorAttachments[0];return this.renderer.samples>0?t.resolveTarget=this.context.getCurrentTexture().createView():t.view=this.context.getCurrentTexture().createView(),e}_getRenderPassDescriptor(e,t={}){const r=e.renderTarget,s=this.get(r);let i=s.descriptors;if(void 0===i||s.width!==r.width||s.height!==r.height||s.dimensions!==r.dimensions||s.activeMipmapLevel!==e.activeMipmapLevel||s.activeCubeFace!==e.activeCubeFace||s.samples!==r.samples){i={},s.descriptors=i;const e=()=>{r.removeEventListener("dispose",e),this.delete(r)};!1===r.hasEventListener("dispose",e)&&r.addEventListener("dispose",e)}const n=e.getCacheKey();let o=i[n];if(void 0===o){const t=e.textures,a=[];let u;for(let s=0;s<t.length;s++){const i=this.get(t[s]),n={label:`colorAttachment_${s}`,baseMipLevel:e.activeMipmapLevel,mipLevelCount:1,baseArrayLayer:e.activeCubeFace,arrayLayerCount:1,dimension:jE};r.isRenderTarget3D?(u=e.activeCubeFace,n.baseArrayLayer=0,n.dimension=KE,n.depthOrArrayLayers=t[s].image.depth):r.isRenderTargetArray&&(n.dimension=qE,n.depthOrArrayLayers=t[s].image.depth);const o=i.texture.createView(n);let l,d;void 0!==i.msaaTexture?(l=i.msaaTexture.createView(),d=o):(l=o,d=void 0),a.push({view:l,resolveTarget:d,depthSlice:u})}if(o={textureViews:a},e.depth){const t=this.get(e.depthTexture);o.depthStencilView=t.texture.createView()}i[n]=o,s.width=r.width,s.height=r.height,s.samples=r.samples,s.activeMipmapLevel=e.activeMipmapLevel,s.activeCubeFace=e.activeCubeFace,s.dimensions=r.dimensions}const a={colorAttachments:[]};for(let e=0;e<o.textureViews.length;e++){const r=o.textureViews[e];let s={r:0,g:0,b:0,a:1};0===e&&t.clearValue&&(s=t.clearValue),a.colorAttachments.push({view:r.view,depthSlice:r.depthSlice,resolveTarget:r.resolveTarget,loadOp:t.loadOp||uN,storeOp:t.storeOp||aN,clearValue:s})}return o.depthStencilView&&(a.depthStencilAttachment={view:o.depthStencilView}),a}beginRender(e){const t=this.get(e),r=this.device,s=e.occlusionQueryCount;let i,n;s>0&&(t.currentOcclusionQuerySet&&t.currentOcclusionQuerySet.destroy(),t.currentOcclusionQueryBuffer&&t.currentOcclusionQueryBuffer.destroy(),t.currentOcclusionQuerySet=t.occlusionQuerySet,t.currentOcclusionQueryBuffer=t.occlusionQueryBuffer,t.currentOcclusionQueryObjects=t.occlusionQueryObjects,i=r.createQuerySet({type:"occlusion",count:s,label:`occlusionQuerySet_${e.id}`}),t.occlusionQuerySet=i,t.occlusionQueryIndex=0,t.occlusionQueryObjects=new Array(s),t.lastOcclusionObject=null),n=null===e.textures?this._getDefaultRenderPassDescriptor():this._getRenderPassDescriptor(e,{loadOp:uN}),this.initTimestampQuery(e,n),n.occlusionQuerySet=i;const o=n.depthStencilAttachment;if(null!==e.textures){const t=n.colorAttachments;for(let r=0;r<t.length;r++){const s=t[r];e.clearColor?(s.clearValue=0===r?e.clearColorValue:{r:0,g:0,b:0,a:1},s.loadOp=lN,s.storeOp=aN):(s.loadOp=uN,s.storeOp=aN)}}else{const t=n.colorAttachments[0];e.clearColor?(t.clearValue=e.clearColorValue,t.loadOp=lN,t.storeOp=aN):(t.loadOp=uN,t.storeOp=aN)}e.depth&&(e.clearDepth?(o.depthClearValue=e.clearDepthValue,o.depthLoadOp=lN,o.depthStoreOp=aN):(o.depthLoadOp=uN,o.depthStoreOp=aN)),e.stencil&&(e.clearStencil?(o.stencilClearValue=e.clearStencilValue,o.stencilLoadOp=lN,o.stencilStoreOp=aN):(o.stencilLoadOp=uN,o.stencilStoreOp=aN));const a=r.createCommandEncoder({label:"renderContext_"+e.id}),u=a.beginRenderPass(n);if(t.descriptor=n,t.encoder=a,t.currentPass=u,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.renderBundles=[],e.viewport&&this.updateViewport(e),e.scissor){const{x:t,y:r,width:s,height:i}=e.scissorValue;u.setScissorRect(t,r,s,i)}}finishRender(e){const t=this.get(e),r=e.occlusionQueryCount;if(t.renderBundles.length>0&&t.currentPass.executeBundles(t.renderBundles),r>t.occlusionQueryIndex&&t.currentPass.endOcclusionQuery(),t.currentPass.end(),r>0){const s=8*r;let i=this.occludedResolveCache.get(s);void 0===i&&(i=this.device.createBuffer({size:s,usage:GPUBufferUsage.QUERY_RESOLVE|GPUBufferUsage.COPY_SRC}),this.occludedResolveCache.set(s,i));const n=this.device.createBuffer({size:s,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ});t.encoder.resolveQuerySet(t.occlusionQuerySet,0,r,i,0),t.encoder.copyBufferToBuffer(i,0,n,0,s),t.occlusionQueryBuffer=n,this.resolveOccludedAsync(e)}if(this.device.queue.submit([t.encoder.finish()]),null!==e.textures){const t=e.textures;for(let e=0;e<t.length;e++){const r=t[e];!0===r.generateMipmaps&&this.textureUtils.generateMipmaps(r)}}}isOccluded(e,t){const r=this.get(e);return r.occluded&&r.occluded.has(t)}async resolveOccludedAsync(e){const t=this.get(e),{currentOcclusionQueryBuffer:r,currentOcclusionQueryObjects:s}=t;if(r&&s){const e=new WeakSet;t.currentOcclusionQueryObjects=null,t.currentOcclusionQueryBuffer=null,await r.mapAsync(GPUMapMode.READ);const i=r.getMappedRange(),n=new BigUint64Array(i);for(let t=0;t<s.length;t++)n[t]===BigInt(0)&&e.add(s[t]);r.destroy(),t.occluded=e}}updateViewport(e){const{currentPass:t}=this.get(e),{x:r,y:s,width:i,height:n,minDepth:o,maxDepth:a}=e.viewportValue;t.setViewport(r,s,i,n,o,a)}getClearColor(){const e=super.getClearColor();return!0===this.renderer.alpha&&(e.r*=e.a,e.g*=e.a,e.b*=e.a),e}clear(e,t,r,s=null){const i=this.device,n=this.renderer;let o,a,u,l,d=[];if(e){const e=this.getClearColor();a={r:e.r,g:e.g,b:e.b,a:e.a}}if(null===s){u=n.depth,l=n.stencil;const t=this._getDefaultRenderPassDescriptor();if(e){d=t.colorAttachments;const e=d[0];e.clearValue=a,e.loadOp=lN,e.storeOp=aN}(u||l)&&(o=t.depthStencilAttachment)}else{u=s.depth,l=s.stencil;const i={loadOp:e?lN:uN,clearValue:e?a:void 0};u&&(i.depthLoadOp=t?lN:uN,i.depthClearValue=t?n.getClearDepth():void 0,i.depthStoreOp=aN),l&&(i.stencilLoadOp=r?lN:uN,i.stencilClearValue=r?n.getClearStencil():void 0,i.stencilStoreOp=aN);const c=this._getRenderPassDescriptor(s,i);d=c.colorAttachments,o=c.depthStencilAttachment}u&&o&&void 0===o.depthLoadOp&&(t?(o.depthLoadOp=lN,o.depthClearValue=n.getClearDepth(),o.depthStoreOp=aN):(o.depthLoadOp=uN,o.depthStoreOp=aN)),l&&o&&void 0===o.stencilLoadOp&&(r?(o.stencilLoadOp=lN,o.stencilClearValue=n.getClearStencil(),o.stencilStoreOp=aN):(o.stencilLoadOp=uN,o.stencilStoreOp=aN));const c=i.createCommandEncoder({label:"clear"});c.beginRenderPass({colorAttachments:d,depthStencilAttachment:o}).end(),i.queue.submit([c.finish()])}beginCompute(e){const t=this.get(e),r={label:"computeGroup_"+e.id};this.initTimestampQuery(e,r),t.cmdEncoderGPU=this.device.createCommandEncoder({label:"computeGroup_"+e.id}),t.passEncoderGPU=t.cmdEncoderGPU.beginComputePass(r)}compute(e,t,r,s){const{passEncoderGPU:i}=this.get(e),n=this.get(s).pipeline;i.setPipeline(n);for(let e=0,t=r.length;e<t;e++){const t=r[e],s=this.get(t);i.setBindGroup(e,s.group)}const o=this.device.limits.maxComputeWorkgroupsPerDimension,a=this.get(t);void 0===a.dispatchSize&&(a.dispatchSize={x:0,y:1,z:1});const{dispatchSize:u}=a;t.dispatchCount>o?(u.x=Math.min(t.dispatchCount,o),u.y=Math.ceil(t.dispatchCount/o)):u.x=t.dispatchCount,i.dispatchWorkgroups(u.x,u.y,u.z)}finishCompute(e){const t=this.get(e);t.passEncoderGPU.end(),this.device.queue.submit([t.cmdEncoderGPU.finish()])}async waitForGPU(){await this.device.queue.onSubmittedWorkDone()}draw(e,t){const{object:r,material:s,context:i,pipeline:n}=e,o=e.getBindings(),a=this.get(i),u=this.get(n).pipeline,l=a.currentSets,d=a.currentPass,c=e.getDrawParameters();if(null===c)return;l.pipeline!==u&&(d.setPipeline(u),l.pipeline=u);const h=l.bindingGroups;for(let e=0,t=o.length;e<t;e++){const t=o[e],r=this.get(t);h[t.index]!==t.id&&(d.setBindGroup(t.index,r.group),h[t.index]=t.id)}const p=e.getIndex(),g=null!==p;if(!0===g&&l.index!==p){const e=this.get(p).buffer,t=p.array instanceof Uint16Array?gN:mN;d.setIndexBuffer(e,t),l.index=p}const m=e.getVertexBuffers();for(let e=0,t=m.length;e<t;e++){const t=m[e];if(l.attributes[e]!==t){const r=this.get(t).buffer;d.setVertexBuffer(e,r),l.attributes[e]=t}}if(void 0!==a.occlusionQuerySet){const e=a.lastOcclusionObject;e!==r&&(null!==e&&!0===e.occlusionTest&&(d.endOcclusionQuery(),a.occlusionQueryIndex++),!0===r.occlusionTest&&(d.beginOcclusionQuery(a.occlusionQueryIndex),a.occlusionQueryObjects[a.occlusionQueryIndex]=r),a.lastOcclusionObject=r)}!0===i.stencil&&!0===s.stencilWrite&&a.currentStencilRef!==s.stencilRef&&(d.setStencilReference(s.stencilRef),a.currentStencilRef=s.stencilRef);const f=()=>{if(!0===r.isBatchedMesh){const e=r._multiDrawStarts,s=r._multiDrawCounts,i=r._multiDrawCount,n=r._multiDrawInstances;null!==n&&ht("THREE.WebGPUBackend: renderMultiDrawInstances has been deprecated and will be removed in r184. Append to renderMultiDraw arguments and use indirection.");for(let o=0;o<i;o++){const i=n?n[o]:1,a=i>1?0:o;!0===g?d.drawIndexed(s[o],i,e[o]/p.array.BYTES_PER_ELEMENT,0,a):d.draw(s[o],i,e[o],a),t.update(r,s[o],i)}}else if(!0===g){const{vertexCount:s,instanceCount:i,firstVertex:n}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;d.drawIndexedIndirect(e,0)}else d.drawIndexed(s,i,n,0,0);t.update(r,s,i)}else{const{vertexCount:s,instanceCount:i,firstVertex:n}=c,o=e.getIndirect();if(null!==o){const e=this.get(o).buffer;d.drawIndirect(e,0)}else d.draw(s,i,n,0);t.update(r,s,i)}};if(e.camera.isArrayCamera&&e.camera.cameras.length>0){const t=this.get(e.camera),s=e.camera.cameras,n=e.getBindingGroup("cameraIndex");if(void 0===t.indexesGPU||t.indexesGPU.length!==s.length){const e=this.get(n),r=[],i=new Uint32Array([0,0,0,0]);for(let t=0,n=s.length;t<n;t++){i[0]=t;const s=this.bindingUtils.createBindGroupIndex(i,e.layout);r.push(s)}t.indexesGPU=r}const o=this.renderer.getPixelRatio();for(let e=0,a=s.length;e<a;e++){const a=s[e];if(r.layers.test(a.layers)){const r=a.viewport;d.setViewport(Math.floor(r.x*o),Math.floor(r.y*o),Math.floor(r.width*o),Math.floor(r.height*o),i.viewportValue.minDepth,i.viewportValue.maxDepth),d.setBindGroup(n.index,t.indexesGPU[e]),f()}}}else f()}needsRenderUpdate(e){const t=this.get(e),{object:r,material:s}=e,i=this.utils,n=i.getSampleCountRenderContext(e.context),o=i.getCurrentColorSpace(e.context),a=i.getCurrentColorFormat(e.context),u=i.getCurrentDepthStencilFormat(e.context),l=i.getPrimitiveTopology(r,s);let d=!1;return t.material===s&&t.materialVersion===s.version&&t.transparent===s.transparent&&t.blending===s.blending&&t.premultipliedAlpha===s.premultipliedAlpha&&t.blendSrc===s.blendSrc&&t.blendDst===s.blendDst&&t.blendEquation===s.blendEquation&&t.blendSrcAlpha===s.blendSrcAlpha&&t.blendDstAlpha===s.blendDstAlpha&&t.blendEquationAlpha===s.blendEquationAlpha&&t.colorWrite===s.colorWrite&&t.depthWrite===s.depthWrite&&t.depthTest===s.depthTest&&t.depthFunc===s.depthFunc&&t.stencilWrite===s.stencilWrite&&t.stencilFunc===s.stencilFunc&&t.stencilFail===s.stencilFail&&t.stencilZFail===s.stencilZFail&&t.stencilZPass===s.stencilZPass&&t.stencilFuncMask===s.stencilFuncMask&&t.stencilWriteMask===s.stencilWriteMask&&t.side===s.side&&t.alphaToCoverage===s.alphaToCoverage&&t.sampleCount===n&&t.colorSpace===o&&t.colorFormat===a&&t.depthStencilFormat===u&&t.primitiveTopology===l&&t.clippingContextCacheKey===e.clippingContextCacheKey||(t.material=s,t.materialVersion=s.version,t.transparent=s.transparent,t.blending=s.blending,t.premultipliedAlpha=s.premultipliedAlpha,t.blendSrc=s.blendSrc,t.blendDst=s.blendDst,t.blendEquation=s.blendEquation,t.blendSrcAlpha=s.blendSrcAlpha,t.blendDstAlpha=s.blendDstAlpha,t.blendEquationAlpha=s.blendEquationAlpha,t.colorWrite=s.colorWrite,t.depthWrite=s.depthWrite,t.depthTest=s.depthTest,t.depthFunc=s.depthFunc,t.stencilWrite=s.stencilWrite,t.stencilFunc=s.stencilFunc,t.stencilFail=s.stencilFail,t.stencilZFail=s.stencilZFail,t.stencilZPass=s.stencilZPass,t.stencilFuncMask=s.stencilFuncMask,t.stencilWriteMask=s.stencilWriteMask,t.side=s.side,t.alphaToCoverage=s.alphaToCoverage,t.sampleCount=n,t.colorSpace=o,t.colorFormat=a,t.depthStencilFormat=u,t.primitiveTopology=l,t.clippingContextCacheKey=e.clippingContextCacheKey,d=!0),d}getRenderCacheKey(e){const{object:t,material:r}=e,s=this.utils,i=e.context;return[r.transparent,r.blending,r.premultipliedAlpha,r.blendSrc,r.blendDst,r.blendEquation,r.blendSrcAlpha,r.blendDstAlpha,r.blendEquationAlpha,r.colorWrite,r.depthWrite,r.depthTest,r.depthFunc,r.stencilWrite,r.stencilFunc,r.stencilFail,r.stencilZFail,r.stencilZPass,r.stencilFuncMask,r.stencilWriteMask,r.side,s.getSampleCountRenderContext(i),s.getCurrentColorSpace(i),s.getCurrentColorFormat(i),s.getCurrentDepthStencilFormat(i),s.getPrimitiveTopology(t,r),e.getGeometryCacheKey(),e.clippingContextCacheKey].join()}createSampler(e){this.textureUtils.createSampler(e)}destroySampler(e){this.textureUtils.destroySampler(e)}createDefaultTexture(e){this.textureUtils.createDefaultTexture(e)}createTexture(e,t){this.textureUtils.createTexture(e,t)}updateTexture(e,t){this.textureUtils.updateTexture(e,t)}generateMipmaps(e){this.textureUtils.generateMipmaps(e)}destroyTexture(e){this.textureUtils.destroyTexture(e)}async copyTextureToBuffer(e,t,r,s,i,n){return this.textureUtils.copyTextureToBuffer(e,t,r,s,i,n)}initTimestampQuery(e,t){if(!this.trackTimestamp)return;const r=e.isComputeNode?"compute":"render";this.timestampQueryPool[r]||(this.timestampQueryPool[r]=new Iw(this.device,r,2048));const s=this.timestampQueryPool[r],i=s.allocateQueriesForContext(e);t.timestampWrites={querySet:s.querySet,beginningOfPassWriteIndex:i,endOfPassWriteIndex:i+1}}createNodeBuilder(e,t){return new ww(e,t)}createProgram(e){this.get(e).module={module:this.device.createShaderModule({code:e.code,label:e.stage+(""!==e.name?`_${e.name}`:"")}),entryPoint:"main"}}destroyProgram(e){this.delete(e)}createRenderPipeline(e,t){this.pipelineUtils.createRenderPipeline(e,t)}createComputePipeline(e,t){this.pipelineUtils.createComputePipeline(e,t)}beginBundle(e){const t=this.get(e);t._currentPass=t.currentPass,t._currentSets=t.currentSets,t.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.currentPass=this.pipelineUtils.createBundleEncoder(e)}finishBundle(e,t){const r=this.get(e),s=r.currentPass.finish();this.get(t).bundleGPU=s,r.currentSets=r._currentSets,r.currentPass=r._currentPass}addBundle(e,t){this.get(e).renderBundles.push(this.get(t).bundleGPU)}createBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBindings(e,t,r,s){this.bindingUtils.createBindings(e,t,r,s)}updateBinding(e){this.bindingUtils.updateBinding(e)}createIndexAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.INDEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.VERTEX|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}createIndirectStorageAttribute(e){this.attributeUtils.createAttribute(e,GPUBufferUsage.STORAGE|GPUBufferUsage.INDIRECT|GPUBufferUsage.COPY_SRC|GPUBufferUsage.COPY_DST)}updateAttribute(e){this.attributeUtils.updateAttribute(e)}destroyAttribute(e){this.attributeUtils.destroyAttribute(e)}updateSize(){this.colorBuffer=this.textureUtils.getColorBuffer(),this.defaultRenderPassdescriptor=null}getMaxAnisotropy(){return 16}hasFeature(e){return this.device.features.has(e)}copyTextureToTexture(e,t,r=null,s=null,i=0,n=0){let o=0,a=0,u=0,l=0,d=0,c=0,h=e.image.width,p=e.image.height,g=1;null!==r&&(!0===r.isBox3?(l=r.min.x,d=r.min.y,c=r.min.z,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=r.max.z-r.min.z):(l=r.min.x,d=r.min.y,h=r.max.x-r.min.x,p=r.max.y-r.min.y,g=1)),null!==s&&(o=s.x,a=s.y,u=s.z||0);const m=this.device.createCommandEncoder({label:"copyTextureToTexture_"+e.id+"_"+t.id}),f=this.get(e).texture,y=this.get(t).texture;m.copyTextureToTexture({texture:f,mipLevel:i,origin:{x:l,y:d,z:c}},{texture:y,mipLevel:n,origin:{x:o,y:a,z:u}},[h,p,g]),this.device.queue.submit([m.finish()]),0===n&&t.generateMipmaps&&this.textureUtils.generateMipmaps(t)}copyFramebufferToTexture(e,t,r){const s=this.get(t);let i=null;i=t.renderTarget?e.isDepthTexture?this.get(t.depthTexture).texture:this.get(t.textures[0]).texture:e.isDepthTexture?this.textureUtils.getDepthBuffer(t.depth,t.stencil):this.context.getCurrentTexture();const n=this.get(e).texture;if(i.format!==n.format)return void console.error("WebGPUBackend: copyFramebufferToTexture: Source and destination formats do not match.",i.format,n.format);let o;if(s.currentPass?(s.currentPass.end(),o=s.encoder):o=this.device.createCommandEncoder({label:"copyFramebufferToTexture_"+e.id}),o.copyTextureToTexture({texture:i,origin:[r.x,r.y,0]},{texture:n},[r.z,r.w]),e.generateMipmaps&&this.textureUtils.generateMipmaps(e),s.currentPass){const{descriptor:e}=s;for(let t=0;t<e.colorAttachments.length;t++)e.colorAttachments[t].loadOp=uN;if(t.depth&&(e.depthStencilAttachment.depthLoadOp=uN),t.stencil&&(e.depthStencilAttachment.stencilLoadOp=uN),s.currentPass=o.beginRenderPass(e),s.currentSets={attributes:{},bindingGroups:[],pipeline:null,index:null},t.viewport&&this.updateViewport(t),t.scissor){const{x:e,y:r,width:i,height:n}=t.scissorValue;s.currentPass.setScissorRect(e,r,i,n)}}else this.device.queue.submit([o.finish()])}}class Dw extends Qr{constructor(e,t,r,s,i,n){super(e,t,r,s,i,n),this.iesMap=null}copy(e,t){return super.copy(e,t),this.iesMap=e.iesMap,this}}class Vw extends k_{constructor(){super(),this.addLight(Vb,Zr),this.addLight(m_,Jr),this.addLight(b_,es),this.addLight(T_,Qr),this.addLight(v_,ts),this.addLight(N_,rs),this.addLight(S_,ss),this.addLight(__,Dw),this.addToneMapping(ex,is),this.addToneMapping(tx,ns),this.addToneMapping(rx,os),this.addToneMapping(ix,as),this.addToneMapping(ux,us),this.addToneMapping(lx,ls)}}class Uw extends av{constructor(e={}){let t;e.forceWebGL?t=qv:(t=Lw,e.getFallback=()=>(console.warn("THREE.WebGPURenderer: WebGPU is not available, running under WebGL2 backend."),new qv(e)));super(new t(e),e),this.library=new Vw,this.isWebGPURenderer=!0}}class Ow extends ds{constructor(){super(),this.isBundleGroup=!0,this.type="BundleGroup",this.static=!0,this.version=0}set needsUpdate(e){!0===e&&this.version++}}class Gw{constructor(e,t=en(0,0,1,1)){this.renderer=e,this.outputNode=t,this.outputColorTransform=!0,this.needsUpdate=!0;const r=new wh;r.name="PostProcessing",this._quadMesh=new sy(r)}render(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=de;const s=e.xr.enabled;e.xr.enabled=!1,this._quadMesh.render(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}dispose(){this._quadMesh.material.dispose()}_update(){if(!0===this.needsUpdate){const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;this._quadMesh.material.fragmentNode=!0===this.outputColorTransform?Bu(this.outputNode,t,r):this.outputNode.context({toneMapping:t,outputColorSpace:r}),this._quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this._update();const e=this.renderer,t=e.toneMapping,r=e.outputColorSpace;e.toneMapping=p,e.outputColorSpace=de;const s=e.xr.enabled;e.xr.enabled=!1,await this._quadMesh.renderAsync(e),e.xr.enabled=s,e.toneMapping=t,e.outputColorSpace=r}}class kw extends pe{constructor(e=1,t=1){super(),this.image={width:e,height:t},this.magFilter=q,this.minFilter=q,this.isStorageTexture=!0}}class zw extends cy{constructor(e,t){super(e,t,Uint32Array),this.isIndirectStorageBufferAttribute=!0}}class Ww extends cs{constructor(e){super(e),this.textures={},this.nodes={}}load(e,t,r,s){const i=new hs(this.manager);i.setPath(this.path),i.setRequestHeader(this.requestHeader),i.setWithCredentials(this.withCredentials),i.load(e,(r=>{try{t(this.parse(JSON.parse(r)))}catch(t){s?s(t):console.error(t),this.manager.itemError(e)}}),r,s)}parseNodes(e){const t={};if(void 0!==e){for(const r of e){const{uuid:e,type:s}=r;t[e]=this.createNodeFromType(s),t[e].uuid=e}const r={nodes:t,textures:this.textures};for(const s of e){s.meta=r;t[s.uuid].deserialize(s),delete s.meta}}return t}parse(e){const t=this.createNodeFromType(e.type);t.uuid=e.uuid;const r={nodes:this.parseNodes(e.nodes),textures:this.textures};return e.meta=r,t.deserialize(e),delete e.meta,t}setTextures(e){return this.textures=e,this}setNodes(e){return this.nodes=e,this}createNodeFromType(e){return void 0===this.nodes[e]?(console.error("THREE.NodeLoader: Node type not found:",e),zi()):Fi(new this.nodes[e])}}class $w extends ps{constructor(e){super(e),this.nodes={},this.nodeMaterials={}}parse(e){const t=super.parse(e),r=this.nodes,s=e.inputNodes;for(const e in s){const i=s[e];t[e]=r[i]}return t}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}createMaterialFromType(e){const t=this.nodeMaterials[e];return void 0!==t?new t:super.createMaterialFromType(e)}}class Hw extends gs{constructor(e){super(e),this.nodes={},this.nodeMaterials={},this._nodesJSON=null}setNodes(e){return this.nodes=e,this}setNodeMaterials(e){return this.nodeMaterials=e,this}parse(e,t){this._nodesJSON=e.nodes;const r=super.parse(e,t);return this._nodesJSON=null,r}parseNodes(e,t){if(void 0!==e){const r=new Ww;return r.setNodes(this.nodes),r.setTextures(t),r.parseNodes(e)}return{}}parseMaterials(e,t){const r={};if(void 0!==e){const s=this.parseNodes(this._nodesJSON,t),i=new $w;i.setTextures(t),i.setNodes(s),i.setNodeMaterials(this.nodeMaterials);for(let t=0,s=e.length;t<s;t++){const s=e[t];r[s.uuid]=i.parse(s)}}return r}}class jw extends ds{constructor(){super(),this.isClippingGroup=!0,this.clippingPlanes=[],this.enabled=!0,this.clipIntersection=!1,this.clipShadows=!1}}export{as as ACESFilmicToneMapping,zc as AONode,Xe as AddEquation,Z as AddOperation,Ft as AdditiveBlending,us as AgXToneMapping,Wt as AlphaFormat,Fr as AlwaysCompare,Ut as AlwaysDepth,Or as AlwaysStencilFunc,ts as AmbientLight,v_ as AmbientLightNode,Ib as AnalyticLightNode,$e as ArrayCamera,$s as ArrayElementNode,dn as ArrayNode,Qn as AssignNode,Pu as AttributeNode,N as BackSide,qh as BasicEnvironmentNode,Ue as BasicShadowMap,Rc as BatchNode,$ as BoxGeometry,le as BufferAttribute,gu as BufferAttributeNode,ue as BufferGeometry,Wu as BufferNode,Rd as BumpMapNode,Ow as BundleGroup,Nu as BypassNode,ot as ByteType,_u as CacheNode,Ee as Camera,os as CineonToneMapping,Nr as ClampToEdgeWrapping,jw as ClippingGroup,dx as CodeNode,e as Color,c as ColorManagement,ru as ColorSpaceNode,bu as ComputeNode,ei as ConstNode,ka as ContextNode,Hs as ConvertNode,X as CubeCamera,E as CubeReflectionMapping,w as CubeRefractionMapping,K as CubeTexture,Jl as CubeTextureNode,ae as CubeUVReflectionMapping,At as CullFaceBack,Rt as CullFaceFront,wt as CullFaceNone,qe as CustomBlending,Ye as CylinderGeometry,F as DataArrayTexture,rt as DataTexture,Wr as DecrementStencilOp,kr as DecrementWrapStencilOp,Ae as DepthFormat,we as DepthStencilFormat,L as DepthTexture,Jr as DirectionalLight,m_ as DirectionalLightNode,Se as DoubleSide,Tt as DstAlphaFactor,_t as DstColorFactor,y as DynamicDrawUsage,Hg as EnvironmentNode,Cr as EqualCompare,Lt as EqualDepth,Dr as EqualStencilFunc,Oh as EquirectUVNode,Y as EquirectangularReflectionMapping,Q as EquirectangularRefractionMapping,S as Euler,a as EventDispatcher,Ru as ExpressionNode,hs as FileLoader,ze as Float16BufferAttribute,Pe as Float32BufferAttribute,B as FloatType,P as FramebufferTexture,Fl as FrontFacingNode,je as FrontSide,tt as Frustum,Jn as FunctionCallNode,hx as FunctionNode,Sf as FunctionOverloadingNode,F_ as GLSLNodeParser,Ar as GreaterCompare,Pt as GreaterDepth,Rr as GreaterEqualCompare,It as GreaterEqualDepth,Lr as GreaterEqualStencilFunc,Ir as GreaterStencilFunc,ds as Group,he as HalfFloatType,rs as HemisphereLight,N_ as HemisphereLightNode,Dw as IESSpotLight,__ as IESSpotLightNode,$r as IncrementStencilOp,zr as IncrementWrapStencilOp,yc as IndexNode,zw as IndirectStorageBufferAttribute,Sc as InstanceNode,M as InstancedBufferAttribute,C as InstancedInterleavedBuffer,wc as InstancedMeshNode,T as IntType,m as InterleavedBuffer,f as InterleavedBufferAttribute,Hr as InvertStencilOp,Hc as IrradianceNode,qs as JoinNode,Xr as KeepStencilOp,Le as LessCompare,Vt as LessDepth,Mr as LessEqualCompare,Dt as LessEqualDepth,Vr as LessEqualStencilFunc,Ur as LessStencilFunc,ss as LightProbe,S_ as LightProbeNode,$_ as Lighting,Wc as LightingContextNode,Kh as LightingModel,kc as LightingNode,Zx as LightsNode,Lh as Line2NodeMaterial,U as LineBasicMaterial,Rh as LineBasicNodeMaterial,O as LineDashedMaterial,Mh as LineDashedNodeMaterial,q as LinearFilter,Be as LinearMipMapLinearFilter,I as LinearMipmapLinearFilter,Ge as LinearMipmapNearestFilter,de as LinearSRGBColorSpace,is as LinearToneMapping,cs as Loader,Pc as LoopNode,Ht as LuminanceAlphaFormat,$t as LuminanceFormat,yf as MRTNode,im as MatcapUVNode,D as Material,ps as MaterialLoader,Fd as MaterialNode,nd as MaterialReferenceNode,u as MathUtils,i as Matrix2,n as Matrix3,o as Matrix4,Kr as MaxEquation,Uu as MaxMipLevelNode,ti as MemberNode,H as Mesh,te as MeshBasicMaterial,Zh as MeshBasicNodeMaterial,re as MeshLambertMaterial,np as MeshLambertNodeMaterial,ye as MeshMatcapMaterial,am as MeshMatcapNodeMaterial,k as MeshNormalMaterial,Uh as MeshNormalNodeMaterial,se as MeshPhongMaterial,ap as MeshPhongNodeMaterial,me as MeshPhysicalMaterial,Qg as MeshPhysicalNodeMaterial,Jg as MeshSSSNodeMaterial,ge as MeshStandardMaterial,Kg as MeshStandardNodeMaterial,fe as MeshToonMaterial,sm as MeshToonNodeMaterial,Yr as MinEquation,vr as MirroredRepeatWrapping,J as MixOperation,cl as ModelNode,Oc as MorphNode,Ct as MultiplyBlending,ee as MultiplyOperation,_ as NearestFilter,ke as NearestMipmapLinearFilter,Er as NearestMipmapNearestFilter,ls as NeutralToneMapping,Br as NeverCompare,Ot as NeverDepth,Gr as NeverStencilFunc,G as NoBlending,x as NoColorSpace,p as NoToneMapping,Ws as Node,Vs as NodeAccess,UT as NodeAttribute,h_ as NodeBuilder,$T as NodeCache,zT as NodeCode,p_ as NodeFrame,g_ as NodeFunctionInput,Ww as NodeLoader,wh as NodeMaterial,$w as NodeMaterialLoader,fs as NodeMaterialObserver,Hw as NodeObjectLoader,Is as NodeShaderStage,Ds as NodeType,OT as NodeUniform,Ls as NodeUpdateType,Ps as NodeUtils,GT as NodeVar,kT as NodeVarying,V as NormalBlending,Sd as NormalMapNode,wr as NotEqualCompare,Bt as NotEqualDepth,Pr as NotEqualStencilFunc,Fe as Object3D,il as Object3DNode,gs as ObjectLoader,R as ObjectSpaceNormalMap,Et as OneFactor,ft as OneMinusDstAlphaFactor,yt as OneMinusDstColorFactor,xt as OneMinusSrcAlphaFactor,bt as OneMinusSrcColorFactor,ie as OrthographicCamera,gf as OutputStructNode,et as PCFShadowMap,Ig as PMREMGenerator,zg as PMREMNode,lf as ParameterNode,Zy as PassNode,ne as PerspectiveCamera,sp as PhongLightingModel,Qp as PhysicalLightingModel,Me as Plane,He as PlaneGeometry,Zr as PointLight,Vb as PointLightNode,yy as PointUVNode,be as PointsMaterial,pm as PointsNodeMaterial,Gw as PostProcessing,qy as PosterizeNode,Tn as PropertyNode,sy as QuadMesh,Qe as Quaternion,Tr as RED_GREEN_RGTC2_Format,xr as RED_RGTC1_Format,We as REVISION,ce as RGBAFormat,ct as RGBAIntegerFormat,gr as RGBA_ASTC_10x10_Format,cr as RGBA_ASTC_10x5_Format,hr as RGBA_ASTC_10x6_Format,pr as RGBA_ASTC_10x8_Format,mr as RGBA_ASTC_12x10_Format,fr as RGBA_ASTC_12x12_Format,sr as RGBA_ASTC_4x4_Format,ir as RGBA_ASTC_5x4_Format,nr as RGBA_ASTC_5x5_Format,or as RGBA_ASTC_6x5_Format,ar as RGBA_ASTC_6x6_Format,ur as RGBA_ASTC_8x5_Format,lr as RGBA_ASTC_8x6_Format,dr as RGBA_ASTC_8x8_Format,yr as RGBA_BPTC_Format,rr as RGBA_ETC2_EAC_Format,Jt as RGBA_PVRTC_2BPPV1_Format,Zt as RGBA_PVRTC_4BPPV1_Format,qt as RGBA_S3TC_DXT1_Format,Xt as RGBA_S3TC_DXT3_Format,Kt as RGBA_S3TC_DXT5_Format,dt as RGBFormat,lt as RGBIntegerFormat,er as RGB_ETC1_Format,tr as RGB_ETC2_Format,Qt as RGB_PVRTC_2BPPV1_Format,Yt as RGB_PVRTC_4BPPV1_Format,jt as RGB_S3TC_DXT1_Format,Ve as RGFormat,ut as RGIntegerFormat,ny as RTTNode,Ax as RangeNode,es as RectAreaLight,b_ as RectAreaLightNode,it as RedFormat,st as RedIntegerFormat,rd as ReferenceNode,Zf as ReflectorNode,ns as ReinhardToneMapping,Eu as RemapNode,Fu as RenderOutputNode,oe as RenderTarget,lu as RendererReferenceNode,lb as RendererUtils,Sr as RepeatWrapping,jr as ReplaceStencilOp,gt as ReverseSubtractEquation,um as RotateNode,_r as SIGNED_RED_GREEN_RGTC2_Format,br as SIGNED_RED_RGTC1_Format,z as SRGBColorSpace,h as SRGBTransfer,j as Scene,_y as SceneNode,Xc as ScreenNode,bx as ScriptableNode,gx as ScriptableValueNode,Ys as SetNode,Jx as ShadowBaseNode,Te as ShadowMaterial,vb as ShadowNode,fm as ShadowNodeMaterial,nt as ShortType,Fc as SkinningNode,v as Sphere,Oe as SphereGeometry,Ks as SplitNode,Qr as SpotLight,T_ as SpotLightNode,xe as SpriteMaterial,cm as SpriteNodeMaterial,If as SpriteSheetUVNode,Nt as SrcAlphaFactor,vt as SrcAlphaSaturateFactor,St as SrcColorFactor,df as StackNode,g as StaticDrawUsage,hy as StorageArrayElementNode,cy as StorageBufferAttribute,gy as StorageBufferNode,dy as StorageInstancedBufferAttribute,kw as StorageTexture,Ey as StorageTextureNode,pf as StructNode,hf as StructTypeNode,mt as SubtractEquation,Mt as SubtractiveBlending,BT as TSL,A as TangentSpaceNormalMap,js as TempNode,pe as Texture,Ry as Texture3DNode,Gu as TextureNode,Du as TextureSizeNode,cu as ToneMappingNode,Jy as ToonOutlinePassNode,Df as TriplanarTexturesNode,Ie as UVMapping,ve as Uint16BufferAttribute,_e as Uint32BufferAttribute,ju as UniformArrayNode,hn as UniformGroupNode,xn as UniformNode,Ce as UnsignedByteType,Re as UnsignedInt248Type,zt as UnsignedInt5999Type,b as UnsignedIntType,Gt as UnsignedShort4444Type,kt as UnsignedShort5551Type,at as UnsignedShortType,My as UserDataNode,De as VSMShadowMap,$a as VarNode,Ka as VaryingNode,t as Vector2,r as Vector3,s as Vector4,fy as VertexColorNode,hh as ViewportDepthNode,dh as ViewportDepthTextureNode,Bh as ViewportSharedTextureNode,oh as ViewportTextureNode,_m as VolumeNodeMaterial,l as WebGLCoordinateSystem,W as WebGLCubeRenderTarget,d as WebGPUCoordinateSystem,Uw as WebGPURenderer,Ze as WebXRController,Ke as ZeroFactor,qr as ZeroStencilOp,pt as createCanvasElement,Os as defaultBuildStages,Us as defaultShaderStages,Gs as shaderStages,ks as vectorComponents};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
